
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800ab78  0800ab78  0001ab78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b098  0800b098  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b098  0800b098  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b098  0800b098  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001f0  0800b290  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  0800b290  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c30  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f87  00000000  00000000  00037e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  0003bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0fe  00000000  00000000  0003ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e5c  00000000  00000000  00056fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eed0  00000000  00000000  0006be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000facfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  000fad50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab5c 	.word	0x0800ab5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ab5c 	.word	0x0800ab5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <CheckCrc8>:

float RH = 0;
float Temp = 0;

unsigned char  CheckCrc8(unsigned char *pDat,unsigned char Lenth)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
	unsigned char crc = 0xff, i, j;
 8000f9c:	23ff      	movs	r3, #255	; 0xff
 8000f9e:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < Lenth ; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73bb      	strb	r3, [r7, #14]
 8000fa4:	e022      	b.n	8000fec <CheckCrc8+0x5c>
	{
			crc = crc ^ *pDat;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4053      	eors	r3, r2
 8000fae:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e011      	b.n	8000fda <CheckCrc8+0x4a>
			{
					if (crc & 0x80) crc = (crc << 1) ^ 0x31;
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	da07      	bge.n	8000fce <CheckCrc8+0x3e>
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e002      	b.n	8000fd4 <CheckCrc8+0x44>
					else crc <<= 1;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
			for (j = 0; j < 8; j++)
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	737b      	strb	r3, [r7, #13]
 8000fda:	7b7b      	ldrb	r3, [r7, #13]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d9ea      	bls.n	8000fb6 <CheckCrc8+0x26>
			}
			pDat++;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < Lenth ; i++)
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	73bb      	strb	r3, [r7, #14]
 8000fec:	7bba      	ldrb	r2, [r7, #14]
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3d8      	bcc.n	8000fa6 <CheckCrc8+0x16>
	}
	return crc;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <read_register>:

uint8_t read_register(uint8_t register_pointer)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
	uint8_t return_value = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, (uint16_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	b29a      	uxth	r2, r3
 8001016:	2364      	movs	r3, #100	; 0x64
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 030e 	add.w	r3, r7, #14
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	2170      	movs	r1, #112	; 0x70
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <read_register+0x48>)
 800102a:	f002 fe07 	bl	8003c3c <HAL_I2C_Mem_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	/* Check the communication status */
	if(status != HAL_OK)
	{

	}
	printf("return_value for %X : %X \n",register_pointer, return_value);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	7bba      	ldrb	r2, [r7, #14]
 8001036:	4619      	mov	r1, r3
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <read_register+0x4c>)
 800103a:	f006 fde5 	bl	8007c08 <iprintf>
	return return_value;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000378 	.word	0x20000378
 800104c:	0800ab78 	.word	0x0800ab78

08001050 <trigger_measurement_data_dht20>:
//  DHT20_BUSY				  = 0x03U
//} Status_Trigger_DHT20;

//Trigger measurement data
Status_Trigger_DHT20 trigger_measurement_data_dht20()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af02      	add	r7, sp, #8
	Status_Trigger_DHT20 status = DHT20_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	77fb      	strb	r3, [r7, #31]

	HAL_Delay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f001 fb94 	bl	8002788 <HAL_Delay>
	uint8_t status_init = read_register(0x71);
 8001060:	2071      	movs	r0, #113	; 0x71
 8001062:	f7ff ffcd 	bl	8001000 <read_register>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
	if ((status_init & 0x18) == 0x18) // et a byte of status word by sending 0x71. If the status word and 0x18 are not equal to 0x18
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	f003 0318 	and.w	r3, r3, #24
 8001070:	2b18      	cmp	r3, #24
 8001072:	f040 80b9 	bne.w	80011e8 <trigger_measurement_data_dht20+0x198>
	{
		HAL_Delay(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f001 fb86 	bl	8002788 <HAL_Delay>
		uint8_t data_t[3];
		data_t[0] = 0xAC; //address
 800107c:	23ac      	movs	r3, #172	; 0xac
 800107e:	733b      	strb	r3, [r7, #12]
		data_t[1] = 0x33; //data1
 8001080:	2333      	movs	r3, #51	; 0x33
 8001082:	737b      	strb	r3, [r7, #13]
		data_t[2] = 0x00; //data2
 8001084:	2300      	movs	r3, #0
 8001086:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit (&hi2c1, ADDRESS_SLAVE_DHT20 << 1,(uint8_t *) data_t, 3, 100);
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2303      	movs	r3, #3
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	4858      	ldr	r0, [pc, #352]	; (80011f8 <trigger_measurement_data_dht20+0x1a8>)
 8001096:	f002 fa67 	bl	8003568 <HAL_I2C_Master_Transmit>
		HAL_Delay(80);
 800109a:	2050      	movs	r0, #80	; 0x50
 800109c:	f001 fb74 	bl	8002788 <HAL_Delay>

		uint8_t buffer[7];
		uint32_t data_read = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]

    // receive the 2 x 8bit data into the receive buffer
    HAL_I2C_Master_Receive(&hi2c1, ADDRESS_SLAVE_DHT20 << 1, buffer, 7, 100);
 80010a4:	1d3a      	adds	r2, r7, #4
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2307      	movs	r3, #7
 80010ac:	2170      	movs	r1, #112	; 0x70
 80010ae:	4852      	ldr	r0, [pc, #328]	; (80011f8 <trigger_measurement_data_dht20+0x1a8>)
 80010b0:	f002 fb58 	bl	8003764 <HAL_I2C_Master_Receive>

		for (int i =0; i<7;i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e00b      	b.n	80010d2 <trigger_measurement_data_dht20+0x82>
		{
			printf("buffer %d: %X \n",i, buffer[i]);
 80010ba:	1d3a      	adds	r2, r7, #4
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	69b9      	ldr	r1, [r7, #24]
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <trigger_measurement_data_dht20+0x1ac>)
 80010c8:	f006 fd9e 	bl	8007c08 <iprintf>
		for (int i =0; i<7;i++)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	ddf0      	ble.n	80010ba <trigger_measurement_data_dht20+0x6a>
		}

		// Check Bit[7] at Byte0
		if ((buffer[0] & 0x80) == 0x00)
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db79      	blt.n	80011d4 <trigger_measurement_data_dht20+0x184>
		{
			// Check CRC
			if(CheckCrc8(&buffer[0],6)==buffer[6])
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2106      	movs	r1, #6
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff53 	bl	8000f90 <CheckCrc8>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	7abb      	ldrb	r3, [r7, #10]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d169      	bne.n	80011c8 <trigger_measurement_data_dht20+0x178>
			{
				printf("CRC OK \n");
 80010f4:	4842      	ldr	r0, [pc, #264]	; (8001200 <trigger_measurement_data_dht20+0x1b0>)
 80010f6:	f006 fe0d 	bl	8007d14 <puts>
				data_read=buffer[1]; 		// 0x90
 80010fa:	797b      	ldrb	r3, [r7, #5]
 80010fc:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;		// 0x9000
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	613b      	str	r3, [r7, #16]
				data_read+=buffer[2]; 		// 0x9000 + 0x28 => 0x9028
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	461a      	mov	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4413      	add	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8; 	// 0x902800
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	613b      	str	r3, [r7, #16]
				data_read+=buffer[3]; 		// 0x902800 + 0x96 => 0x902896
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	461a      	mov	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4413      	add	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
				data_read=data_read>>4;		// 0x902896 => 0x90289
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]

				RH = (float)data_read*100/1048576;
 8001124:	6938      	ldr	r0, [r7, #16]
 8001126:	f7ff fd65 	bl	8000bf4 <__aeabi_ui2f>
 800112a:	4603      	mov	r3, r0
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <trigger_measurement_data_dht20+0x1b4>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fdb8 	bl	8000ca4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fe66 	bl	8000e0c <__aeabi_fdiv>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <trigger_measurement_data_dht20+0x1b8>)
 8001146:	601a      	str	r2, [r3, #0]
				printf("RH %0.1f%% \n", RH);
 8001148:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <trigger_measurement_data_dht20+0x1b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f96b 	bl	8000428 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	482d      	ldr	r0, [pc, #180]	; (800120c <trigger_measurement_data_dht20+0x1bc>)
 8001158:	f006 fd56 	bl	8007c08 <iprintf>

				data_read=buffer[3]&0x0F;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	613b      	str	r3, [r7, #16]
				data_read+=buffer[4];
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	461a      	mov	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4413      	add	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
				data_read=data_read<<8;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	613b      	str	r3, [r7, #16]
				data_read+=buffer[5];
 800117a:	7a7b      	ldrb	r3, [r7, #9]
 800117c:	461a      	mov	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4413      	add	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

				Temp = (float)data_read*200/1048576-50;
 8001184:	6938      	ldr	r0, [r7, #16]
 8001186:	f7ff fd35 	bl	8000bf4 <__aeabi_ui2f>
 800118a:	4603      	mov	r3, r0
 800118c:	4920      	ldr	r1, [pc, #128]	; (8001210 <trigger_measurement_data_dht20+0x1c0>)
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd88 	bl	8000ca4 <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe36 	bl	8000e0c <__aeabi_fdiv>
 80011a0:	4603      	mov	r3, r0
 80011a2:	491c      	ldr	r1, [pc, #112]	; (8001214 <trigger_measurement_data_dht20+0x1c4>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fc73 	bl	8000a90 <__aeabi_fsub>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <trigger_measurement_data_dht20+0x1c8>)
 80011b0:	601a      	str	r2, [r3, #0]
				printf("Temp %0.1f \n", Temp);
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <trigger_measurement_data_dht20+0x1c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f936 	bl	8000428 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <trigger_measurement_data_dht20+0x1cc>)
 80011c2:	f006 fd21 	bl	8007c08 <iprintf>
 80011c6:	e011      	b.n	80011ec <trigger_measurement_data_dht20+0x19c>
			}
			else
			{
				printf("CRC fail \n");
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <trigger_measurement_data_dht20+0x1d0>)
 80011ca:	f006 fda3 	bl	8007d14 <puts>
				status = DHT20_ERROR_CRC;
 80011ce:	2302      	movs	r3, #2
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	e00b      	b.n	80011ec <trigger_measurement_data_dht20+0x19c>
			}
		}
		else
		{
			printf("Check Bit[7] at Byte0: %x \n",buffer[0]&0x80);
 80011d4:	793b      	ldrb	r3, [r7, #4]
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	4619      	mov	r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <trigger_measurement_data_dht20+0x1d4>)
 80011de:	f006 fd13 	bl	8007c08 <iprintf>
			status = DHT20_BUSY;
 80011e2:	2303      	movs	r3, #3
 80011e4:	77fb      	strb	r3, [r7, #31]
 80011e6:	e001      	b.n	80011ec <trigger_measurement_data_dht20+0x19c>
		}

	}
	else //  initialize the 0x1B, 0x1C, 0x1E registers
	{
		status = DHT20_ERROR_INIT;
 80011e8:	2301      	movs	r3, #1
 80011ea:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000378 	.word	0x20000378
 80011fc:	0800ab94 	.word	0x0800ab94
 8001200:	0800aba4 	.word	0x0800aba4
 8001204:	42c80000 	.word	0x42c80000
 8001208:	2000020c 	.word	0x2000020c
 800120c:	0800abac 	.word	0x0800abac
 8001210:	43480000 	.word	0x43480000
 8001214:	42480000 	.word	0x42480000
 8001218:	20000210 	.word	0x20000210
 800121c:	0800abbc 	.word	0x0800abbc
 8001220:	0800abcc 	.word	0x0800abcc
 8001224:	0800abd8 	.word	0x0800abd8

08001228 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f043 030c 	orr.w	r3, r3, #12
 8001246:	b2db      	uxtb	r3, r3
 8001248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	f043 030c 	orr.w	r3, r3, #12
 800125a:	b2db      	uxtb	r3, r3
 800125c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001268:	f107 0208 	add.w	r2, r7, #8
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2304      	movs	r3, #4
 8001272:	2142      	movs	r1, #66	; 0x42
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <lcd_send_cmd+0x5c>)
 8001276:	f002 f977 	bl	8003568 <HAL_I2C_Master_Transmit>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000378 	.word	0x20000378

08001288 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f023 030f 	bic.w	r3, r3, #15
 8001298:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f043 030d 	orr.w	r3, r3, #13
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	f043 0309 	orr.w	r3, r3, #9
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	f043 030d 	orr.w	r3, r3, #13
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	f043 0309 	orr.w	r3, r3, #9
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2304      	movs	r3, #4
 80012d2:	2142      	movs	r1, #66	; 0x42
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <lcd_send_data+0x5c>)
 80012d6:	f002 f947 	bl	8003568 <HAL_I2C_Master_Transmit>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000378 	.word	0x20000378

080012e8 <lcd_init>:

void lcd_init (void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80012ec:	2033      	movs	r0, #51	; 0x33
 80012ee:	f7ff ff9b 	bl	8001228 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80012f2:	2032      	movs	r0, #50	; 0x32
 80012f4:	f7ff ff98 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f001 fa45 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f7ff ff92 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 8001304:	2032      	movs	r0, #50	; 0x32
 8001306:	f001 fa3f 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff8c 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f001 fa39 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001316:	2006      	movs	r0, #6
 8001318:	f7ff ff86 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 800131c:	2032      	movs	r0, #50	; 0x32
 800131e:	f001 fa33 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001322:	200c      	movs	r0, #12
 8001324:	f7ff ff80 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 8001328:	2032      	movs	r0, #50	; 0x32
 800132a:	f001 fa2d 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff ff7a 	bl	8001228 <lcd_send_cmd>
	HAL_Delay(50);
 8001334:	2032      	movs	r0, #50	; 0x32
 8001336:	f001 fa27 	bl	8002788 <HAL_Delay>
	lcd_send_cmd (0x80);
 800133a:	2080      	movs	r0, #128	; 0x80
 800133c:	f7ff ff74 	bl	8001228 <lcd_send_cmd>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800134c:	e006      	b.n	800135c <lcd_send_string+0x18>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff96 	bl	8001288 <lcd_send_data>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f4      	bne.n	800134e <lcd_send_string+0xa>
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff ff58 	bl	8001228 <lcd_send_cmd>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <lcd_goto_XY>:

void lcd_goto_XY(int row, int col)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <lcd_goto_XY+0x1a>
    {
        pos_Addr = 0x80 + col; // Hàng 0 bắt đầu từ 0x80
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3b80      	subs	r3, #128	; 0x80
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e006      	b.n	80013a4 <lcd_goto_XY+0x28>
    }
    else if(row == 1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d103      	bne.n	80013a4 <lcd_goto_XY+0x28>
    {
        pos_Addr = 0xC0 + col; // Hàng 1 bắt đầu từ 0xC0
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3b40      	subs	r3, #64	; 0x40
 80013a2:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos_Addr);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <lcd_send_cmd>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_UART_RxCpltCallback>:
#include "UART.h"
#include <stdio.h>

const char ACK_token[] = "ACK.";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a29      	ldr	r2, [pc, #164]	; (8001468 <HAL_UART_RxCpltCallback+0xb4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d14b      	bne.n	800145e <HAL_UART_RxCpltCallback+0xaa>
    	// SEND ACK
    	HAL_UART_Transmit(&huart1, (uint8_t*)ACK_token, sizeof(ACK_token), 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	2204      	movs	r2, #4
 80013cc:	4927      	ldr	r1, [pc, #156]	; (800146c <HAL_UART_RxCpltCallback+0xb8>)
 80013ce:	4828      	ldr	r0, [pc, #160]	; (8001470 <HAL_UART_RxCpltCallback+0xbc>)
 80013d0:	f005 f96e 	bl	80066b0 <HAL_UART_Transmit>
    	// READ COMMAND
        if(strncmp(UARTBuffer, "RGB: COLOR:", 11)){
 80013d4:	220b      	movs	r2, #11
 80013d6:	4927      	ldr	r1, [pc, #156]	; (8001474 <HAL_UART_RxCpltCallback+0xc0>)
 80013d8:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_UART_RxCpltCallback+0xc4>)
 80013da:	f006 fd41 	bl	8007e60 <strncmp>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d02d      	beq.n	8001440 <HAL_UART_RxCpltCallback+0x8c>
            if(sscanf(UARTBuffer, "RGB: COLOR: %hhu, %hhu, %hhu.", &red, &green, &blue) == 3){// SUCCESS
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_UART_RxCpltCallback+0xc8>)
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_UART_RxCpltCallback+0xcc>)
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_UART_RxCpltCallback+0xd0>)
 80013ec:	4926      	ldr	r1, [pc, #152]	; (8001488 <HAL_UART_RxCpltCallback+0xd4>)
 80013ee:	4822      	ldr	r0, [pc, #136]	; (8001478 <HAL_UART_RxCpltCallback+0xc4>)
 80013f0:	f006 fcb8 	bl	8007d64 <siscanf>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d112      	bne.n	8001420 <HAL_UART_RxCpltCallback+0x6c>
            	for(uint8_t i = 0; i < RGB_NUM_LED; i++){
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e00b      	b.n	8001418 <HAL_UART_RxCpltCallback+0x64>
            		RGB_SetColor(i, red, green, blue);
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_UART_RxCpltCallback+0xd0>)
 8001402:	7819      	ldrb	r1, [r3, #0]
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_UART_RxCpltCallback+0xcc>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_UART_RxCpltCallback+0xc8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	7bf8      	ldrb	r0, [r7, #15]
 800140e:	f000 f96d 	bl	80016ec <RGB_SetColor>
            	for(uint8_t i = 0; i < RGB_NUM_LED; i++){
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3301      	adds	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9f0      	bls.n	8001400 <HAL_UART_RxCpltCallback+0x4c>
 800141e:	e019      	b.n	8001454 <HAL_UART_RxCpltCallback+0xa0>
            	}
            }else{// FAILED to read all 3 value
            	for(uint8_t i = 0; i < RGB_NUM_LED; i++){
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]
 8001424:	e008      	b.n	8001438 <HAL_UART_RxCpltCallback+0x84>
            		RGB_SetColor(i, 0, 0, 255);
 8001426:	7bb8      	ldrb	r0, [r7, #14]
 8001428:	23ff      	movs	r3, #255	; 0xff
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	f000 f95d 	bl	80016ec <RGB_SetColor>
            	for(uint8_t i = 0; i < RGB_NUM_LED; i++){
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3301      	adds	r3, #1
 8001436:	73bb      	strb	r3, [r7, #14]
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d9f3      	bls.n	8001426 <HAL_UART_RxCpltCallback+0x72>
 800143e:	e009      	b.n	8001454 <HAL_UART_RxCpltCallback+0xa0>
            	}
            }
        }
        else if(strncmp(UARTBuffer, "RGB: OFF", 8)){
 8001440:	2208      	movs	r2, #8
 8001442:	4912      	ldr	r1, [pc, #72]	; (800148c <HAL_UART_RxCpltCallback+0xd8>)
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <HAL_UART_RxCpltCallback+0xc4>)
 8001446:	f006 fd0b 	bl	8007e60 <strncmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_RxCpltCallback+0xa0>
        	RGB_TurnOff();
 8001450:	f000 f974 	bl	800173c <RGB_TurnOff>
//        	RGB_Auto((uint8_t)Temp, (uint8_t)RH);
        }
        else{// read other cmd

        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTBuffer, UART_BUFF_SIZE);
 8001454:	221e      	movs	r2, #30
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <HAL_UART_RxCpltCallback+0xc4>)
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_RxCpltCallback+0xbc>)
 800145a:	f005 f9b4 	bl	80067c6 <HAL_UART_Receive_IT>
    }
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40013800 	.word	0x40013800
 800146c:	0800ac6c 	.word	0x0800ac6c
 8001470:	200002d8 	.word	0x200002d8
 8001474:	0800abf4 	.word	0x0800abf4
 8001478:	200002b8 	.word	0x200002b8
 800147c:	200002b4 	.word	0x200002b4
 8001480:	200002d6 	.word	0x200002d6
 8001484:	200002d7 	.word	0x200002d7
 8001488:	0800ac00 	.word	0x0800ac00
 800148c:	0800ac20 	.word	0x0800ac20

08001490 <handleDisplay>:
uint8_t sendData[20] = "12.13-23.67";

/* Hiển thị dòng chữ đầu tiên của chương trình 1 lần duy nhất
 * */
void handleDisplay()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	char str[] = "DO AN";
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <handleDisplay+0x58>)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149e:	6018      	str	r0, [r3, #0]
 80014a0:	3304      	adds	r3, #4
 80014a2:	8019      	strh	r1, [r3, #0]
	for (int i = 11; i >= 0; i--) {
 80014a4:	230b      	movs	r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e013      	b.n	80014d2 <handleDisplay+0x42>
		lcd_goto_XY(0, i);
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff65 	bl	800137c <lcd_goto_XY>
		lcd_send_string(str);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff45 	bl	8001344 <lcd_send_string>
		HAL_Delay(400);
 80014ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014be:	f001 f963 	bl	8002788 <HAL_Delay>
		lcd_clear_display();
 80014c2:	f7ff ff54 	bl	800136e <lcd_clear_display>
		HAL_Delay(50);
 80014c6:	2032      	movs	r0, #50	; 0x32
 80014c8:	f001 f95e 	bl	8002788 <HAL_Delay>
	for (int i = 11; i >= 0; i--) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dae8      	bge.n	80014aa <handleDisplay+0x1a>
	}
	flag_HandleDisplay = true;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <handleDisplay+0x5c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0800ac2c 	.word	0x0800ac2c
 80014ec:	20000214 	.word	0x20000214

080014f0 <display_data>:

/* Hiển thị dữ liệu đọc từ cảm biến DHT20 lên màn hình LCD bằng I2C
 * Cứ mỗi 5s sẽ cập nhật dữ liệu gửi 1 lần
 * */
void display_data()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
	trigger_measurement_data_dht20();
 80014f6:	f7ff fdab 	bl	8001050 <trigger_measurement_data_dht20>
	char buffer[20];
//	char bufferTemp[100];
	sprintf(buffer, "TEMP:  %.2f C", Temp);
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <display_data+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ff92 	bl	8000428 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	1d38      	adds	r0, r7, #4
 800150a:	4912      	ldr	r1, [pc, #72]	; (8001554 <display_data+0x64>)
 800150c:	f006 fc0a 	bl	8007d24 <siprintf>
//	sprintf(bufferTemp, "%.2f", Temp);


	lcd_goto_XY(0, 0);
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff ff32 	bl	800137c <lcd_goto_XY>
	lcd_send_string(buffer);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff12 	bl	8001344 <lcd_send_string>

//	char bufferHumi[20];
	sprintf(buffer, "HUMI:  %.2f %%", RH);
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <display_data+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	1d38      	adds	r0, r7, #4
 8001530:	490a      	ldr	r1, [pc, #40]	; (800155c <display_data+0x6c>)
 8001532:	f006 fbf7 	bl	8007d24 <siprintf>
//	sprintf(bufferHumi, "%.2f", RH);

//	strcat(bufferTemp, "-");
//	strcat(bufferTemp, bufferHumi);
//	bufferTemp[strlen(bufferTemp)] = '\0';
	lcd_goto_XY(1, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff ff1f 	bl	800137c <lcd_goto_XY>
	lcd_send_string(buffer);
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff feff 	bl	8001344 <lcd_send_string>
//	int sz = strlen(bufferTemp);
//	for(int i = 0; i < sz; i++){
//		sendData[i] = (uint8_t)bufferTemp[i];
//	}
//	sendData[sz] = '\0';
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000210 	.word	0x20000210
 8001554:	0800ac34 	.word	0x0800ac34
 8001558:	2000020c 	.word	0x2000020c
 800155c:	0800ac44 	.word	0x0800ac44

08001560 <sendDataFromSTMToESP>:

/* Xử lý dữ liêụ và truyền cho esp32
 *
 * */
void sendDataFromSTMToESP(){
 8001560:	b580      	push	{r7, lr}
 8001562:	b0a0      	sub	sp, #128	; 0x80
 8001564:	af00      	add	r7, sp, #0
	char bufferTemp[100];
	sprintf(bufferTemp, "%.2f", Temp);
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <sendDataFromSTMToESP+0xd0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff5c 	bl	8000428 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	f107 0014 	add.w	r0, r7, #20
 8001578:	492e      	ldr	r1, [pc, #184]	; (8001634 <sendDataFromSTMToESP+0xd4>)
 800157a:	f006 fbd3 	bl	8007d24 <siprintf>
	char bufferHumi[20];
	sprintf(bufferHumi, "%.2f", RH);
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <sendDataFromSTMToESP+0xd8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff50 	bl	8000428 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4638      	mov	r0, r7
 800158e:	4929      	ldr	r1, [pc, #164]	; (8001634 <sendDataFromSTMToESP+0xd4>)
 8001590:	f006 fbc8 	bl	8007d24 <siprintf>
	strcat(bufferTemp, "-");
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fdd9 	bl	8000150 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4413      	add	r3, r2
 80015a8:	4924      	ldr	r1, [pc, #144]	; (800163c <sendDataFromSTMToESP+0xdc>)
 80015aa:	461a      	mov	r2, r3
 80015ac:	460b      	mov	r3, r1
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	8013      	strh	r3, [r2, #0]
	strcat(bufferTemp, bufferHumi);
 80015b2:	463a      	mov	r2, r7
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 fc41 	bl	8007e42 <strcat>
	bufferTemp[strlen(bufferTemp)] = '\0';
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fdc3 	bl	8000150 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80015d0:	4413      	add	r3, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	f803 2c6c 	strb.w	r2, [r3, #-108]
	int sz = strlen(bufferTemp);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < sz; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015ea:	e00c      	b.n	8001606 <sendDataFromSTMToESP+0xa6>
		sendData[i] = (uint8_t)bufferTemp[i];
 80015ec:	f107 0214 	add.w	r2, r7, #20
 80015f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f2:	4413      	add	r3, r2
 80015f4:	7819      	ldrb	r1, [r3, #0]
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <sendDataFromSTMToESP+0xe0>)
 80015f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015fa:	4413      	add	r3, r2
 80015fc:	460a      	mov	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sz; i++){
 8001600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001602:	3301      	adds	r3, #1
 8001604:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001606:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800160a:	429a      	cmp	r2, r3
 800160c:	dbee      	blt.n	80015ec <sendDataFromSTMToESP+0x8c>
	}
	sendData[sz] = '\0';
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <sendDataFromSTMToESP+0xe0>)
 8001610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001612:	4413      	add	r3, r2
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, sendData, sizeof(sendData), 1000);
 8001618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161c:	2214      	movs	r2, #20
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <sendDataFromSTMToESP+0xe0>)
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <sendDataFromSTMToESP+0xe4>)
 8001622:	f005 f845 	bl	80066b0 <HAL_UART_Transmit>
}
 8001626:	bf00      	nop
 8001628:	3780      	adds	r7, #128	; 0x80
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000210 	.word	0x20000210
 8001634:	0800ac54 	.word	0x0800ac54
 8001638:	2000020c 	.word	0x2000020c
 800163c:	0800ac5c 	.word	0x0800ac5c
 8001640:	20000000 	.word	0x20000000
 8001644:	200002d8 	.word	0x200002d8

08001648 <ledBlinky>:

void ledBlinky(){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800164c:	2120      	movs	r1, #32
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <ledBlinky+0x10>)
 8001650:	f001 fe0a 	bl	8003268 <HAL_GPIO_TogglePin>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010800 	.word	0x40010800

0800165c <RGBAuto>:

void RGBAuto(){
 800165c:	b598      	push	{r3, r4, r7, lr}
 800165e:	af00      	add	r7, sp, #0
	RGB_Auto(Temp, RH);
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <RGBAuto+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc6d 	bl	8000f44 <__aeabi_f2iz>
 800166a:	4604      	mov	r4, r0
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <RGBAuto+0x2c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fc67 	bl	8000f44 <__aeabi_f2iz>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	4620      	mov	r0, r4
 800167c:	f000 f897 	bl	80017ae <RGB_Auto>
}
 8001680:	bf00      	nop
 8001682:	bd98      	pop	{r3, r4, r7, pc}
 8001684:	20000210 	.word	0x20000210
 8001688:	2000020c 	.word	0x2000020c

0800168c <RGB_Init>:
 *  Created on: Dec 11, 2024
 *      Author: TRONG DAT
 */
#include "ledRGB.h"

void RGB_Init(){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Init(&RGB_TIM);
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <RGB_Init+0x54>)
 8001692:	f003 fe65 	bl	8005360 <HAL_TIM_PWM_Init>

	memset(DMA_Buffer, 0, RGB_DMA_BUFF_LENGTH);
 8001696:	2290      	movs	r2, #144	; 0x90
 8001698:	2100      	movs	r1, #0
 800169a:	4812      	ldr	r0, [pc, #72]	; (80016e4 <RGB_Init+0x58>)
 800169c:	f005 fe4c 	bl	8007338 <memset>

	RGB_SetColor(0, 255, 0, 0);
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	21ff      	movs	r1, #255	; 0xff
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f820 	bl	80016ec <RGB_SetColor>
	RGB_SetColor(1, 0, 255, 255);
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	22ff      	movs	r2, #255	; 0xff
 80016b0:	2100      	movs	r1, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 f81a 	bl	80016ec <RGB_SetColor>
	RGB_SetColor(2, 0, 255, 0);
 80016b8:	2300      	movs	r3, #0
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	2100      	movs	r1, #0
 80016be:	2002      	movs	r0, #2
 80016c0:	f000 f814 	bl	80016ec <RGB_SetColor>
	RGB_SetColor(3, 255, 0, 255);
 80016c4:	23ff      	movs	r3, #255	; 0xff
 80016c6:	2200      	movs	r2, #0
 80016c8:	21ff      	movs	r1, #255	; 0xff
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 f80e 	bl	80016ec <RGB_SetColor>

	RGB_Update();
 80016d0:	f000 f8da 	bl	8001888 <RGB_Update>

	flag_RGB_busy = 0;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <RGB_Init+0x5c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000414 	.word	0x20000414
 80016e4:	20000224 	.word	0x20000224
 80016e8:	20000330 	.word	0x20000330

080016ec <RGB_SetColor>:

void RGB_SetColor(uint8_t rgb_index, uint8_t red, uint8_t green, uint8_t blue){
 80016ec:	b490      	push	{r4, r7}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	4603      	mov	r3, r0
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	460b      	mov	r3, r1
 8001704:	717b      	strb	r3, [r7, #5]
 8001706:	4613      	mov	r3, r2
 8001708:	713b      	strb	r3, [r7, #4]
	if(red > 255) red = 255;
	if(green > 255) green = 255;
	if(blue > 255) blue = 255;

	ledRGBData[rgb_index].color.red = red;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <RGB_SetColor+0x4c>)
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	79ba      	ldrb	r2, [r7, #6]
 8001714:	705a      	strb	r2, [r3, #1]
	ledRGBData[rgb_index].color.green = green;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <RGB_SetColor+0x4c>)
 800171a:	797a      	ldrb	r2, [r7, #5]
 800171c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	ledRGBData[rgb_index].color.blue = blue;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <RGB_SetColor+0x4c>)
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	793a      	ldrb	r2, [r7, #4]
 800172a:	709a      	strb	r2, [r3, #2]
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bc90      	pop	{r4, r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000320 	.word	0x20000320

0800173c <RGB_TurnOff>:

void RGB_TurnOff(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	memset(ledRGBData, 0, sizeof(ledRGBData));
 8001740:	2210      	movs	r2, #16
 8001742:	2100      	movs	r1, #0
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <RGB_TurnOff+0x18>)
 8001746:	f005 fdf7 	bl	8007338 <memset>
	RGB_Update();
 800174a:	f000 f89d 	bl	8001888 <RGB_Update>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000320 	.word	0x20000320

08001758 <auto_map>:

int auto_map(int x, int in_min, int in_max, int out_min, int out_max){
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
    if (out_min < out_max){
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	429a      	cmp	r2, r3
 800176c:	da0d      	bge.n	800178a <auto_map+0x32>
        return(x - in_min) * (out_max - out_min) / (in_max - in_min);
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	69b9      	ldr	r1, [r7, #24]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	1a8a      	subs	r2, r1, r2
 800177a:	fb02 f203 	mul.w	r2, r2, r3
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1acb      	subs	r3, r1, r3
 8001784:	fb92 f3f3 	sdiv	r3, r2, r3
 8001788:	e00c      	b.n	80017a4 <auto_map+0x4c>
    }else{
        return(in_max - x) * (out_min - out_max) / (in_max - in_min);
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	1a8a      	subs	r2, r1, r2
 8001796:	fb02 f203 	mul.w	r2, r2, r3
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1acb      	subs	r3, r1, r3
 80017a0:	fb92 f3f3 	sdiv	r3, r2, r3
    }
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <RGB_Auto>:

void RGB_Auto(int temperature, int humidity){
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b087      	sub	sp, #28
 80017b2:	af02      	add	r7, sp, #8
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	// humid
	RGB_SetColor(0, auto_map(humidity, 0, 100, 100, 0), auto_map(humidity, 0, 100, 0, 255), 0);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	2264      	movs	r2, #100	; 0x64
 80017c0:	2100      	movs	r1, #0
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f7ff ffc8 	bl	8001758 <auto_map>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b2dc      	uxtb	r4, r3
 80017cc:	23ff      	movs	r3, #255	; 0xff
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	2100      	movs	r1, #0
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f7ff ffbe 	bl	8001758 <auto_map>
 80017dc:	4603      	mov	r3, r0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	4621      	mov	r1, r4
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff81 	bl	80016ec <RGB_SetColor>
	// temperature
	if(temperature < 20){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b13      	cmp	r3, #19
 80017ee:	dc0f      	bgt.n	8001810 <RGB_Auto+0x62>
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e008      	b.n	8001808 <RGB_Auto+0x5a>
			RGB_SetColor(i, 0, 255, 255);
 80017f6:	7bf8      	ldrb	r0, [r7, #15]
 80017f8:	23ff      	movs	r3, #255	; 0xff
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	2100      	movs	r1, #0
 80017fe:	f7ff ff75 	bl	80016ec <RGB_SetColor>
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	3301      	adds	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d9f3      	bls.n	80017f6 <RGB_Auto+0x48>
 800180e:	e034      	b.n	800187a <RGB_Auto+0xcc>
		}
	}
	else if(temperature < 40){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b27      	cmp	r3, #39	; 0x27
 8001814:	dc22      	bgt.n	800185c <RGB_Auto+0xae>
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 8001816:	2301      	movs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
 800181a:	e01b      	b.n	8001854 <RGB_Auto+0xa6>
			RGB_SetColor(i, auto_map(temperature, 20, 40, 0, 150), 0, auto_map(temperature, 20, 40, 255, 0));
 800181c:	2396      	movs	r3, #150	; 0x96
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2228      	movs	r2, #40	; 0x28
 8001824:	2114      	movs	r1, #20
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff96 	bl	8001758 <auto_map>
 800182c:	4603      	mov	r3, r0
 800182e:	b2dc      	uxtb	r4, r3
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	2228      	movs	r2, #40	; 0x28
 8001838:	2114      	movs	r1, #20
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff8c 	bl	8001758 <auto_map>
 8001840:	4603      	mov	r3, r0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	7bb8      	ldrb	r0, [r7, #14]
 8001846:	2200      	movs	r2, #0
 8001848:	4621      	mov	r1, r4
 800184a:	f7ff ff4f 	bl	80016ec <RGB_SetColor>
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	73bb      	strb	r3, [r7, #14]
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d9e0      	bls.n	800181c <RGB_Auto+0x6e>
 800185a:	e00e      	b.n	800187a <RGB_Auto+0xcc>
		}
	}
	else{
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 800185c:	2301      	movs	r3, #1
 800185e:	737b      	strb	r3, [r7, #13]
 8001860:	e008      	b.n	8001874 <RGB_Auto+0xc6>
			RGB_SetColor(i, 255, 0, 255);
 8001862:	7b78      	ldrb	r0, [r7, #13]
 8001864:	23ff      	movs	r3, #255	; 0xff
 8001866:	2200      	movs	r2, #0
 8001868:	21ff      	movs	r1, #255	; 0xff
 800186a:	f7ff ff3f 	bl	80016ec <RGB_SetColor>
		for(uint8_t i = 1; i < RGB_NUM_LED; i++){
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	3301      	adds	r3, #1
 8001872:	737b      	strb	r3, [r7, #13]
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9f3      	bls.n	8001862 <RGB_Auto+0xb4>
		}
	}
	RGB_Update();
 800187a:	f000 f805 	bl	8001888 <RGB_Update>
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
	...

08001888 <RGB_Update>:

void RGB_Update(){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
	if(flag_RGB_busy) return;
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <RGB_Update+0x98>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d13e      	bne.n	8001916 <RGB_Update+0x8e>

	memset(DMA_Buffer, 0, RGB_DMA_BUFF_LENGTH);
 8001898:	2290      	movs	r2, #144	; 0x90
 800189a:	2100      	movs	r1, #0
 800189c:	4821      	ldr	r0, [pc, #132]	; (8001924 <RGB_Update+0x9c>)
 800189e:	f005 fd4b 	bl	8007338 <memset>
	uint8_t bufferIndex = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t ledIndex = 0; ledIndex < RGB_NUM_LED; ledIndex++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	e022      	b.n	80018f2 <RGB_Update+0x6a>
		for(uint8_t bitIndex = 0; bitIndex < RGB_BITS_LENGTH; bitIndex++){
 80018ac:	2300      	movs	r3, #0
 80018ae:	717b      	strb	r3, [r7, #5]
 80018b0:	e019      	b.n	80018e6 <RGB_Update+0x5e>
			if((ledRGBData[ledIndex].ledData >> bitIndex) & 0x01){
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <RGB_Update+0xa0>)
 80018b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <RGB_Update+0x4a>
				DMA_Buffer[bufferIndex] = RGB_DUTYCYCLE_HI;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <RGB_Update+0x9c>)
 80018cc:	2106      	movs	r1, #6
 80018ce:	54d1      	strb	r1, [r2, r3]
 80018d0:	e003      	b.n	80018da <RGB_Update+0x52>
			}
			else{
				DMA_Buffer[bufferIndex] = RGB_DUTYCYCLE_LO;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <RGB_Update+0x9c>)
 80018d6:	2103      	movs	r1, #3
 80018d8:	54d1      	strb	r1, [r2, r3]
			}

			bufferIndex++;
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	3301      	adds	r3, #1
 80018de:	71fb      	strb	r3, [r7, #7]
		for(uint8_t bitIndex = 0; bitIndex < RGB_BITS_LENGTH; bitIndex++){
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	3301      	adds	r3, #1
 80018e4:	717b      	strb	r3, [r7, #5]
 80018e6:	797b      	ldrb	r3, [r7, #5]
 80018e8:	2b17      	cmp	r3, #23
 80018ea:	d9e2      	bls.n	80018b2 <RGB_Update+0x2a>
	for(uint8_t ledIndex = 0; ledIndex < RGB_NUM_LED; ledIndex++){
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	3301      	adds	r3, #1
 80018f0:	71bb      	strb	r3, [r7, #6]
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d9d9      	bls.n	80018ac <RGB_Update+0x24>
		}
	}

	HAL_StatusTypeDef HAL_PWM = HAL_TIM_PWM_Start_DMA(&RGB_TIM, RGB_TIM_CHANNEL, (uint32_t*)DMA_Buffer, RGB_DMA_BUFF_LENGTH);
 80018f8:	2390      	movs	r3, #144	; 0x90
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <RGB_Update+0x9c>)
 80018fc:	2100      	movs	r1, #0
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <RGB_Update+0xa4>)
 8001900:	f003 fd86 	bl	8005410 <HAL_TIM_PWM_Start_DMA>
 8001904:	4603      	mov	r3, r0
 8001906:	713b      	strb	r3, [r7, #4]
	if(HAL_PWM == HAL_OK) flag_RGB_busy = 1;
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d104      	bne.n	8001918 <RGB_Update+0x90>
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <RGB_Update+0x98>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e000      	b.n	8001918 <RGB_Update+0x90>
	if(flag_RGB_busy) return;
 8001916:	bf00      	nop
}
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000330 	.word	0x20000330
 8001924:	20000224 	.word	0x20000224
 8001928:	20000320 	.word	0x20000320
 800192c:	20000414 	.word	0x20000414

08001930 <HAL_TIM_PWM_PulseFinishedCallback>:
void RGB_Callback(){
//	HAL_TIM_PWM_Stop_DMA(&RGB_TIM, RGB_TIM_CHANNEL);
//	flag_RGB_busy = 0;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&RGB_TIM, RGB_TIM_CHANNEL);
 8001938:	2100      	movs	r1, #0
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800193c:	f003 ff0a 	bl	8005754 <HAL_TIM_PWM_Stop_DMA>
	flag_RGB_busy = 0;
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000414 	.word	0x20000414
 8001954:	20000330 	.word	0x20000330

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195c:	f000 feb2 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001960:	f000 f854 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001964:	f000 f9f0 	bl	8001d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001968:	f000 f9a6 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800196c:	f000 f9ce 	bl	8001d0c <MX_DMA_Init>
  MX_TIM2_Init();
 8001970:	f000 f8b6 	bl	8001ae0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001974:	f000 f886 	bl	8001a84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001978:	f000 f926 	bl	8001bc8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800197c:	f000 f972 	bl	8001c64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <main+0x98>)
 8001982:	f003 fc9b 	bl	80052bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  RGB_Init();
 8001986:	f7ff fe81 	bl	800168c <RGB_Init>
  lcd_init();
 800198a:	f7ff fcad 	bl	80012e8 <lcd_init>
  SCH_Init();
 800198e:	f000 fa59 	bl	8001e44 <SCH_Init>
  SCH_Add_Task(handleDisplay, 0, 6000);
 8001992:	f241 7270 	movw	r2, #6000	; 0x1770
 8001996:	2100      	movs	r1, #0
 8001998:	4816      	ldr	r0, [pc, #88]	; (80019f4 <main+0x9c>)
 800199a:	f000 fa5f 	bl	8001e5c <SCH_Add_Task>
  SCH_Add_Task(ledBlinky, 20, 1000);
 800199e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a2:	2114      	movs	r1, #20
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <main+0xa0>)
 80019a6:	f000 fa59 	bl	8001e5c <SCH_Add_Task>
  SCH_Add_Task(display_data, 6000, 5000);
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	f241 7170 	movw	r1, #6000	; 0x1770
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <main+0xa4>)
 80019b4:	f000 fa52 	bl	8001e5c <SCH_Add_Task>
  SCH_Add_Task(sendDataFromSTMToESP, 6100, 5000);
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	f241 71d4 	movw	r1, #6100	; 0x17d4
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <main+0xa8>)
 80019c2:	f000 fa4b 	bl	8001e5c <SCH_Add_Task>
  SCH_Add_Task(RGBAuto, 6200, 1000);
 80019c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ca:	f641 0138 	movw	r1, #6200	; 0x1838
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <main+0xac>)
 80019d0:	f000 fa44 	bl	8001e5c <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 80019d4:	f000 fb06 	bl	8001fe4 <SCH_Dispatch_Tasks>
	  if(flag_HandleDisplay){
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <main+0xb0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f9      	beq.n	80019d4 <main+0x7c>
		  SCH_Delete(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 fb35 	bl	8002050 <SCH_Delete>
		  flag_HandleDisplay = false;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <main+0xb0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
	  SCH_Dispatch_Tasks();
 80019ec:	e7f2      	b.n	80019d4 <main+0x7c>
 80019ee:	bf00      	nop
 80019f0:	200003cc 	.word	0x200003cc
 80019f4:	08001491 	.word	0x08001491
 80019f8:	08001649 	.word	0x08001649
 80019fc:	080014f1 	.word	0x080014f1
 8001a00:	08001561 	.word	0x08001561
 8001a04:	0800165d 	.word	0x0800165d
 8001a08:	20000214 	.word	0x20000214

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	; 0x40
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fc8c 	bl	8007338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a36:	2310      	movs	r3, #16
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 ffdc 	bl	8004a00 <HAL_RCC_OscConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a4e:	f000 f9f3 	bl	8001e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	230f      	movs	r3, #15
 8001a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fa48 	bl	8004f00 <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a76:	f000 f9df 	bl	8001e38 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3740      	adds	r7, #64	; 0x40
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <MX_I2C1_Init+0x54>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_I2C1_Init+0x58>)
 8001a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <MX_I2C1_Init+0x50>)
 8001ac2:	f001 fc0d 	bl	80032e0 <HAL_I2C_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001acc:	f000 f9b4 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000378 	.word	0x20000378
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08e      	sub	sp, #56	; 0x38
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	f107 0320 	add.w	r3, r7, #32
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b10:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b26:	2263      	movs	r2, #99	; 0x63
 8001b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b36:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b38:	f003 fb70 	bl	800521c <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001b42:	f000 f979 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b54:	f004 f876 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001b5e:	f000 f96b 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b62:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b64:	f003 fbfc 	bl	8005360 <HAL_TIM_PWM_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b6e:	f000 f963 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001b82:	f004 fcd5 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001b8c:	f000 f954 	bl	8001e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b90:	2360      	movs	r3, #96	; 0x60
 8001b92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001ba8:	f003 ff8a 	bl	8005ac0 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001bb2:	f000 f941 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM2_Init+0xe4>)
 8001bb8:	f000 fb90 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000414 	.word	0x20000414

08001bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <MX_TIM3_Init+0x98>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001bec:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001bfa:	2209      	movs	r2, #9
 8001bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0a:	4814      	ldr	r0, [pc, #80]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001c0c:	f003 fb06 	bl	800521c <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c16:	f000 f90f 	bl	8001e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001c28:	f004 f80c 	bl	8005c44 <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 f901 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_TIM3_Init+0x94>)
 8001c44:	f004 fc74 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c4e:	f000 f8f3 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200003cc 	.word	0x200003cc
 8001c60:	40000400 	.word	0x40000400

08001c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART1_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c9c:	f004 fcb8 	bl	8006610 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f000 f8c7 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002d8 	.word	0x200002d8
 8001cb4:	40013800 	.word	0x40013800

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART2_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f004 fc8e 	bl	8006610 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f89d 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000045c 	.word	0x2000045c
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_DMA_Init+0x38>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <MX_DMA_Init+0x38>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6153      	str	r3, [r2, #20]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_DMA_Init+0x38>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 fe25 	bl	800297e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d34:	200f      	movs	r0, #15
 8001d36:	f000 fe3e 	bl	80029b6 <HAL_NVIC_EnableIRQ>

}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <MX_GPIO_Init+0xcc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4815      	ldr	r0, [pc, #84]	; (8001e18 <MX_GPIO_Init+0xd0>)
 8001dc2:	f001 fa39 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_GPIO_Init+0xd4>)
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4811      	ldr	r0, [pc, #68]	; (8001e20 <MX_GPIO_Init+0xd8>)
 8001ddc:	f001 f8a8 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001de0:	2320      	movs	r3, #32
 8001de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <MX_GPIO_Init+0xd0>)
 8001df8:	f001 f89a 	bl	8002f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2028      	movs	r0, #40	; 0x28
 8001e02:	f000 fdbc 	bl	800297e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e06:	2028      	movs	r0, #40	; 0x28
 8001e08:	f000 fdd5 	bl	80029b6 <HAL_NVIC_EnableIRQ>

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	10110000 	.word	0x10110000
 8001e20:	40011000 	.word	0x40011000

08001e24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
//	if(htim->Instance == TIM3)
	SCH_Update();
 8001e2c:	f000 f87a 	bl	8001f24 <SCH_Update>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <SCH_Init>:
#include "sheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <SCH_Init+0x14>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000215 	.word	0x20000215

08001e5c <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	Delay /= 10;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <SCH_Add_Task+0xbc>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	60bb      	str	r3, [r7, #8]
	Period /= 10;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <SCH_Add_Task+0xbc>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	607b      	str	r3, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b27      	cmp	r3, #39	; 0x27
 8001e86:	d842      	bhi.n	8001f0e <SCH_Add_Task+0xb2>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <SCH_Add_Task+0xc4>)
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = Delay;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <SCH_Add_Task+0xc4>)
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = Period;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <SCH_Add_Task+0xc4>)
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3308      	adds	r3, #8
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <SCH_Add_Task+0xc4>)
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <SCH_Add_Task+0xc4>)
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3310      	adds	r3, #16
 8001f00:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SCH_Add_Task+0xc0>)
 8001f0c:	701a      	strb	r2, [r3, #0]
	}
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	20000215 	.word	0x20000215
 8001f20:	200004a4 	.word	0x200004a4

08001f24 <SCH_Update>:

void SCH_Update(void){
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	e048      	b.n	8001fc2 <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0){
 8001f30:	492a      	ldr	r1, [pc, #168]	; (8001fdc <SCH_Update+0xb8>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3304      	adds	r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d013      	beq.n	8001f6e <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8001f46:	4925      	ldr	r1, [pc, #148]	; (8001fdc <SCH_Update+0xb8>)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1e59      	subs	r1, r3, #1
 8001f5a:	4820      	ldr	r0, [pc, #128]	; (8001fdc <SCH_Update+0xb8>)
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4403      	add	r3, r0
 8001f68:	3304      	adds	r3, #4
 8001f6a:	6019      	str	r1, [r3, #0]
 8001f6c:	e026      	b.n	8001fbc <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001f6e:	491b      	ldr	r1, [pc, #108]	; (8001fdc <SCH_Update+0xb8>)
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	4816      	ldr	r0, [pc, #88]	; (8001fdc <SCH_Update+0xb8>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3304      	adds	r3, #4
 8001f90:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001f92:	4912      	ldr	r1, [pc, #72]	; (8001fdc <SCH_Update+0xb8>)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2d8      	uxtb	r0, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <SCH_Update+0xb8>)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	4602      	mov	r2, r0
 8001fba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <SCH_Update+0xbc>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	dbb0      	blt.n	8001f30 <SCH_Update+0xc>
		}
	}
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200004a4 	.word	0x200004a4
 8001fe0:	20000215 	.word	0x20000215

08001fe4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	e020      	b.n	8002032 <SCH_Dispatch_Tasks+0x4e>
		if(SCH_tasks_G[i].RunMe){
 8001ff0:	4915      	ldr	r1, [pc, #84]	; (8002048 <SCH_Dispatch_Tasks+0x64>)
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	330c      	adds	r3, #12
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <SCH_Dispatch_Tasks+0x48>
			SCH_tasks_G[i].RunMe = 0;
 8002006:	4910      	ldr	r1, [pc, #64]	; (8002048 <SCH_Dispatch_Tasks+0x64>)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	330c      	adds	r3, #12
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 800201a:	490b      	ldr	r1, [pc, #44]	; (8002048 <SCH_Dispatch_Tasks+0x64>)
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4798      	blx	r3
	for(int i = 0; i < current_index_task; i++){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <SCH_Dispatch_Tasks+0x68>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4293      	cmp	r3, r2
 800203c:	dbd8      	blt.n	8001ff0 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200004a4 	.word	0x200004a4
 800204c:	20000215 	.word	0x20000215

08002050 <SCH_Delete>:

void SCH_Delete(uint32_t ID) {
 8002050:	b4b0      	push	{r4, r5, r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    if (ID >= current_index_task) return;
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <SCH_Delete+0xac>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4293      	cmp	r3, r2
 8002062:	d245      	bcs.n	80020f0 <SCH_Delete+0xa0>

    // Reset the task at the given ID
    SCH_tasks_G[ID].Delay = 0;
 8002064:	4926      	ldr	r1, [pc, #152]	; (8002100 <SCH_Delete+0xb0>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3304      	adds	r3, #4
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[ID].Period = 0;
 8002078:	4921      	ldr	r1, [pc, #132]	; (8002100 <SCH_Delete+0xb0>)
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3308      	adds	r3, #8
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[ID].RunMe = 0;
 800208c:	491c      	ldr	r1, [pc, #112]	; (8002100 <SCH_Delete+0xb0>)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	330c      	adds	r3, #12
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]

    // Shift all tasks after the deleted task one position up
    for (int j = ID; j < current_index_task - 1; j++) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e017      	b.n	80020d6 <SCH_Delete+0x86>
        SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4815      	ldr	r0, [pc, #84]	; (8002100 <SCH_Delete+0xb0>)
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	460b      	mov	r3, r1
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4418      	add	r0, r3
 80020b8:	4911      	ldr	r1, [pc, #68]	; (8002100 <SCH_Delete+0xb0>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	4604      	mov	r4, r0
 80020c6:	461d      	mov	r5, r3
 80020c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	6023      	str	r3, [r4, #0]
    for (int j = ID; j < current_index_task - 1; j++) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <SCH_Delete+0xac>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbe1      	blt.n	80020a6 <SCH_Delete+0x56>
    }

    // Decrement the task count after shifting
    current_index_task--;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SCH_Delete+0xac>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SCH_Delete+0xac>)
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e000      	b.n	80020f2 <SCH_Delete+0xa2>
    if (ID >= current_index_task) return;
 80020f0:	bf00      	nop
}
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bcb0      	pop	{r4, r5, r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000215 	.word	0x20000215
 8002100:	200004a4 	.word	0x200004a4

08002104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_MspInit+0x5c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a14      	ldr	r2, [pc, #80]	; (8002160 <HAL_MspInit+0x5c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_MspInit+0x5c>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_MspInit+0x5c>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_MspInit+0x5c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_MspInit+0x5c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_MspInit+0x60>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_MspInit+0x60>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_I2C_MspInit+0x90>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d132      	bne.n	80021ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_I2C_MspInit+0x94>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_I2C_MspInit+0x94>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_I2C_MspInit+0x94>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a6:	2312      	movs	r3, #18
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <HAL_I2C_MspInit+0x98>)
 80021b6:	f000 febb 	bl	8002f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_I2C_MspInit+0x9c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_I2C_MspInit+0x9c>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	; 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40005400 	.word	0x40005400
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40010000 	.word	0x40010000

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d13b      	bne.n	8002292 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_TIM_Base_MspInit+0xcc>)
 8002236:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 800223a:	2210      	movs	r2, #16
 800223c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 800224c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002250:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002264:	481a      	ldr	r0, [pc, #104]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002266:	f000 fbc1 	bl	80029ec <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8002270:	f7ff fde2 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
 800227a:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <HAL_TIM_Base_MspInit+0xc8>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	201c      	movs	r0, #28
 8002286:	f000 fb7a 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800228a:	201c      	movs	r0, #28
 800228c:	f000 fb93 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002290:	e018      	b.n	80022c4 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_TIM_Base_MspInit+0xd0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d113      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	61d3      	str	r3, [r2, #28]
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_TIM_Base_MspInit+0xc4>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	201d      	movs	r0, #29
 80022ba:	f000 fb60 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022be:	201d      	movs	r0, #29
 80022c0:	f000 fb79 	bl	80029b6 <HAL_NVIC_EnableIRQ>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	20000334 	.word	0x20000334
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40000400 	.word	0x40000400

080022dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d117      	bne.n	800232c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_TIM_MspPostInit+0x58>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <HAL_TIM_MspPostInit+0x58>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_TIM_MspPostInit+0x58>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2302      	movs	r3, #2
 800231e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <HAL_TIM_MspPostInit+0x5c>)
 8002328:	f000 fe02 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	40010800 	.word	0x40010800

0800233c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a35      	ldr	r2, [pc, #212]	; (800242c <HAL_UART_MspInit+0xf0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d13a      	bne.n	80023d2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_UART_MspInit+0xf4>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a33      	ldr	r2, [pc, #204]	; (8002430 <HAL_UART_MspInit+0xf4>)
 8002362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_UART_MspInit+0xf4>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_UART_MspInit+0xf4>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_UART_MspInit+0xf4>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_UART_MspInit+0xf4>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800238c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4619      	mov	r1, r3
 80023a0:	4824      	ldr	r0, [pc, #144]	; (8002434 <HAL_UART_MspInit+0xf8>)
 80023a2:	f000 fdc5 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	4619      	mov	r1, r3
 80023ba:	481e      	ldr	r0, [pc, #120]	; (8002434 <HAL_UART_MspInit+0xf8>)
 80023bc:	f000 fdb8 	bl	8002f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f000 fada 	bl	800297e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ca:	2025      	movs	r0, #37	; 0x25
 80023cc:	f000 faf3 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023d0:	e028      	b.n	8002424 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_UART_MspInit+0xfc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d123      	bne.n	8002424 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_UART_MspInit+0xf4>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_UART_MspInit+0xf4>)
 80023e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_UART_MspInit+0xf4>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_UART_MspInit+0xf4>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <HAL_UART_MspInit+0xf4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_UART_MspInit+0xf4>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800240c:	230c      	movs	r3, #12
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2302      	movs	r3, #2
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0318 	add.w	r3, r7, #24
 800241c:	4619      	mov	r1, r3
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_UART_MspInit+0xf8>)
 8002420:	f000 fd86 	bl	8002f30 <HAL_GPIO_Init>
}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013800 	.word	0x40013800
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800
 8002438:	40004400 	.word	0x40004400

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 f965 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Channel5_IRQHandler+0x10>)
 8002492:	f000 fc19 	bl	8002cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000334 	.word	0x20000334

080024a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM2_IRQHandler+0x10>)
 80024a6:	f003 fa1b 	bl	80058e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000414 	.word	0x20000414

080024b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <TIM3_IRQHandler+0x10>)
 80024ba:	f003 fa11 	bl	80058e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200003cc 	.word	0x200003cc

080024c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART1_IRQHandler+0x10>)
 80024ce:	f004 f99f 	bl	8006810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200002d8 	.word	0x200002d8

080024dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024e4:	f000 feda 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_getpid>:
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	2301      	movs	r3, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <_kill>:
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
 8002504:	f004 feee 	bl	80072e4 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	2216      	movs	r2, #22
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_exit>:
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	f04f 31ff 	mov.w	r1, #4294967295
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffe7 	bl	80024fa <_kill>
 800252c:	e7fe      	b.n	800252c <_exit+0x12>

0800252e <_read>:
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e00a      	b.n	8002556 <_read+0x28>
 8002540:	f3af 8000 	nop.w
 8002544:	4601      	mov	r1, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	60ba      	str	r2, [r7, #8]
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf0      	blt.n	8002540 <_read+0x12>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_write>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e009      	b.n	800258e <_write+0x26>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	60ba      	str	r2, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f3af 8000 	nop.w
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbf1      	blt.n	800257a <_write+0x12>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_close>:
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <_fstat>:
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	2300      	movs	r3, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <_isatty>:
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	2301      	movs	r3, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <_lseek>:
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	2300      	movs	r3, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
 8002630:	f004 fe58 	bl	80072e4 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20005000 	.word	0x20005000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000218 	.word	0x20000218
 8002668:	200007d8 	.word	0x200007d8

0800266c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <Reset_Handler>:
 8002678:	f7ff fff8 	bl	800266c <SystemInit>
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <LoopFillZerobss+0xe>)
 800267e:	490c      	ldr	r1, [pc, #48]	; (80026b0 <LoopFillZerobss+0x12>)
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <LoopFillZerobss+0x16>)
 8002682:	2300      	movs	r3, #0
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:
 8002686:	58d4      	ldr	r4, [r2, r3]
 8002688:	50c4      	str	r4, [r0, r3]
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:
 800268c:	18c4      	adds	r4, r0, r3
 800268e:	428c      	cmp	r4, r1
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <LoopFillZerobss+0x1a>)
 8002694:	4c09      	ldr	r4, [pc, #36]	; (80026bc <LoopFillZerobss+0x1e>)
 8002696:	2300      	movs	r3, #0
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:
 800269e:	42a2      	cmp	r2, r4
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>
 80026a2:	f004 fe25 	bl	80072f0 <__libc_init_array>
 80026a6:	f7ff f957 	bl	8001958 <main>
 80026aa:	4770      	bx	lr
 80026ac:	20000000 	.word	0x20000000
 80026b0:	200001f0 	.word	0x200001f0
 80026b4:	0800b0a0 	.word	0x0800b0a0
 80026b8:	200001f0 	.word	0x200001f0
 80026bc:	200007d8 	.word	0x200007d8

080026c0 <ADC1_2_IRQHandler>:
 80026c0:	e7fe      	b.n	80026c0 <ADC1_2_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_Init+0x28>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_Init+0x28>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f000 f947 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 f808 	bl	80026f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e0:	f7ff fd10 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x54>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x58>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	fbb3 f3f1 	udiv	r3, r3, r1
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f95f 	bl	80029d2 <HAL_SYSTICK_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00e      	b.n	800273c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d80a      	bhi.n	800273a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f000 f927 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <HAL_InitTick+0x5c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000014 	.word	0x20000014
 8002748:	2000001c 	.word	0x2000001c
 800274c:	20000018 	.word	0x20000018

08002750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x1c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x20>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_IncTick+0x20>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	2000001c 	.word	0x2000001c
 8002770:	200007c4 	.word	0x200007c4

08002774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_GetTick+0x10>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	200007c4 	.word	0x200007c4

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fff0 	bl	8002774 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffe0 	bl	8002774 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000001c 	.word	0x2000001c

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4906      	ldr	r1, [pc, #24]	; (8002868 <__NVIC_EnableIRQ+0x34>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff90 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff2d 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff42 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff90 	bl	80028c0 <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5f 	bl	800286c <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff35 	bl	8002834 <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa2 	bl	8002924 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e043      	b.n	8002a8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_DMA_Init+0xa8>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_DMA_Init+0xac>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <HAL_DMA_Init+0xb0>)
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	bffdfff8 	.word	0xbffdfff8
 8002a98:	cccccccd 	.word	0xcccccccd
 8002a9c:	40020000 	.word	0x40020000

08002aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Start_IT+0x20>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e04b      	b.n	8002b58 <HAL_DMA_Start_IT+0xb8>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d13a      	bne.n	8002b4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f9eb 	bl	8002ed4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 020e 	orr.w	r2, r2, #14
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e00f      	b.n	8002b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 020a 	orr.w	r2, r2, #10
 8002b36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e005      	b.n	8002b56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e020      	b.n	8002bcc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 020e 	bic.w	r2, r2, #14
 8002b98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d005      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e051      	b.n	8002ca0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 020e 	bic.w	r2, r2, #14
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_DMA_Abort_IT+0xd4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d029      	beq.n	8002c7a <HAL_DMA_Abort_IT+0xa2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_DMA_Abort_IT+0xd8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x9e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_DMA_Abort_IT+0xdc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01a      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x98>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_DMA_Abort_IT+0xe0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d012      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x92>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_DMA_Abort_IT+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00a      	beq.n	8002c64 <HAL_DMA_Abort_IT+0x8c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_DMA_Abort_IT+0xe8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d102      	bne.n	8002c5e <HAL_DMA_Abort_IT+0x86>
 8002c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c5c:	e00e      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c62:	e00b      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c68:	e008      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6e:	e005      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c74:	e002      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c76:	2310      	movs	r3, #16
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_Abort_IT+0xa4>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_DMA_Abort_IT+0xec>)
 8002c7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
    } 
  }
  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40020008 	.word	0x40020008
 8002cb0:	4002001c 	.word	0x4002001c
 8002cb4:	40020030 	.word	0x40020030
 8002cb8:	40020044 	.word	0x40020044
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	4002006c 	.word	0x4002006c
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d04f      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xc8>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a66      	ldr	r2, [pc, #408]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d029      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xae>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_DMA_IRQHandler+0x1f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_IRQHandler+0xaa>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xa4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a62      	ldr	r2, [pc, #392]	; (8002ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x9e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a60      	ldr	r2, [pc, #384]	; (8002ec8 <HAL_DMA_IRQHandler+0x200>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x98>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5f      	ldr	r2, [pc, #380]	; (8002ecc <HAL_DMA_IRQHandler+0x204>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x92>
 8002d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d58:	e00e      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d5e:	e00b      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d64:	e008      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d6a:	e005      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d70:	e002      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d72:	2340      	movs	r3, #64	; 0x40
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_IRQHandler+0xb0>
 8002d76:	2304      	movs	r3, #4
 8002d78:	4a55      	ldr	r2, [pc, #340]	; (8002ed0 <HAL_DMA_IRQHandler+0x208>)
 8002d7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8094 	beq.w	8002eae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8e:	e08e      	b.n	8002eae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2202      	movs	r2, #2
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d056      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x186>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d051      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 020a 	bic.w	r2, r2, #10
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d029      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x166>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a37      	ldr	r2, [pc, #220]	; (8002ebc <HAL_DMA_IRQHandler+0x1f4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x162>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01a      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x15c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d012      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x156>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <HAL_DMA_IRQHandler+0x200>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00a      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x150>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <HAL_DMA_IRQHandler+0x204>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d102      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x14a>
 8002e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e10:	e00e      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e16:	e00b      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	e008      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e22:	e005      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e28:	e002      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e000      	b.n	8002e30 <HAL_DMA_IRQHandler+0x168>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <HAL_DMA_IRQHandler+0x208>)
 8002e32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d034      	beq.n	8002eae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e4c:	e02f      	b.n	8002eae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2208      	movs	r2, #8
 8002e54:	409a      	lsls	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d028      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x1e8>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d023      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
    }
  }
  return;
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
}
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40020008 	.word	0x40020008
 8002ebc:	4002001c 	.word	0x4002001c
 8002ec0:	40020030 	.word	0x40020030
 8002ec4:	40020044 	.word	0x40020044
 8002ec8:	40020058 	.word	0x40020058
 8002ecc:	4002006c 	.word	0x4002006c
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d108      	bne.n	8002f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f12:	e007      	b.n	8002f24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b08b      	sub	sp, #44	; 0x2c
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	e169      	b.n	8003218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f44:	2201      	movs	r2, #1
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8158 	bne.w	8003212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a9a      	ldr	r2, [pc, #616]	; (80031d0 <HAL_GPIO_Init+0x2a0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d05e      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f6c:	4a98      	ldr	r2, [pc, #608]	; (80031d0 <HAL_GPIO_Init+0x2a0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d875      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f72:	4a98      	ldr	r2, [pc, #608]	; (80031d4 <HAL_GPIO_Init+0x2a4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d058      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f78:	4a96      	ldr	r2, [pc, #600]	; (80031d4 <HAL_GPIO_Init+0x2a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d86f      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f7e:	4a96      	ldr	r2, [pc, #600]	; (80031d8 <HAL_GPIO_Init+0x2a8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d052      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f84:	4a94      	ldr	r2, [pc, #592]	; (80031d8 <HAL_GPIO_Init+0x2a8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d869      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f8a:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_GPIO_Init+0x2ac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d04c      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f90:	4a92      	ldr	r2, [pc, #584]	; (80031dc <HAL_GPIO_Init+0x2ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d863      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f96:	4a92      	ldr	r2, [pc, #584]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d046      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f9c:	4a90      	ldr	r2, [pc, #576]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d85d      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002fa2:	2b12      	cmp	r3, #18
 8002fa4:	d82a      	bhi.n	8002ffc <HAL_GPIO_Init+0xcc>
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d859      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_GPIO_Init+0x80>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	0800302b 	.word	0x0800302b
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003017 	.word	0x08003017
 8002fbc:	08003059 	.word	0x08003059
 8002fc0:	0800305f 	.word	0x0800305f
 8002fc4:	0800305f 	.word	0x0800305f
 8002fc8:	0800305f 	.word	0x0800305f
 8002fcc:	0800305f 	.word	0x0800305f
 8002fd0:	0800305f 	.word	0x0800305f
 8002fd4:	0800305f 	.word	0x0800305f
 8002fd8:	0800305f 	.word	0x0800305f
 8002fdc:	0800305f 	.word	0x0800305f
 8002fe0:	0800305f 	.word	0x0800305f
 8002fe4:	0800305f 	.word	0x0800305f
 8002fe8:	0800305f 	.word	0x0800305f
 8002fec:	0800305f 	.word	0x0800305f
 8002ff0:	0800305f 	.word	0x0800305f
 8002ff4:	0800300d 	.word	0x0800300d
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	4a79      	ldr	r2, [pc, #484]	; (80031e4 <HAL_GPIO_Init+0x2b4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003002:	e02c      	b.n	800305e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	623b      	str	r3, [r7, #32]
          break;
 800300a:	e029      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	3304      	adds	r3, #4
 8003012:	623b      	str	r3, [r7, #32]
          break;
 8003014:	e024      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	3308      	adds	r3, #8
 800301c:	623b      	str	r3, [r7, #32]
          break;
 800301e:	e01f      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	330c      	adds	r3, #12
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	e01a      	b.n	8003060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003032:	2304      	movs	r3, #4
 8003034:	623b      	str	r3, [r7, #32]
          break;
 8003036:	e013      	b.n	8003060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003040:	2308      	movs	r3, #8
 8003042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	611a      	str	r2, [r3, #16]
          break;
 800304a:	e009      	b.n	8003060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800304c:	2308      	movs	r3, #8
 800304e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	615a      	str	r2, [r3, #20]
          break;
 8003056:	e003      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e000      	b.n	8003060 <HAL_GPIO_Init+0x130>
          break;
 800305e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d801      	bhi.n	800306a <HAL_GPIO_Init+0x13a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	e001      	b.n	800306e <HAL_GPIO_Init+0x13e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	d802      	bhi.n	800307c <HAL_GPIO_Init+0x14c>
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x152>
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	3b08      	subs	r3, #8
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	210f      	movs	r1, #15
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	431a      	orrs	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80b1 	beq.w	8003212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2bc>)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <HAL_GPIO_Init+0x2c0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_GPIO_Init+0x1ec>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <HAL_GPIO_Init+0x2c4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00d      	beq.n	8003118 <HAL_GPIO_Init+0x1e8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3e      	ldr	r2, [pc, #248]	; (80031f8 <HAL_GPIO_Init+0x2c8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <HAL_GPIO_Init+0x1e4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <HAL_GPIO_Init+0x2cc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_GPIO_Init+0x1e0>
 800310c:	2303      	movs	r3, #3
 800310e:	e006      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003110:	2304      	movs	r3, #4
 8003112:	e004      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003114:	2302      	movs	r3, #2
 8003116:	e002      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 800311c:	2300      	movs	r3, #0
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	f002 0203 	and.w	r2, r2, #3
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	4093      	lsls	r3, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800312e:	492f      	ldr	r1, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x2bc>)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	492c      	ldr	r1, [pc, #176]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	43db      	mvns	r3, r3
 800315e:	4928      	ldr	r1, [pc, #160]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003160:	4013      	ands	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	491e      	ldr	r1, [pc, #120]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4918      	ldr	r1, [pc, #96]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4914      	ldr	r1, [pc, #80]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d021      	beq.n	8003204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e021      	b.n	8003212 <HAL_GPIO_Init+0x2e2>
 80031ce:	bf00      	nop
 80031d0:	10320000 	.word	0x10320000
 80031d4:	10310000 	.word	0x10310000
 80031d8:	10220000 	.word	0x10220000
 80031dc:	10210000 	.word	0x10210000
 80031e0:	10120000 	.word	0x10120000
 80031e4:	10110000 	.word	0x10110000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010800 	.word	0x40010800
 80031f4:	40010c00 	.word	0x40010c00
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40011400 	.word	0x40011400
 8003200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_GPIO_Init+0x304>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	43db      	mvns	r3, r3
 800320c:	4909      	ldr	r1, [pc, #36]	; (8003234 <HAL_GPIO_Init+0x304>)
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	3301      	adds	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	f47f ae8e 	bne.w	8002f44 <HAL_GPIO_Init+0x14>
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	372c      	adds	r7, #44	; 0x2c
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43d9      	mvns	r1, r3
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	400b      	ands	r3, r1
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
	...

0800329c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f806 	bl	80032cc <HAL_GPIO_EXTI_Callback>
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e12b      	b.n	800354a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe ff2e 	bl	8002168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	; 0x24
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003344:	f001 ff24 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a81      	ldr	r2, [pc, #516]	; (8003554 <HAL_I2C_Init+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d807      	bhi.n	8003364 <HAL_I2C_Init+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a80      	ldr	r2, [pc, #512]	; (8003558 <HAL_I2C_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e006      	b.n	8003372 <HAL_I2C_Init+0x92>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a7d      	ldr	r2, [pc, #500]	; (800355c <HAL_I2C_Init+0x27c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0e7      	b.n	800354a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a78      	ldr	r2, [pc, #480]	; (8003560 <HAL_I2C_Init+0x280>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0c9b      	lsrs	r3, r3, #18
 8003384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	; (8003554 <HAL_I2C_Init+0x274>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d802      	bhi.n	80033b4 <HAL_I2C_Init+0xd4>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e009      	b.n	80033c8 <HAL_I2C_Init+0xe8>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a69      	ldr	r2, [pc, #420]	; (8003564 <HAL_I2C_Init+0x284>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	495c      	ldr	r1, [pc, #368]	; (8003554 <HAL_I2C_Init+0x274>)
 80033e4:	428b      	cmp	r3, r1
 80033e6:	d819      	bhi.n	800341c <HAL_I2C_Init+0x13c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e59      	subs	r1, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033fc:	400b      	ands	r3, r1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_I2C_Init+0x138>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e59      	subs	r1, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	e051      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003418:	2304      	movs	r3, #4
 800341a:	e04f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_I2C_Init+0x168>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_I2C_Init+0x18e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x196>
 8003472:	2301      	movs	r3, #1
 8003474:	e022      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_I2C_Init+0x1bc>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e58      	subs	r0, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	440b      	add	r3, r1
 800348c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6809      	ldr	r1, [r1, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6911      	ldr	r1, [r2, #16]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	000186a0 	.word	0x000186a0
 8003558:	001e847f 	.word	0x001e847f
 800355c:	003d08ff 	.word	0x003d08ff
 8003560:	431bde83 	.word	0x431bde83
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	460b      	mov	r3, r1
 8003576:	817b      	strh	r3, [r7, #10]
 8003578:	4613      	mov	r3, r2
 800357a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7ff f8fa 	bl	8002774 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	f040 80e0 	bne.w	8003750 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	4970      	ldr	r1, [pc, #448]	; (800375c <HAL_I2C_Master_Transmit+0x1f4>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fffa 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	e0d3      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_I2C_Master_Transmit+0x50>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0cc      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d007      	beq.n	80035de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2210      	movs	r2, #16
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	893a      	ldrh	r2, [r7, #8]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a50      	ldr	r2, [pc, #320]	; (8003760 <HAL_I2C_Master_Transmit+0x1f8>)
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003620:	8979      	ldrh	r1, [r7, #10]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fd7c 	bl	8004124 <I2C_MasterRequestWrite>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08d      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800364c:	e066      	b.n	800371c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f001 f8b8 	bl	80047c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b04      	cmp	r3, #4
 8003664:	d107      	bne.n	8003676 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06b      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11b      	bne.n	80036f0 <HAL_I2C_Master_Transmit+0x188>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6a39      	ldr	r1, [r7, #32]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f001 f8af 	bl	8004858 <I2C_WaitOnBTFFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e01a      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d194      	bne.n	800364e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	00100002 	.word	0x00100002
 8003760:	ffff0000 	.word	0xffff0000

08003764 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	817b      	strh	r3, [r7, #10]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7fe fffa 	bl	8002774 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	f040 824b 	bne.w	8003c26 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2319      	movs	r3, #25
 8003796:	2201      	movs	r2, #1
 8003798:	497f      	ldr	r1, [pc, #508]	; (8003998 <HAL_I2C_Master_Receive+0x234>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fefa 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	e23e      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2C_Master_Receive+0x54>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e237      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d007      	beq.n	80037de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2222      	movs	r2, #34	; 0x22
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2210      	movs	r2, #16
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	893a      	ldrh	r2, [r7, #8]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a5f      	ldr	r2, [pc, #380]	; (800399c <HAL_I2C_Master_Receive+0x238>)
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003820:	8979      	ldrh	r1, [r7, #10]
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fcfe 	bl	8004228 <I2C_MasterRequestRead>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1f8      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d113      	bne.n	8003866 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e1cc      	b.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11e      	bne.n	80038ac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800387e:	b672      	cpsid	i
}
 8003880:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038a8:	b662      	cpsie	i
}
 80038aa:	e035      	b.n	8003918 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d11e      	bne.n	80038f2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
}
 80038c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038ee:	b662      	cpsie	i
}
 80038f0:	e012      	b.n	8003918 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003918:	e172      	b.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	2b03      	cmp	r3, #3
 8003920:	f200 811f 	bhi.w	8003b62 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b01      	cmp	r3, #1
 800392a:	d123      	bne.n	8003974 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 ffd9 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e173      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003972:	e145      	b.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	2b02      	cmp	r3, #2
 800397a:	d152      	bne.n	8003a22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	2200      	movs	r2, #0
 8003984:	4906      	ldr	r1, [pc, #24]	; (80039a0 <HAL_I2C_Master_Receive+0x23c>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fe04 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e148      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
 8003996:	bf00      	nop
 8003998:	00100002 	.word	0x00100002
 800399c:	ffff0000 	.word	0xffff0000
 80039a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039a4:	b672      	cpsid	i
}
 80039a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ea:	b662      	cpsie	i
}
 80039ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a20:	e0ee      	b.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2200      	movs	r2, #0
 8003a2a:	4981      	ldr	r1, [pc, #516]	; (8003c30 <HAL_I2C_Master_Receive+0x4cc>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fdb1 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0f5      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4c:	b672      	cpsid	i
}
 8003a4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_I2C_Master_Receive+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	4a6b      	ldr	r2, [pc, #428]	; (8003c38 <HAL_I2C_Master_Receive+0x4d4>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a1a      	lsrs	r2, r3, #8
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d118      	bne.n	8003ada <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003aca:	b662      	cpsie	i
}
 8003acc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0a6      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d1d9      	bne.n	8003a9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b2a:	b662      	cpsie	i
}
 8003b2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b60:	e04e      	b.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 febe 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e058      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d124      	bne.n	8003c00 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d107      	bne.n	8003bce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bcc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f47f ae88 	bne.w	800391a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3728      	adds	r7, #40	; 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	00010004 	.word	0x00010004
 8003c34:	20000014 	.word	0x20000014
 8003c38:	14f8b589 	.word	0x14f8b589

08003c3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	; 0x30
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	817b      	strh	r3, [r7, #10]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	813b      	strh	r3, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c5a:	f7fe fd8b 	bl	8002774 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	f040 8250 	bne.w	800410e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2319      	movs	r3, #25
 8003c74:	2201      	movs	r2, #1
 8003c76:	4982      	ldr	r1, [pc, #520]	; (8003e80 <HAL_I2C_Mem_Read+0x244>)
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fc8b 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
 8003c86:	e243      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x5a>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e23c      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d007      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2222      	movs	r2, #34	; 0x22
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a62      	ldr	r2, [pc, #392]	; (8003e84 <HAL_I2C_Mem_Read+0x248>)
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cfe:	88f8      	ldrh	r0, [r7, #6]
 8003d00:	893a      	ldrh	r2, [r7, #8]
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fb58 	bl	80043c4 <I2C_RequestMemoryRead>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1f8      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e1cc      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d11e      	bne.n	8003d94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d66:	b672      	cpsid	i
}
 8003d68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d90:	b662      	cpsie	i
}
 8003d92:	e035      	b.n	8003e00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11e      	bne.n	8003dda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003daa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dac:	b672      	cpsid	i
}
 8003dae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd6:	b662      	cpsie	i
}
 8003dd8:	e012      	b.n	8003e00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e00:	e172      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	f200 811f 	bhi.w	800404a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d123      	bne.n	8003e5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fd65 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e173      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5a:	e145      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d152      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4906      	ldr	r1, [pc, #24]	; (8003e88 <HAL_I2C_Mem_Read+0x24c>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb90 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e148      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
 8003e7e:	bf00      	nop
 8003e80:	00100002 	.word	0x00100002
 8003e84:	ffff0000 	.word	0xffff0000
 8003e88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e8c:	b672      	cpsid	i
}
 8003e8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ed2:	b662      	cpsie	i
}
 8003ed4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f08:	e0ee      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2200      	movs	r2, #0
 8003f12:	4981      	ldr	r1, [pc, #516]	; (8004118 <HAL_I2C_Mem_Read+0x4dc>)
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fb3d 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0f5      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f34:	b672      	cpsid	i
}
 8003f36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f6a:	4b6c      	ldr	r3, [pc, #432]	; (800411c <HAL_I2C_Mem_Read+0x4e0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	08db      	lsrs	r3, r3, #3
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_I2C_Mem_Read+0x4e4>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0a1a      	lsrs	r2, r3, #8
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00da      	lsls	r2, r3, #3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d118      	bne.n	8003fc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fb2:	b662      	cpsie	i
}
 8003fb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0a6      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d1d9      	bne.n	8003f84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004012:	b662      	cpsie	i
}
 8004014:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004048:	e04e      	b.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fc4a 	bl	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e058      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d124      	bne.n	80040e8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d107      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f ae88 	bne.w	8003e02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	; 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	00010004 	.word	0x00010004
 800411c:	20000014 	.word	0x20000014
 8004120:	14f8b589 	.word	0x14f8b589

08004124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	460b      	mov	r3, r1
 8004132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d006      	beq.n	800414e <I2C_MasterRequestWrite+0x2a>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d003      	beq.n	800414e <I2C_MasterRequestWrite+0x2a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414c:	d108      	bne.n	8004160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00b      	b.n	8004178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	2b12      	cmp	r3, #18
 8004166:	d107      	bne.n	8004178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fa05 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d103      	bne.n	80041a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e035      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	e01b      	b.n	8004200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	11db      	asrs	r3, r3, #7
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0306 	and.w	r3, r3, #6
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f063 030f 	orn	r3, r3, #15
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <I2C_MasterRequestWrite+0xfc>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fa4e 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e010      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <I2C_MasterRequestWrite+0x100>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fa3e 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00010008 	.word	0x00010008
 8004224:	00010002 	.word	0x00010002

08004228 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	460b      	mov	r3, r1
 8004236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d006      	beq.n	8004262 <I2C_MasterRequestRead+0x3a>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d003      	beq.n	8004262 <I2C_MasterRequestRead+0x3a>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004260:	d108      	bne.n	8004274 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e00b      	b.n	800428c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	2b11      	cmp	r3, #17
 800427a:	d107      	bne.n	800428c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f97b 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d103      	bne.n	80042bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e079      	b.n	80043b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c8:	d108      	bne.n	80042dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042ca:	897b      	ldrh	r3, [r7, #10]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e05f      	b.n	800439c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042dc:	897b      	ldrh	r3, [r7, #10]
 80042de:	11db      	asrs	r3, r3, #7
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0306 	and.w	r3, r3, #6
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f063 030f 	orn	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4930      	ldr	r1, [pc, #192]	; (80043bc <I2C_MasterRequestRead+0x194>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f9c4 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e054      	b.n	80043b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4929      	ldr	r1, [pc, #164]	; (80043c0 <I2C_MasterRequestRead+0x198>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f9b4 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e044      	b.n	80043b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f919 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004376:	d103      	bne.n	8004380 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e017      	b.n	80043b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004384:	897b      	ldrh	r3, [r7, #10]
 8004386:	11db      	asrs	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f063 030e 	orn	r3, r3, #14
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4907      	ldr	r1, [pc, #28]	; (80043c0 <I2C_MasterRequestRead+0x198>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f970 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	00010008 	.word	0x00010008
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2200      	movs	r2, #0
 8004406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f8c2 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004424:	d103      	bne.n	800442e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0aa      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	4952      	ldr	r1, [pc, #328]	; (8004590 <I2C_RequestMemoryRead+0x1cc>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f91d 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e097      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f9a8 	bl	80047c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b04      	cmp	r3, #4
 8004484:	d107      	bne.n	8004496 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e076      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a0:	893b      	ldrh	r3, [r7, #8]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]
 80044aa:	e021      	b.n	80044f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044ac:	893b      	ldrh	r3, [r7, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f982 	bl	80047c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e050      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6a39      	ldr	r1, [r7, #32]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f967 	bl	80047c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b04      	cmp	r3, #4
 8004506:	d107      	bne.n	8004518 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e035      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2200      	movs	r2, #0
 8004534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f82b 	bl	8004594 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004552:	d103      	bne.n	800455c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e013      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004560:	897b      	ldrh	r3, [r7, #10]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	4906      	ldr	r1, [pc, #24]	; (8004590 <I2C_RequestMemoryRead+0x1cc>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f886 	bl	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a4:	e048      	b.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d044      	beq.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe f8e1 	bl	8002774 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d139      	bne.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10d      	bne.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	43da      	mvns	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	e00c      	b.n	8004604 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	43da      	mvns	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e023      	b.n	8004680 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10d      	bne.n	800465e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	43da      	mvns	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4013      	ands	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	e00c      	b.n	8004678 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	43da      	mvns	r2, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4013      	ands	r3, r2
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	429a      	cmp	r2, r3
 800467c:	d093      	beq.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004696:	e071      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d123      	bne.n	80046f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e067      	b.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d041      	beq.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f8:	f7fe f83c 	bl	8002774 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d136      	bne.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e00b      	b.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	43da      	mvns	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e021      	b.n	80047c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10c      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e00b      	b.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f af6d 	bne.w	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d4:	e034      	b.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8e3 	bl	80049a2 <I2C_IsAcknowledgeFailed>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e034      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d028      	beq.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fd ffc1 	bl	8002774 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480e:	2b80      	cmp	r3, #128	; 0x80
 8004810:	d016      	beq.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e007      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d1c3      	bne.n	80047d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004864:	e034      	b.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f89b 	bl	80049a2 <I2C_IsAcknowledgeFailed>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d028      	beq.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd ff79 	bl	8002774 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11d      	bne.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d016      	beq.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e007      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d1c3      	bne.n	8004866 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f4:	e049      	b.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b10      	cmp	r3, #16
 8004902:	d119      	bne.n	8004938 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0210 	mvn.w	r2, #16
 800490c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e030      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fd ff1c 	bl	8002774 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d016      	beq.n	800498a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d1ae      	bne.n	80048f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d11b      	bne.n	80049f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e26c      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8087 	beq.w	8004b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a20:	4b92      	ldr	r3, [pc, #584]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00c      	beq.n	8004a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a2c:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d112      	bne.n	8004a5e <HAL_RCC_OscConfig+0x5e>
 8004a38:	4b8c      	ldr	r3, [pc, #560]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d10b      	bne.n	8004a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a46:	4b89      	ldr	r3, [pc, #548]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d06c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x12c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e246      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x76>
 8004a68:	4b80      	ldr	r3, [pc, #512]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a7f      	ldr	r2, [pc, #508]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02e      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b7b      	ldr	r3, [pc, #492]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7a      	ldr	r2, [pc, #488]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b78      	ldr	r3, [pc, #480]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a77      	ldr	r2, [pc, #476]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0xbc>
 8004aa2:	4b72      	ldr	r3, [pc, #456]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a71      	ldr	r2, [pc, #452]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b6f      	ldr	r3, [pc, #444]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a6e      	ldr	r2, [pc, #440]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004abc:	4b6b      	ldr	r3, [pc, #428]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a6a      	ldr	r2, [pc, #424]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b68      	ldr	r3, [pc, #416]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a67      	ldr	r2, [pc, #412]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd fe4a 	bl	8002774 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fd fe46 	bl	8002774 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1fa      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	4b5d      	ldr	r3, [pc, #372]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe4>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fe36 	bl	8002774 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fe32 	bl	8002774 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1e6      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	4b53      	ldr	r3, [pc, #332]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x10c>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d063      	beq.n	8004c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b46:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x18c>
 8004b52:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCC_OscConfig+0x176>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e1ba      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4939      	ldr	r1, [pc, #228]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	e03a      	b.n	8004c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <HAL_RCC_OscConfig+0x270>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fdeb 	bl	8002774 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fd fde7 	bl	8002774 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e19b      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4927      	ldr	r1, [pc, #156]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e015      	b.n	8004c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fdca 	bl	8002774 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fd fdc6 	bl	8002774 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e17a      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d03a      	beq.n	8004c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d019      	beq.n	8004c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1c:	f7fd fdaa 	bl	8002774 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fd fda6 	bl	8002774 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e15a      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_RCC_OscConfig+0x26c>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f000 facc 	bl	80051e0 <RCC_Delay>
 8004c48:	e01c      	b.n	8004c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c50:	f7fd fd90 	bl	8002774 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c56:	e00f      	b.n	8004c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c58:	f7fd fd8c 	bl	8002774 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d908      	bls.n	8004c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e140      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	42420000 	.word	0x42420000
 8004c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c78:	4b9e      	ldr	r3, [pc, #632]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e9      	bne.n	8004c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a6 	beq.w	8004dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c96:	4b97      	ldr	r3, [pc, #604]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	4b94      	ldr	r3, [pc, #592]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4a93      	ldr	r2, [pc, #588]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	61d3      	str	r3, [r2, #28]
 8004cae:	4b91      	ldr	r3, [pc, #580]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	; (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d118      	bne.n	8004cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cca:	4b8b      	ldr	r3, [pc, #556]	; (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a8a      	ldr	r2, [pc, #552]	; (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd fd4d 	bl	8002774 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fd fd49 	bl	8002774 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b64      	cmp	r3, #100	; 0x64
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0fd      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	4b81      	ldr	r3, [pc, #516]	; (8004ef8 <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x312>
 8004d04:	4b7b      	ldr	r3, [pc, #492]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	e02d      	b.n	8004d6e <HAL_RCC_OscConfig+0x36e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x334>
 8004d1a:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	4a75      	ldr	r2, [pc, #468]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6213      	str	r3, [r2, #32]
 8004d26:	4b73      	ldr	r3, [pc, #460]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a72      	ldr	r2, [pc, #456]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	6213      	str	r3, [r2, #32]
 8004d32:	e01c      	b.n	8004d6e <HAL_RCC_OscConfig+0x36e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d10c      	bne.n	8004d56 <HAL_RCC_OscConfig+0x356>
 8004d3c:	4b6d      	ldr	r3, [pc, #436]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	4a6c      	ldr	r2, [pc, #432]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d42:	f043 0304 	orr.w	r3, r3, #4
 8004d46:	6213      	str	r3, [r2, #32]
 8004d48:	4b6a      	ldr	r3, [pc, #424]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a69      	ldr	r2, [pc, #420]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6213      	str	r3, [r2, #32]
 8004d54:	e00b      	b.n	8004d6e <HAL_RCC_OscConfig+0x36e>
 8004d56:	4b67      	ldr	r3, [pc, #412]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	4a66      	ldr	r2, [pc, #408]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	6213      	str	r3, [r2, #32]
 8004d62:	4b64      	ldr	r3, [pc, #400]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4a63      	ldr	r2, [pc, #396]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d015      	beq.n	8004da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fd fcfd 	bl	8002774 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fd fcf9 	bl	8002774 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0ab      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ee      	beq.n	8004d7e <HAL_RCC_OscConfig+0x37e>
 8004da0:	e014      	b.n	8004dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7fd fce7 	bl	8002774 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004daa:	f7fd fce3 	bl	8002774 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e095      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ee      	bne.n	8004daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4b48      	ldr	r3, [pc, #288]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4a47      	ldr	r2, [pc, #284]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8081 	beq.w	8004eea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d061      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d146      	bne.n	8004e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_OscConfig+0x4fc>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fd fcb7 	bl	8002774 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fd fcb3 	bl	8002774 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e067      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e1c:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d108      	bne.n	8004e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	492d      	ldr	r1, [pc, #180]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e44:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a19      	ldr	r1, [r3, #32]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	430b      	orrs	r3, r1
 8004e56:	4927      	ldr	r1, [pc, #156]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5c:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_RCC_OscConfig+0x4fc>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fd fc87 	bl	8002774 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd fc83 	bl	8002774 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e037      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x46a>
 8004e88:	e02f      	b.n	8004eea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_RCC_OscConfig+0x4fc>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fd fc70 	bl	8002774 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fc6c 	bl	8002774 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e020      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x498>
 8004eb6:	e018      	b.n	8004eea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e013      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_OscConfig+0x4f4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	42420060 	.word	0x42420060

08004f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0d0      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d910      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 0207 	bic.w	r2, r3, #7
 8004f2a:	4965      	ldr	r1, [pc, #404]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b63      	ldr	r3, [pc, #396]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0b8      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a58      	ldr	r2, [pc, #352]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f74:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a52      	ldr	r2, [pc, #328]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b50      	ldr	r3, [pc, #320]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	494d      	ldr	r1, [pc, #308]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d040      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d115      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e073      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06b      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4936      	ldr	r1, [pc, #216]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd fbc0 	bl	8002774 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd fbbc 	bl	8002774 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e053      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d210      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4922      	ldr	r1, [pc, #136]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e032      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800505c:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4916      	ldr	r1, [pc, #88]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	490e      	ldr	r1, [pc, #56]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800508e:	f000 f821 	bl	80050d4 <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	490a      	ldr	r1, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1cc>)
 80050a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCC_ClockConfig+0x1d0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fd fb1e 	bl	80026f0 <HAL_InitTick>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40022000 	.word	0x40022000
 80050c4:	40021000 	.word	0x40021000
 80050c8:	0800ac70 	.word	0x0800ac70
 80050cc:	20000014 	.word	0x20000014
 80050d0:	20000018 	.word	0x20000018

080050d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCC_GetSysClockFreq+0x94>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x30>
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x36>
 8005102:	e027      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005106:	613b      	str	r3, [r7, #16]
      break;
 8005108:	e027      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	0c9b      	lsrs	r3, r3, #18
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005114:	5cd3      	ldrb	r3, [r2, r3]
 8005116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_GetSysClockFreq+0x94>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	0c5b      	lsrs	r3, r3, #17
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	4a11      	ldr	r2, [pc, #68]	; (8005174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005136:	fb02 f203 	mul.w	r2, r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e004      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	613b      	str	r3, [r7, #16]
      break;
 8005152:	e002      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_RCC_GetSysClockFreq+0x98>)
 8005156:	613b      	str	r3, [r7, #16]
      break;
 8005158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800515a:	693b      	ldr	r3, [r7, #16]
}
 800515c:	4618      	mov	r0, r3
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	007a1200 	.word	0x007a1200
 8005170:	0800ac88 	.word	0x0800ac88
 8005174:	0800ac98 	.word	0x0800ac98
 8005178:	003d0900 	.word	0x003d0900

0800517c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b02      	ldr	r3, [pc, #8]	; (800518c <HAL_RCC_GetHCLKFreq+0x10>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	20000014 	.word	0x20000014

08005190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005194:	f7ff fff2 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40021000 	.word	0x40021000
 80051b4:	0800ac80 	.word	0x0800ac80

080051b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051bc:	f7ff ffde 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0adb      	lsrs	r3, r3, #11
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4903      	ldr	r1, [pc, #12]	; (80051dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800ac80 	.word	0x0800ac80

080051e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCC_Delay+0x34>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <RCC_Delay+0x38>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051fc:	bf00      	nop
  }
  while (Delay --);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	60fa      	str	r2, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f9      	bne.n	80051fc <RCC_Delay+0x1c>
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	20000014 	.word	0x20000014
 8005218:	10624dd3 	.word	0x10624dd3

0800521c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e041      	b.n	80052b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc ffe0 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f000 feb8 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e03a      	b.n	800534a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIM_Base_Start_IT+0x98>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00e      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d009      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <HAL_TIM_Base_Start_IT+0x9c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <HAL_TIM_Base_Start_IT+0xa0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d111      	bne.n	8005338 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b06      	cmp	r3, #6
 8005324:	d010      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005336:	e007      	b.n	8005348 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800

08005360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f839 	bl	80053fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 fe16 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e022      	b.n	8005482 <HAL_TIM_PWM_Start_DMA+0x72>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d109      	bne.n	8005456 <HAL_TIM_PWM_Start_DMA+0x46>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e015      	b.n	8005482 <HAL_TIM_PWM_Start_DMA+0x72>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start_DMA+0x60>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e008      	b.n	8005482 <HAL_TIM_PWM_Start_DMA+0x72>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	e153      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e022      	b.n	80054ea <HAL_TIM_PWM_Start_DMA+0xda>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d109      	bne.n	80054be <HAL_TIM_PWM_Start_DMA+0xae>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e015      	b.n	80054ea <HAL_TIM_PWM_Start_DMA+0xda>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d109      	bne.n	80054d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	e008      	b.n	80054ea <HAL_TIM_PWM_Start_DMA+0xda>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d024      	beq.n	8005538 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_TIM_PWM_Start_DMA+0xea>
 80054f4:	887b      	ldrh	r3, [r7, #2]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e119      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800550c:	e016      	b.n	800553c <HAL_TIM_PWM_Start_DMA+0x12c>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b04      	cmp	r3, #4
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551c:	e00e      	b.n	800553c <HAL_TIM_PWM_Start_DMA+0x12c>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800552c:	e006      	b.n	800553c <HAL_TIM_PWM_Start_DMA+0x12c>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005536:	e001      	b.n	800553c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0fa      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	f200 80ae 	bhi.w	80056a0 <HAL_TIM_PWM_Start_DMA+0x290>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005581 	.word	0x08005581
 8005550:	080056a1 	.word	0x080056a1
 8005554:	080056a1 	.word	0x080056a1
 8005558:	080056a1 	.word	0x080056a1
 800555c:	080055c9 	.word	0x080055c9
 8005560:	080056a1 	.word	0x080056a1
 8005564:	080056a1 	.word	0x080056a1
 8005568:	080056a1 	.word	0x080056a1
 800556c:	08005611 	.word	0x08005611
 8005570:	080056a1 	.word	0x080056a1
 8005574:	080056a1 	.word	0x080056a1
 8005578:	080056a1 	.word	0x080056a1
 800557c:	08005659 	.word	0x08005659
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	4a6d      	ldr	r2, [pc, #436]	; (800573c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	4a6c      	ldr	r2, [pc, #432]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x330>)
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	4a6b      	ldr	r2, [pc, #428]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005596:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3334      	adds	r3, #52	; 0x34
 80055a4:	461a      	mov	r2, r3
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	f7fd fa7a 	bl	8002aa0 <HAL_DMA_Start_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0bd      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055c4:	60da      	str	r2, [r3, #12]
      break;
 80055c6:	e06e      	b.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	4a5b      	ldr	r2, [pc, #364]	; (800573c <HAL_TIM_PWM_Start_DMA+0x32c>)
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	4a5a      	ldr	r2, [pc, #360]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x330>)
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	4a59      	ldr	r2, [pc, #356]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x334>)
 80055de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3338      	adds	r3, #56	; 0x38
 80055ec:	461a      	mov	r2, r3
 80055ee:	887b      	ldrh	r3, [r7, #2]
 80055f0:	f7fd fa56 	bl	8002aa0 <HAL_DMA_Start_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e099      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800560c:	60da      	str	r2, [r3, #12]
      break;
 800560e:	e04a      	b.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a49      	ldr	r2, [pc, #292]	; (800573c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005616:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a48      	ldr	r2, [pc, #288]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x330>)
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a47      	ldr	r2, [pc, #284]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x334>)
 8005626:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	333c      	adds	r3, #60	; 0x3c
 8005634:	461a      	mov	r2, r3
 8005636:	887b      	ldrh	r3, [r7, #2]
 8005638:	f7fd fa32 	bl	8002aa0 <HAL_DMA_Start_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e075      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005654:	60da      	str	r2, [r3, #12]
      break;
 8005656:	e026      	b.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a37      	ldr	r2, [pc, #220]	; (800573c <HAL_TIM_PWM_Start_DMA+0x32c>)
 800565e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	4a36      	ldr	r2, [pc, #216]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	4a35      	ldr	r2, [pc, #212]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x334>)
 800566e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3340      	adds	r3, #64	; 0x40
 800567c:	461a      	mov	r2, r3
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	f7fd fa0e 	bl	8002aa0 <HAL_DMA_Start_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e051      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800569c:	60da      	str	r2, [r3, #12]
      break;
 800569e:	e002      	b.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d141      	bne.n	8005730 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2201      	movs	r2, #1
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 ff17 	bl	80064e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a22      	ldr	r2, [pc, #136]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x338>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x338>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_TIM_PWM_Start_DMA+0x2ec>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d009      	beq.n	80056fc <HAL_TIM_PWM_Start_DMA+0x2ec>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a17      	ldr	r2, [pc, #92]	; (800574c <HAL_TIM_PWM_Start_DMA+0x33c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIM_PWM_Start_DMA+0x2ec>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x340>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d111      	bne.n	8005720 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b06      	cmp	r3, #6
 800570c:	d010      	beq.n	8005730 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	e007      	b.n	8005730 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	08005ebf 	.word	0x08005ebf
 8005740:	08005f67 	.word	0x08005f67
 8005744:	08005e2d 	.word	0x08005e2d
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800

08005754 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d855      	bhi.n	8005814 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	080057a5 	.word	0x080057a5
 8005774:	08005815 	.word	0x08005815
 8005778:	08005815 	.word	0x08005815
 800577c:	08005815 	.word	0x08005815
 8005780:	080057c1 	.word	0x080057c1
 8005784:	08005815 	.word	0x08005815
 8005788:	08005815 	.word	0x08005815
 800578c:	08005815 	.word	0x08005815
 8005790:	080057dd 	.word	0x080057dd
 8005794:	08005815 	.word	0x08005815
 8005798:	08005815 	.word	0x08005815
 800579c:	08005815 	.word	0x08005815
 80057a0:	080057f9 	.word	0x080057f9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fd fa0d 	bl	8002bd8 <HAL_DMA_Abort_IT>
      break;
 80057be:	e02c      	b.n	800581a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd f9ff 	bl	8002bd8 <HAL_DMA_Abort_IT>
      break;
 80057da:	e01e      	b.n	800581a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd f9f1 	bl	8002bd8 <HAL_DMA_Abort_IT>
      break;
 80057f6:	e010      	b.n	800581a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005806:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4618      	mov	r0, r3
 800580e:	f7fd f9e3 	bl	8002bd8 <HAL_DMA_Abort_IT>
      break;
 8005812:	e002      	b.n	800581a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      break;
 8005818:	bf00      	nop
  }

  if (status == HAL_OK)
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d157      	bne.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fe5d 	bl	80064e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d117      	bne.n	8005868 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	f240 4344 	movw	r3, #1092	; 0x444
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d107      	bne.n	8005868 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005866:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	f240 4344 	movw	r3, #1092	; 0x444
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <HAL_TIM_PWM_Stop_DMA+0x154>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a6:	e013      	b.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d104      	bne.n	80058b8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b6:	e00b      	b.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d104      	bne.n	80058c8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c6:	e003      	b.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40012c00 	.word	0x40012c00

080058e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01b      	beq.n	8005944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa5a 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa4d 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fb fff9 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	d020      	beq.n	8005990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01b      	beq.n	8005990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0204 	mvn.w	r2, #4
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa34 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa27 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb ffd3 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0208 	mvn.w	r2, #8
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa0e 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa01 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb ffad 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0210 	mvn.w	r2, #16
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2208      	movs	r2, #8
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9e8 	bl	8005de4 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f9db 	bl	8005dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fb ff87 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0201 	mvn.w	r2, #1
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc f9ec 	bl	8001e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fdc7 	bl	80065fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9ba 	bl	8005e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0220 	mvn.w	r2, #32
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd9a 	bl	80065ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e0ae      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	f200 809f 	bhi.w	8005c2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005c2d 	.word	0x08005c2d
 8005afc:	08005c2d 	.word	0x08005c2d
 8005b00:	08005c2d 	.word	0x08005c2d
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005c2d 	.word	0x08005c2d
 8005b0c:	08005c2d 	.word	0x08005c2d
 8005b10:	08005c2d 	.word	0x08005c2d
 8005b14:	08005bab 	.word	0x08005bab
 8005b18:	08005c2d 	.word	0x08005c2d
 8005b1c:	08005c2d 	.word	0x08005c2d
 8005b20:	08005c2d 	.word	0x08005c2d
 8005b24:	08005beb 	.word	0x08005beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fabc 	bl	80060ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0208 	orr.w	r2, r2, #8
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	619a      	str	r2, [r3, #24]
      break;
 8005b66:	e064      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb02 	bl	8006178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6999      	ldr	r1, [r3, #24]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	619a      	str	r2, [r3, #24]
      break;
 8005ba8:	e043      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb4b 	bl	800624c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0208 	orr.w	r2, r2, #8
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0204 	bic.w	r2, r2, #4
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
      break;
 8005be8:	e023      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fb95 	bl	8006320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69d9      	ldr	r1, [r3, #28]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	021a      	lsls	r2, r3, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	61da      	str	r2, [r3, #28]
      break;
 8005c2a:	e002      	b.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0b4      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x186>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	d03e      	beq.n	8005d18 <HAL_TIM_ConfigClockSource+0xd4>
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	f200 8087 	bhi.w	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	f000 8086 	beq.w	8005db6 <HAL_TIM_ConfigClockSource+0x172>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d87f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b70      	cmp	r3, #112	; 0x70
 8005cb2:	d01a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0xa6>
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d87b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d050      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x11a>
 8005cbc:	2b60      	cmp	r3, #96	; 0x60
 8005cbe:	d877      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d03c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0xfa>
 8005cc4:	2b50      	cmp	r3, #80	; 0x50
 8005cc6:	d873      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d058      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x13a>
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d86f      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d064      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d86b      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d060      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d867      	bhi.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d05a      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f000 fbd6 	bl	80064aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
      break;
 8005d16:	e04f      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f000 fbbf 	bl	80064aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d3a:	609a      	str	r2, [r3, #8]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 fb36 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2150      	movs	r1, #80	; 0x50
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb8d 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e02c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 fb54 	bl	8006418 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2160      	movs	r1, #96	; 0x60
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb7d 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e01c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 fb16 	bl	80063bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fb6d 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e00c      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 fb64 	bl	8006476 <TIM_ITRx_SetConfig>
      break;
 8005dae:	e003      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e52:	e02a      	b.n	8005eaa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d107      	bne.n	8005e6e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2202      	movs	r2, #2
 8005e62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	e01d      	b.n	8005eaa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d107      	bne.n	8005e88 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e86:	e010      	b.n	8005eaa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d107      	bne.n	8005ea2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2208      	movs	r2, #8
 8005e96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea0:	e003      	b.n	8005eaa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ffb5 	bl	8005e1a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	771a      	strb	r2, [r3, #28]
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10b      	bne.n	8005eee <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d136      	bne.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eec:	e031      	b.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d10b      	bne.n	8005f10 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2202      	movs	r2, #2
 8005efc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d125      	bne.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0e:	e020      	b.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d10b      	bne.n	8005f32 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d114      	bne.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f30:	e00f      	b.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d10a      	bne.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2208      	movs	r2, #8
 8005f40:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7fb fcec 	bl	8001930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	771a      	strb	r2, [r3, #28]
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d103      	bne.n	8005f86 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	771a      	strb	r2, [r3, #28]
 8005f84:	e019      	b.n	8005fba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d103      	bne.n	8005f98 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2202      	movs	r2, #2
 8005f94:	771a      	strb	r2, [r3, #28]
 8005f96:	e010      	b.n	8005fba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d103      	bne.n	8005faa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	771a      	strb	r2, [r3, #28]
 8005fa8:	e007      	b.n	8005fba <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d102      	bne.n	8005fba <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff ff1b 	bl	8005df6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	771a      	strb	r2, [r3, #28]
}
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <TIM_Base_SetConfig+0xd0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x30>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x30>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <TIM_Base_SetConfig+0xd4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x30>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2b      	ldr	r2, [pc, #172]	; (80060a8 <TIM_Base_SetConfig+0xd8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <TIM_Base_SetConfig+0xd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0x62>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0x62>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <TIM_Base_SetConfig+0xd4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0x62>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <TIM_Base_SetConfig+0xd8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a0d      	ldr	r2, [pc, #52]	; (80060a0 <TIM_Base_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d103      	bne.n	8006078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	611a      	str	r2, [r3, #16]
  }
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800

080060ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0201 	bic.w	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0302 	bic.w	r3, r3, #2
 80060f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <TIM_OC1_SetConfig+0xc8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10c      	bne.n	8006122 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0308 	bic.w	r3, r3, #8
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a13      	ldr	r2, [pc, #76]	; (8006174 <TIM_OC1_SetConfig+0xc8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d111      	bne.n	800614e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40012c00 	.word	0x40012c00

08006178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f023 0210 	bic.w	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0320 	bic.w	r3, r3, #32
 80061c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <TIM_OC2_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a14      	ldr	r2, [pc, #80]	; (8006248 <TIM_OC2_SetConfig+0xd0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d113      	bne.n	8006224 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800620a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	40012c00 	.word	0x40012c00

0800624c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <TIM_OC3_SetConfig+0xd0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d10d      	bne.n	80062c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a14      	ldr	r2, [pc, #80]	; (800631c <TIM_OC3_SetConfig+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00

08006320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	031b      	lsls	r3, r3, #12
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <TIM_OC4_SetConfig+0x98>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00

080063bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 030a 	bic.w	r3, r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	031b      	lsls	r3, r3, #12
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006454:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	621a      	str	r2, [r3, #32]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr

08006476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	f043 0307 	orr.w	r3, r3, #7
 8006498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
 80064b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	609a      	str	r2, [r3, #8]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2201      	movs	r2, #1
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	43db      	mvns	r3, r3
 800650a:	401a      	ands	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006544:	2302      	movs	r3, #2
 8006546:	e046      	b.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006594:	d009      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a12      	ldr	r2, [pc, #72]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a10      	ldr	r2, [pc, #64]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10c      	bne.n	80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800

080065ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e042      	b.n	80066a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fb fe80 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2224      	movs	r2, #36	; 0x24
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fdb7 	bl	80071c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d175      	bne.n	80067bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Transmit+0x2c>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e06e      	b.n	80067be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2221      	movs	r2, #33	; 0x21
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ee:	f7fc f841 	bl	8002774 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	88fa      	ldrh	r2, [r7, #6]
 80066fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006708:	d108      	bne.n	800671c <HAL_UART_Transmit+0x6c>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e003      	b.n	8006724 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006724:	e02e      	b.n	8006784 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fb1c 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e03a      	b.n	80067be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3302      	adds	r3, #2
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e007      	b.n	8006776 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1cb      	bne.n	8006726 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2200      	movs	r2, #0
 8006796:	2140      	movs	r1, #64	; 0x40
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fae8 	bl	8006d6e <UART_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e006      	b.n	80067be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e000      	b.n	80067be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d112      	bne.n	8006806 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Receive_IT+0x26>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e00b      	b.n	8006808 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	461a      	mov	r2, r3
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fb0f 	bl	8006e20 <UART_Start_Receive_IT>
 8006802:	4603      	mov	r3, r0
 8006804:	e000      	b.n	8006808 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006806:	2302      	movs	r3, #2
  }
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b0ba      	sub	sp, #232	; 0xe8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800683c:	2300      	movs	r3, #0
 800683e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800684e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_UART_IRQHandler+0x66>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fbec 	bl	800704c <UART_Receive_IT>
      return;
 8006874:	e25b      	b.n	8006d2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80de 	beq.w	8006a3c <HAL_UART_IRQHandler+0x22c>
 8006880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800688c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80d1 	beq.w	8006a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_UART_IRQHandler+0xae>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xd2>
 80068ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f043 0202 	orr.w	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <HAL_UART_IRQHandler+0xf6>
 80068ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f043 0204 	orr.w	r2, r3, #4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d011      	beq.n	8006936 <HAL_UART_IRQHandler+0x126>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800691e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	f043 0208 	orr.w	r2, r3, #8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 81f2 	beq.w	8006d24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_UART_IRQHandler+0x14e>
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fb77 	bl	800704c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d103      	bne.n	800698a <HAL_UART_IRQHandler+0x17a>
 8006982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d04f      	beq.n	8006a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa81 	bl	8006e92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d041      	beq.n	8006a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3314      	adds	r3, #20
 80069a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3314      	adds	r3, #20
 80069c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1d9      	bne.n	800699e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d013      	beq.n	8006a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	4a7e      	ldr	r2, [pc, #504]	; (8006bf0 <HAL_UART_IRQHandler+0x3e0>)
 80069f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fc f8ea 	bl	8002bd8 <HAL_DMA_Abort_IT>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	e00e      	b.n	8006a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f993 	bl	8006d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	e00a      	b.n	8006a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f98f 	bl	8006d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	e006      	b.n	8006a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f98b 	bl	8006d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a36:	e175      	b.n	8006d24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	bf00      	nop
    return;
 8006a3a:	e173      	b.n	8006d24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 814f 	bne.w	8006ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 8148 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8141 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80b6 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8145 	beq.w	8006d28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	f080 813e 	bcs.w	8006d28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	f000 8088 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006aec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1d9      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3314      	adds	r3, #20
 8006b12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e1      	bne.n	8006b0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3314      	adds	r3, #20
 8006b68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e3      	bne.n	8006b48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba0:	f023 0310 	bic.w	r3, r3, #16
 8006ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e3      	bne.n	8006b8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fb ffc8 	bl	8002b60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8b6 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bec:	e09c      	b.n	8006d28 <HAL_UART_IRQHandler+0x518>
 8006bee:	bf00      	nop
 8006bf0:	08006f57 	.word	0x08006f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 808e 	beq.w	8006d2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8089 	beq.w	8006d2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	623b      	str	r3, [r7, #32]
   return(result);
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c76:	633a      	str	r2, [r7, #48]	; 0x30
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e3      	bne.n	8006c52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cbc:	61fa      	str	r2, [r7, #28]
 8006cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e3      	bne.n	8006c98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f83b 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce2:	e023      	b.n	8006d2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <HAL_UART_IRQHandler+0x4f4>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f93e 	bl	8006f7e <UART_Transmit_IT>
    return;
 8006d02:	e014      	b.n	8006d2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <HAL_UART_IRQHandler+0x51e>
 8006d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f97d 	bl	800701c <UART_EndTransmit_IT>
    return;
 8006d22:	e004      	b.n	8006d2e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d24:	bf00      	nop
 8006d26:	e002      	b.n	8006d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d2c:	bf00      	nop
  }
}
 8006d2e:	37e8      	adds	r7, #232	; 0xe8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr

08006d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7e:	e03b      	b.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d037      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d88:	f7fb fcf4 	bl	8002774 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e03a      	b.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d023      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d020      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d01d      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d116      	bne.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f856 	bl	8006e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2208      	movs	r2, #8
 8006dea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e00f      	b.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	4013      	ands	r3, r2
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	bf0c      	ite	eq
 8006e08:	2301      	moveq	r3, #1
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d0b4      	beq.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	88fa      	ldrh	r2, [r7, #6]
 8006e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2222      	movs	r2, #34	; 0x22
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0220 	orr.w	r2, r2, #32
 8006e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr

08006e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b095      	sub	sp, #84	; 0x54
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eba:	643a      	str	r2, [r7, #64]	; 0x40
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d119      	bne.n	8006f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f2a:	61ba      	str	r2, [r7, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6979      	ldr	r1, [r7, #20]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	613b      	str	r3, [r7, #16]
   return(result);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f4c:	bf00      	nop
 8006f4e:	3754      	adds	r7, #84	; 0x54
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr

08006f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff fee8 	bl	8006d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b21      	cmp	r3, #33	; 0x21
 8006f90:	d13e      	bne.n	8007010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d114      	bne.n	8006fc6 <UART_Transmit_IT+0x48>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d110      	bne.n	8006fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	1c9a      	adds	r2, r3, #2
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	621a      	str	r2, [r3, #32]
 8006fc4:	e008      	b.n	8006fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	1c59      	adds	r1, r3, #1
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6211      	str	r1, [r2, #32]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10f      	bne.n	800700c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800700a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fe79 	bl	8006d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	; 0x30
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b22      	cmp	r3, #34	; 0x22
 800705e:	f040 80ae 	bne.w	80071be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706a:	d117      	bne.n	800709c <UART_Receive_IT+0x50>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d113      	bne.n	800709c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	b29a      	uxth	r2, r3
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	1c9a      	adds	r2, r3, #2
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
 800709a:	e026      	b.n	80070ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ae:	d007      	beq.n	80070c0 <UART_Receive_IT+0x74>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <UART_Receive_IT+0x82>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e008      	b.n	80070e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4619      	mov	r1, r3
 80070f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d15d      	bne.n	80071ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0220 	bic.w	r2, r2, #32
 800710c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	2b01      	cmp	r3, #1
 8007142:	d135      	bne.n	80071b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	613b      	str	r3, [r7, #16]
   return(result);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716a:	623a      	str	r2, [r7, #32]
 800716c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	69f9      	ldr	r1, [r7, #28]
 8007170:	6a3a      	ldr	r2, [r7, #32]
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	61bb      	str	r3, [r7, #24]
   return(result);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d10a      	bne.n	80071a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff fdd5 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 80071ae:	e002      	b.n	80071b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fa f8ff 	bl	80013b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e002      	b.n	80071c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e000      	b.n	80071c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3730      	adds	r7, #48	; 0x30
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007202:	f023 030c 	bic.w	r3, r3, #12
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	430b      	orrs	r3, r1
 800720e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <UART_SetConfig+0x114>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d103      	bne.n	8007238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fd ffc2 	bl	80051b8 <HAL_RCC_GetPCLK2Freq>
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	e002      	b.n	800723e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007238:	f7fd ffaa 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 800723c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009a      	lsls	r2, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	4a22      	ldr	r2, [pc, #136]	; (80072e0 <UART_SetConfig+0x118>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	0119      	lsls	r1, r3, #4
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009a      	lsls	r2, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	fbb2 f2f3 	udiv	r2, r2, r3
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <UART_SetConfig+0x118>)
 8007276:	fba3 0302 	umull	r0, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2064      	movs	r0, #100	; 0x64
 800727e:	fb00 f303 	mul.w	r3, r0, r3
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	; 0x32
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <UART_SetConfig+0x118>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007294:	4419      	add	r1, r3
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009a      	lsls	r2, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <UART_SetConfig+0x118>)
 80072ae:	fba3 0302 	umull	r0, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2064      	movs	r0, #100	; 0x64
 80072b6:	fb00 f303 	mul.w	r3, r0, r3
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	3332      	adds	r3, #50	; 0x32
 80072c0:	4a07      	ldr	r2, [pc, #28]	; (80072e0 <UART_SetConfig+0x118>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	440a      	add	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40013800 	.word	0x40013800
 80072e0:	51eb851f 	.word	0x51eb851f

080072e4 <__errno>:
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <__errno+0x8>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000020 	.word	0x20000020

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	2600      	movs	r6, #0
 80072f4:	4d0c      	ldr	r5, [pc, #48]	; (8007328 <__libc_init_array+0x38>)
 80072f6:	4c0d      	ldr	r4, [pc, #52]	; (800732c <__libc_init_array+0x3c>)
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	42a6      	cmp	r6, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	f003 fc2c 	bl	800ab5c <_init>
 8007304:	2600      	movs	r6, #0
 8007306:	4d0a      	ldr	r5, [pc, #40]	; (8007330 <__libc_init_array+0x40>)
 8007308:	4c0a      	ldr	r4, [pc, #40]	; (8007334 <__libc_init_array+0x44>)
 800730a:	1b64      	subs	r4, r4, r5
 800730c:	10a4      	asrs	r4, r4, #2
 800730e:	42a6      	cmp	r6, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f855 3b04 	ldr.w	r3, [r5], #4
 8007318:	4798      	blx	r3
 800731a:	3601      	adds	r6, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007322:	4798      	blx	r3
 8007324:	3601      	adds	r6, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	0800b098 	.word	0x0800b098
 800732c:	0800b098 	.word	0x0800b098
 8007330:	0800b098 	.word	0x0800b098
 8007334:	0800b09c 	.word	0x0800b09c

08007338 <memset>:
 8007338:	4603      	mov	r3, r0
 800733a:	4402      	add	r2, r0
 800733c:	4293      	cmp	r3, r2
 800733e:	d100      	bne.n	8007342 <memset+0xa>
 8007340:	4770      	bx	lr
 8007342:	f803 1b01 	strb.w	r1, [r3], #1
 8007346:	e7f9      	b.n	800733c <memset+0x4>

08007348 <__cvt>:
 8007348:	2b00      	cmp	r3, #0
 800734a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734e:	461f      	mov	r7, r3
 8007350:	bfbb      	ittet	lt
 8007352:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007356:	461f      	movlt	r7, r3
 8007358:	2300      	movge	r3, #0
 800735a:	232d      	movlt	r3, #45	; 0x2d
 800735c:	b088      	sub	sp, #32
 800735e:	4614      	mov	r4, r2
 8007360:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007362:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007364:	7013      	strb	r3, [r2, #0]
 8007366:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007368:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800736c:	f023 0820 	bic.w	r8, r3, #32
 8007370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007374:	d005      	beq.n	8007382 <__cvt+0x3a>
 8007376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800737a:	d100      	bne.n	800737e <__cvt+0x36>
 800737c:	3501      	adds	r5, #1
 800737e:	2302      	movs	r3, #2
 8007380:	e000      	b.n	8007384 <__cvt+0x3c>
 8007382:	2303      	movs	r3, #3
 8007384:	aa07      	add	r2, sp, #28
 8007386:	9204      	str	r2, [sp, #16]
 8007388:	aa06      	add	r2, sp, #24
 800738a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800738e:	e9cd 3500 	strd	r3, r5, [sp]
 8007392:	4622      	mov	r2, r4
 8007394:	463b      	mov	r3, r7
 8007396:	f000 fee7 	bl	8008168 <_dtoa_r>
 800739a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800739e:	4606      	mov	r6, r0
 80073a0:	d102      	bne.n	80073a8 <__cvt+0x60>
 80073a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073a4:	07db      	lsls	r3, r3, #31
 80073a6:	d522      	bpl.n	80073ee <__cvt+0xa6>
 80073a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073ac:	eb06 0905 	add.w	r9, r6, r5
 80073b0:	d110      	bne.n	80073d4 <__cvt+0x8c>
 80073b2:	7833      	ldrb	r3, [r6, #0]
 80073b4:	2b30      	cmp	r3, #48	; 0x30
 80073b6:	d10a      	bne.n	80073ce <__cvt+0x86>
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	4620      	mov	r0, r4
 80073be:	4639      	mov	r1, r7
 80073c0:	f7f9 faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80073c4:	b918      	cbnz	r0, 80073ce <__cvt+0x86>
 80073c6:	f1c5 0501 	rsb	r5, r5, #1
 80073ca:	f8ca 5000 	str.w	r5, [sl]
 80073ce:	f8da 3000 	ldr.w	r3, [sl]
 80073d2:	4499      	add	r9, r3
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4620      	mov	r0, r4
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	b108      	cbz	r0, 80073e6 <__cvt+0x9e>
 80073e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80073e6:	2230      	movs	r2, #48	; 0x30
 80073e8:	9b07      	ldr	r3, [sp, #28]
 80073ea:	454b      	cmp	r3, r9
 80073ec:	d307      	bcc.n	80073fe <__cvt+0xb6>
 80073ee:	4630      	mov	r0, r6
 80073f0:	9b07      	ldr	r3, [sp, #28]
 80073f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073f4:	1b9b      	subs	r3, r3, r6
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	b008      	add	sp, #32
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	1c59      	adds	r1, r3, #1
 8007400:	9107      	str	r1, [sp, #28]
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e7f0      	b.n	80073e8 <__cvt+0xa0>

08007406 <__exponent>:
 8007406:	4603      	mov	r3, r0
 8007408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740a:	2900      	cmp	r1, #0
 800740c:	f803 2b02 	strb.w	r2, [r3], #2
 8007410:	bfb6      	itet	lt
 8007412:	222d      	movlt	r2, #45	; 0x2d
 8007414:	222b      	movge	r2, #43	; 0x2b
 8007416:	4249      	neglt	r1, r1
 8007418:	2909      	cmp	r1, #9
 800741a:	7042      	strb	r2, [r0, #1]
 800741c:	dd2b      	ble.n	8007476 <__exponent+0x70>
 800741e:	f10d 0407 	add.w	r4, sp, #7
 8007422:	46a4      	mov	ip, r4
 8007424:	270a      	movs	r7, #10
 8007426:	fb91 f6f7 	sdiv	r6, r1, r7
 800742a:	460a      	mov	r2, r1
 800742c:	46a6      	mov	lr, r4
 800742e:	fb07 1516 	mls	r5, r7, r6, r1
 8007432:	2a63      	cmp	r2, #99	; 0x63
 8007434:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007438:	4631      	mov	r1, r6
 800743a:	f104 34ff 	add.w	r4, r4, #4294967295
 800743e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007442:	dcf0      	bgt.n	8007426 <__exponent+0x20>
 8007444:	3130      	adds	r1, #48	; 0x30
 8007446:	f1ae 0502 	sub.w	r5, lr, #2
 800744a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800744e:	4629      	mov	r1, r5
 8007450:	1c44      	adds	r4, r0, #1
 8007452:	4561      	cmp	r1, ip
 8007454:	d30a      	bcc.n	800746c <__exponent+0x66>
 8007456:	f10d 0209 	add.w	r2, sp, #9
 800745a:	eba2 020e 	sub.w	r2, r2, lr
 800745e:	4565      	cmp	r5, ip
 8007460:	bf88      	it	hi
 8007462:	2200      	movhi	r2, #0
 8007464:	4413      	add	r3, r2
 8007466:	1a18      	subs	r0, r3, r0
 8007468:	b003      	add	sp, #12
 800746a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800746c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007470:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007474:	e7ed      	b.n	8007452 <__exponent+0x4c>
 8007476:	2330      	movs	r3, #48	; 0x30
 8007478:	3130      	adds	r1, #48	; 0x30
 800747a:	7083      	strb	r3, [r0, #2]
 800747c:	70c1      	strb	r1, [r0, #3]
 800747e:	1d03      	adds	r3, r0, #4
 8007480:	e7f1      	b.n	8007466 <__exponent+0x60>
	...

08007484 <_printf_float>:
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	b091      	sub	sp, #68	; 0x44
 800748a:	460c      	mov	r4, r1
 800748c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007490:	4616      	mov	r6, r2
 8007492:	461f      	mov	r7, r3
 8007494:	4605      	mov	r5, r0
 8007496:	f001 fe0d 	bl	80090b4 <_localeconv_r>
 800749a:	6803      	ldr	r3, [r0, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	f7f8 fe56 	bl	8000150 <strlen>
 80074a4:	2300      	movs	r3, #0
 80074a6:	930e      	str	r3, [sp, #56]	; 0x38
 80074a8:	f8d8 3000 	ldr.w	r3, [r8]
 80074ac:	900a      	str	r0, [sp, #40]	; 0x28
 80074ae:	3307      	adds	r3, #7
 80074b0:	f023 0307 	bic.w	r3, r3, #7
 80074b4:	f103 0208 	add.w	r2, r3, #8
 80074b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074bc:	f8d4 b000 	ldr.w	fp, [r4]
 80074c0:	f8c8 2000 	str.w	r2, [r8]
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	4640      	mov	r0, r8
 80074dc:	4b9c      	ldr	r3, [pc, #624]	; (8007750 <_printf_float+0x2cc>)
 80074de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074e0:	f7f9 fa94 	bl	8000a0c <__aeabi_dcmpun>
 80074e4:	bb70      	cbnz	r0, 8007544 <_printf_float+0xc0>
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	4640      	mov	r0, r8
 80074ec:	4b98      	ldr	r3, [pc, #608]	; (8007750 <_printf_float+0x2cc>)
 80074ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f0:	f7f9 fa6e 	bl	80009d0 <__aeabi_dcmple>
 80074f4:	bb30      	cbnz	r0, 8007544 <_printf_float+0xc0>
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	4640      	mov	r0, r8
 80074fc:	4651      	mov	r1, sl
 80074fe:	f7f9 fa5d 	bl	80009bc <__aeabi_dcmplt>
 8007502:	b110      	cbz	r0, 800750a <_printf_float+0x86>
 8007504:	232d      	movs	r3, #45	; 0x2d
 8007506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750a:	4b92      	ldr	r3, [pc, #584]	; (8007754 <_printf_float+0x2d0>)
 800750c:	4892      	ldr	r0, [pc, #584]	; (8007758 <_printf_float+0x2d4>)
 800750e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007512:	bf94      	ite	ls
 8007514:	4698      	movls	r8, r3
 8007516:	4680      	movhi	r8, r0
 8007518:	2303      	movs	r3, #3
 800751a:	f04f 0a00 	mov.w	sl, #0
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	f02b 0304 	bic.w	r3, fp, #4
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	4633      	mov	r3, r6
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	9700      	str	r7, [sp, #0]
 800752e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007530:	f000 f9d4 	bl	80078dc <_printf_common>
 8007534:	3001      	adds	r0, #1
 8007536:	f040 8090 	bne.w	800765a <_printf_float+0x1d6>
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	b011      	add	sp, #68	; 0x44
 8007540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	4642      	mov	r2, r8
 8007546:	4653      	mov	r3, sl
 8007548:	4640      	mov	r0, r8
 800754a:	4651      	mov	r1, sl
 800754c:	f7f9 fa5e 	bl	8000a0c <__aeabi_dcmpun>
 8007550:	b148      	cbz	r0, 8007566 <_printf_float+0xe2>
 8007552:	f1ba 0f00 	cmp.w	sl, #0
 8007556:	bfb8      	it	lt
 8007558:	232d      	movlt	r3, #45	; 0x2d
 800755a:	4880      	ldr	r0, [pc, #512]	; (800775c <_printf_float+0x2d8>)
 800755c:	bfb8      	it	lt
 800755e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007562:	4b7f      	ldr	r3, [pc, #508]	; (8007760 <_printf_float+0x2dc>)
 8007564:	e7d3      	b.n	800750e <_printf_float+0x8a>
 8007566:	6863      	ldr	r3, [r4, #4]
 8007568:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	d142      	bne.n	80075f6 <_printf_float+0x172>
 8007570:	2306      	movs	r3, #6
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	9206      	str	r2, [sp, #24]
 8007578:	aa0e      	add	r2, sp, #56	; 0x38
 800757a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800757e:	aa0d      	add	r2, sp, #52	; 0x34
 8007580:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007584:	9203      	str	r2, [sp, #12]
 8007586:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800758a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	4642      	mov	r2, r8
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	4628      	mov	r0, r5
 8007598:	4653      	mov	r3, sl
 800759a:	910b      	str	r1, [sp, #44]	; 0x2c
 800759c:	f7ff fed4 	bl	8007348 <__cvt>
 80075a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075a2:	4680      	mov	r8, r0
 80075a4:	2947      	cmp	r1, #71	; 0x47
 80075a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075a8:	d108      	bne.n	80075bc <_printf_float+0x138>
 80075aa:	1cc8      	adds	r0, r1, #3
 80075ac:	db02      	blt.n	80075b4 <_printf_float+0x130>
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	4299      	cmp	r1, r3
 80075b2:	dd40      	ble.n	8007636 <_printf_float+0x1b2>
 80075b4:	f1a9 0902 	sub.w	r9, r9, #2
 80075b8:	fa5f f989 	uxtb.w	r9, r9
 80075bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075c0:	d81f      	bhi.n	8007602 <_printf_float+0x17e>
 80075c2:	464a      	mov	r2, r9
 80075c4:	3901      	subs	r1, #1
 80075c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075ca:	910d      	str	r1, [sp, #52]	; 0x34
 80075cc:	f7ff ff1b 	bl	8007406 <__exponent>
 80075d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075d2:	4682      	mov	sl, r0
 80075d4:	1813      	adds	r3, r2, r0
 80075d6:	2a01      	cmp	r2, #1
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	dc02      	bgt.n	80075e2 <_printf_float+0x15e>
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	07d2      	lsls	r2, r2, #31
 80075e0:	d501      	bpl.n	80075e6 <_printf_float+0x162>
 80075e2:	3301      	adds	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d09b      	beq.n	8007526 <_printf_float+0xa2>
 80075ee:	232d      	movs	r3, #45	; 0x2d
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f4:	e797      	b.n	8007526 <_printf_float+0xa2>
 80075f6:	2947      	cmp	r1, #71	; 0x47
 80075f8:	d1bc      	bne.n	8007574 <_printf_float+0xf0>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1ba      	bne.n	8007574 <_printf_float+0xf0>
 80075fe:	2301      	movs	r3, #1
 8007600:	e7b7      	b.n	8007572 <_printf_float+0xee>
 8007602:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007606:	d118      	bne.n	800763a <_printf_float+0x1b6>
 8007608:	2900      	cmp	r1, #0
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	dd0b      	ble.n	8007626 <_printf_float+0x1a2>
 800760e:	6121      	str	r1, [r4, #16]
 8007610:	b913      	cbnz	r3, 8007618 <_printf_float+0x194>
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	07d0      	lsls	r0, r2, #31
 8007616:	d502      	bpl.n	800761e <_printf_float+0x19a>
 8007618:	3301      	adds	r3, #1
 800761a:	440b      	add	r3, r1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	f04f 0a00 	mov.w	sl, #0
 8007622:	65a1      	str	r1, [r4, #88]	; 0x58
 8007624:	e7df      	b.n	80075e6 <_printf_float+0x162>
 8007626:	b913      	cbnz	r3, 800762e <_printf_float+0x1aa>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	07d2      	lsls	r2, r2, #31
 800762c:	d501      	bpl.n	8007632 <_printf_float+0x1ae>
 800762e:	3302      	adds	r3, #2
 8007630:	e7f4      	b.n	800761c <_printf_float+0x198>
 8007632:	2301      	movs	r3, #1
 8007634:	e7f2      	b.n	800761c <_printf_float+0x198>
 8007636:	f04f 0967 	mov.w	r9, #103	; 0x67
 800763a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800763c:	4299      	cmp	r1, r3
 800763e:	db05      	blt.n	800764c <_printf_float+0x1c8>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	6121      	str	r1, [r4, #16]
 8007644:	07d8      	lsls	r0, r3, #31
 8007646:	d5ea      	bpl.n	800761e <_printf_float+0x19a>
 8007648:	1c4b      	adds	r3, r1, #1
 800764a:	e7e7      	b.n	800761c <_printf_float+0x198>
 800764c:	2900      	cmp	r1, #0
 800764e:	bfcc      	ite	gt
 8007650:	2201      	movgt	r2, #1
 8007652:	f1c1 0202 	rsble	r2, r1, #2
 8007656:	4413      	add	r3, r2
 8007658:	e7e0      	b.n	800761c <_printf_float+0x198>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	055a      	lsls	r2, r3, #21
 800765e:	d407      	bmi.n	8007670 <_printf_float+0x1ec>
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	4642      	mov	r2, r8
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	d12b      	bne.n	80076c6 <_printf_float+0x242>
 800766e:	e764      	b.n	800753a <_printf_float+0xb6>
 8007670:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007674:	f240 80dd 	bls.w	8007832 <_printf_float+0x3ae>
 8007678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	f7f9 f992 	bl	80009a8 <__aeabi_dcmpeq>
 8007684:	2800      	cmp	r0, #0
 8007686:	d033      	beq.n	80076f0 <_printf_float+0x26c>
 8007688:	2301      	movs	r3, #1
 800768a:	4631      	mov	r1, r6
 800768c:	4628      	mov	r0, r5
 800768e:	4a35      	ldr	r2, [pc, #212]	; (8007764 <_printf_float+0x2e0>)
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	f43f af51 	beq.w	800753a <_printf_float+0xb6>
 8007698:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800769c:	429a      	cmp	r2, r3
 800769e:	db02      	blt.n	80076a6 <_printf_float+0x222>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07d8      	lsls	r0, r3, #31
 80076a4:	d50f      	bpl.n	80076c6 <_printf_float+0x242>
 80076a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	f43f af42 	beq.w	800753a <_printf_float+0xb6>
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	f104 091a 	add.w	r9, r4, #26
 80076be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076c0:	3b01      	subs	r3, #1
 80076c2:	4543      	cmp	r3, r8
 80076c4:	dc09      	bgt.n	80076da <_printf_float+0x256>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	079b      	lsls	r3, r3, #30
 80076ca:	f100 8102 	bmi.w	80078d2 <_printf_float+0x44e>
 80076ce:	68e0      	ldr	r0, [r4, #12]
 80076d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfb8      	it	lt
 80076d6:	4618      	movlt	r0, r3
 80076d8:	e731      	b.n	800753e <_printf_float+0xba>
 80076da:	2301      	movs	r3, #1
 80076dc:	464a      	mov	r2, r9
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f af28 	beq.w	800753a <_printf_float+0xb6>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	e7e6      	b.n	80076be <_printf_float+0x23a>
 80076f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dc38      	bgt.n	8007768 <_printf_float+0x2e4>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	4a19      	ldr	r2, [pc, #100]	; (8007764 <_printf_float+0x2e0>)
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f af1a 	beq.w	800753a <_printf_float+0xb6>
 8007706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800770a:	4313      	orrs	r3, r2
 800770c:	d102      	bne.n	8007714 <_printf_float+0x290>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	07d9      	lsls	r1, r3, #31
 8007712:	d5d8      	bpl.n	80076c6 <_printf_float+0x242>
 8007714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f af0b 	beq.w	800753a <_printf_float+0xb6>
 8007724:	f04f 0900 	mov.w	r9, #0
 8007728:	f104 0a1a 	add.w	sl, r4, #26
 800772c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772e:	425b      	negs	r3, r3
 8007730:	454b      	cmp	r3, r9
 8007732:	dc01      	bgt.n	8007738 <_printf_float+0x2b4>
 8007734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007736:	e794      	b.n	8007662 <_printf_float+0x1de>
 8007738:	2301      	movs	r3, #1
 800773a:	4652      	mov	r2, sl
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f aef9 	beq.w	800753a <_printf_float+0xb6>
 8007748:	f109 0901 	add.w	r9, r9, #1
 800774c:	e7ee      	b.n	800772c <_printf_float+0x2a8>
 800774e:	bf00      	nop
 8007750:	7fefffff 	.word	0x7fefffff
 8007754:	0800aca0 	.word	0x0800aca0
 8007758:	0800aca4 	.word	0x0800aca4
 800775c:	0800acac 	.word	0x0800acac
 8007760:	0800aca8 	.word	0x0800aca8
 8007764:	0800af39 	.word	0x0800af39
 8007768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800776a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800776c:	429a      	cmp	r2, r3
 800776e:	bfa8      	it	ge
 8007770:	461a      	movge	r2, r3
 8007772:	2a00      	cmp	r2, #0
 8007774:	4691      	mov	r9, r2
 8007776:	dc37      	bgt.n	80077e8 <_printf_float+0x364>
 8007778:	f04f 0b00 	mov.w	fp, #0
 800777c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007780:	f104 021a 	add.w	r2, r4, #26
 8007784:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007788:	ebaa 0309 	sub.w	r3, sl, r9
 800778c:	455b      	cmp	r3, fp
 800778e:	dc33      	bgt.n	80077f8 <_printf_float+0x374>
 8007790:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007794:	429a      	cmp	r2, r3
 8007796:	db3b      	blt.n	8007810 <_printf_float+0x38c>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	07da      	lsls	r2, r3, #31
 800779c:	d438      	bmi.n	8007810 <_printf_float+0x38c>
 800779e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077a2:	eba2 030a 	sub.w	r3, r2, sl
 80077a6:	eba2 0901 	sub.w	r9, r2, r1
 80077aa:	4599      	cmp	r9, r3
 80077ac:	bfa8      	it	ge
 80077ae:	4699      	movge	r9, r3
 80077b0:	f1b9 0f00 	cmp.w	r9, #0
 80077b4:	dc34      	bgt.n	8007820 <_printf_float+0x39c>
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077be:	f104 0a1a 	add.w	sl, r4, #26
 80077c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	eba3 0309 	sub.w	r3, r3, r9
 80077cc:	4543      	cmp	r3, r8
 80077ce:	f77f af7a 	ble.w	80076c6 <_printf_float+0x242>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4652      	mov	r2, sl
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f aeac 	beq.w	800753a <_printf_float+0xb6>
 80077e2:	f108 0801 	add.w	r8, r8, #1
 80077e6:	e7ec      	b.n	80077c2 <_printf_float+0x33e>
 80077e8:	4613      	mov	r3, r2
 80077ea:	4631      	mov	r1, r6
 80077ec:	4642      	mov	r2, r8
 80077ee:	4628      	mov	r0, r5
 80077f0:	47b8      	blx	r7
 80077f2:	3001      	adds	r0, #1
 80077f4:	d1c0      	bne.n	8007778 <_printf_float+0x2f4>
 80077f6:	e6a0      	b.n	800753a <_printf_float+0xb6>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f ae99 	beq.w	800753a <_printf_float+0xb6>
 8007808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800780a:	f10b 0b01 	add.w	fp, fp, #1
 800780e:	e7b9      	b.n	8007784 <_printf_float+0x300>
 8007810:	4631      	mov	r1, r6
 8007812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d1bf      	bne.n	800779e <_printf_float+0x31a>
 800781e:	e68c      	b.n	800753a <_printf_float+0xb6>
 8007820:	464b      	mov	r3, r9
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	eb08 020a 	add.w	r2, r8, sl
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	d1c2      	bne.n	80077b6 <_printf_float+0x332>
 8007830:	e683      	b.n	800753a <_printf_float+0xb6>
 8007832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007834:	2a01      	cmp	r2, #1
 8007836:	dc01      	bgt.n	800783c <_printf_float+0x3b8>
 8007838:	07db      	lsls	r3, r3, #31
 800783a:	d537      	bpl.n	80078ac <_printf_float+0x428>
 800783c:	2301      	movs	r3, #1
 800783e:	4642      	mov	r2, r8
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f ae77 	beq.w	800753a <_printf_float+0xb6>
 800784c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f ae6f 	beq.w	800753a <_printf_float+0xb6>
 800785c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	f7f9 f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8007868:	b9d8      	cbnz	r0, 80078a2 <_printf_float+0x41e>
 800786a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800786c:	f108 0201 	add.w	r2, r8, #1
 8007870:	3b01      	subs	r3, #1
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	d10e      	bne.n	800789a <_printf_float+0x416>
 800787c:	e65d      	b.n	800753a <_printf_float+0xb6>
 800787e:	2301      	movs	r3, #1
 8007880:	464a      	mov	r2, r9
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	f43f ae56 	beq.w	800753a <_printf_float+0xb6>
 800788e:	f108 0801 	add.w	r8, r8, #1
 8007892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007894:	3b01      	subs	r3, #1
 8007896:	4543      	cmp	r3, r8
 8007898:	dcf1      	bgt.n	800787e <_printf_float+0x3fa>
 800789a:	4653      	mov	r3, sl
 800789c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078a0:	e6e0      	b.n	8007664 <_printf_float+0x1e0>
 80078a2:	f04f 0800 	mov.w	r8, #0
 80078a6:	f104 091a 	add.w	r9, r4, #26
 80078aa:	e7f2      	b.n	8007892 <_printf_float+0x40e>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4642      	mov	r2, r8
 80078b0:	e7df      	b.n	8007872 <_printf_float+0x3ee>
 80078b2:	2301      	movs	r3, #1
 80078b4:	464a      	mov	r2, r9
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f ae3c 	beq.w	800753a <_printf_float+0xb6>
 80078c2:	f108 0801 	add.w	r8, r8, #1
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ca:	1a5b      	subs	r3, r3, r1
 80078cc:	4543      	cmp	r3, r8
 80078ce:	dcf0      	bgt.n	80078b2 <_printf_float+0x42e>
 80078d0:	e6fd      	b.n	80076ce <_printf_float+0x24a>
 80078d2:	f04f 0800 	mov.w	r8, #0
 80078d6:	f104 0919 	add.w	r9, r4, #25
 80078da:	e7f4      	b.n	80078c6 <_printf_float+0x442>

080078dc <_printf_common>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4616      	mov	r6, r2
 80078e2:	4699      	mov	r9, r3
 80078e4:	688a      	ldr	r2, [r1, #8]
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	4607      	mov	r7, r0
 80078ea:	4293      	cmp	r3, r2
 80078ec:	bfb8      	it	lt
 80078ee:	4613      	movlt	r3, r2
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f6:	460c      	mov	r4, r1
 80078f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078fc:	b10a      	cbz	r2, 8007902 <_printf_common+0x26>
 80078fe:	3301      	adds	r3, #1
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	0699      	lsls	r1, r3, #26
 8007906:	bf42      	ittt	mi
 8007908:	6833      	ldrmi	r3, [r6, #0]
 800790a:	3302      	addmi	r3, #2
 800790c:	6033      	strmi	r3, [r6, #0]
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	f015 0506 	ands.w	r5, r5, #6
 8007914:	d106      	bne.n	8007924 <_printf_common+0x48>
 8007916:	f104 0a19 	add.w	sl, r4, #25
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	6832      	ldr	r2, [r6, #0]
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc28      	bgt.n	8007976 <_printf_common+0x9a>
 8007924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007928:	1e13      	subs	r3, r2, #0
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	2301      	movne	r3, #1
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d42d      	bmi.n	8007990 <_printf_common+0xb4>
 8007934:	4649      	mov	r1, r9
 8007936:	4638      	mov	r0, r7
 8007938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d020      	beq.n	8007984 <_printf_common+0xa8>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	68e5      	ldr	r5, [r4, #12]
 8007946:	f003 0306 	and.w	r3, r3, #6
 800794a:	2b04      	cmp	r3, #4
 800794c:	bf18      	it	ne
 800794e:	2500      	movne	r5, #0
 8007950:	6832      	ldr	r2, [r6, #0]
 8007952:	f04f 0600 	mov.w	r6, #0
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	bf08      	it	eq
 800795a:	1aad      	subeq	r5, r5, r2
 800795c:	6922      	ldr	r2, [r4, #16]
 800795e:	bf08      	it	eq
 8007960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007964:	4293      	cmp	r3, r2
 8007966:	bfc4      	itt	gt
 8007968:	1a9b      	subgt	r3, r3, r2
 800796a:	18ed      	addgt	r5, r5, r3
 800796c:	341a      	adds	r4, #26
 800796e:	42b5      	cmp	r5, r6
 8007970:	d11a      	bne.n	80079a8 <_printf_common+0xcc>
 8007972:	2000      	movs	r0, #0
 8007974:	e008      	b.n	8007988 <_printf_common+0xac>
 8007976:	2301      	movs	r3, #1
 8007978:	4652      	mov	r2, sl
 800797a:	4649      	mov	r1, r9
 800797c:	4638      	mov	r0, r7
 800797e:	47c0      	blx	r8
 8007980:	3001      	adds	r0, #1
 8007982:	d103      	bne.n	800798c <_printf_common+0xb0>
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798c:	3501      	adds	r5, #1
 800798e:	e7c4      	b.n	800791a <_printf_common+0x3e>
 8007990:	2030      	movs	r0, #48	; 0x30
 8007992:	18e1      	adds	r1, r4, r3
 8007994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800799e:	4422      	add	r2, r4
 80079a0:	3302      	adds	r3, #2
 80079a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a6:	e7c5      	b.n	8007934 <_printf_common+0x58>
 80079a8:	2301      	movs	r3, #1
 80079aa:	4622      	mov	r2, r4
 80079ac:	4649      	mov	r1, r9
 80079ae:	4638      	mov	r0, r7
 80079b0:	47c0      	blx	r8
 80079b2:	3001      	adds	r0, #1
 80079b4:	d0e6      	beq.n	8007984 <_printf_common+0xa8>
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7d9      	b.n	800796e <_printf_common+0x92>
	...

080079bc <_printf_i>:
 80079bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	460c      	mov	r4, r1
 80079c2:	7e27      	ldrb	r7, [r4, #24]
 80079c4:	4691      	mov	r9, r2
 80079c6:	2f78      	cmp	r7, #120	; 0x78
 80079c8:	4680      	mov	r8, r0
 80079ca:	469a      	mov	sl, r3
 80079cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d2:	d807      	bhi.n	80079e4 <_printf_i+0x28>
 80079d4:	2f62      	cmp	r7, #98	; 0x62
 80079d6:	d80a      	bhi.n	80079ee <_printf_i+0x32>
 80079d8:	2f00      	cmp	r7, #0
 80079da:	f000 80d9 	beq.w	8007b90 <_printf_i+0x1d4>
 80079de:	2f58      	cmp	r7, #88	; 0x58
 80079e0:	f000 80a4 	beq.w	8007b2c <_printf_i+0x170>
 80079e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079ec:	e03a      	b.n	8007a64 <_printf_i+0xa8>
 80079ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079f2:	2b15      	cmp	r3, #21
 80079f4:	d8f6      	bhi.n	80079e4 <_printf_i+0x28>
 80079f6:	a001      	add	r0, pc, #4	; (adr r0, 80079fc <_printf_i+0x40>)
 80079f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	080079e5 	.word	0x080079e5
 8007a08:	080079e5 	.word	0x080079e5
 8007a0c:	080079e5 	.word	0x080079e5
 8007a10:	080079e5 	.word	0x080079e5
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	080079e5 	.word	0x080079e5
 8007a1c:	080079e5 	.word	0x080079e5
 8007a20:	080079e5 	.word	0x080079e5
 8007a24:	080079e5 	.word	0x080079e5
 8007a28:	08007b77 	.word	0x08007b77
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007b59 	.word	0x08007b59
 8007a34:	080079e5 	.word	0x080079e5
 8007a38:	080079e5 	.word	0x080079e5
 8007a3c:	08007b99 	.word	0x08007b99
 8007a40:	080079e5 	.word	0x080079e5
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	080079e5 	.word	0x080079e5
 8007a4c:	080079e5 	.word	0x080079e5
 8007a50:	08007b61 	.word	0x08007b61
 8007a54:	680b      	ldr	r3, [r1, #0]
 8007a56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a5a:	1d1a      	adds	r2, r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	600a      	str	r2, [r1, #0]
 8007a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0a4      	b.n	8007bb2 <_printf_i+0x1f6>
 8007a68:	6825      	ldr	r5, [r4, #0]
 8007a6a:	6808      	ldr	r0, [r1, #0]
 8007a6c:	062e      	lsls	r6, r5, #24
 8007a6e:	f100 0304 	add.w	r3, r0, #4
 8007a72:	d50a      	bpl.n	8007a8a <_printf_i+0xce>
 8007a74:	6805      	ldr	r5, [r0, #0]
 8007a76:	600b      	str	r3, [r1, #0]
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	da03      	bge.n	8007a84 <_printf_i+0xc8>
 8007a7c:	232d      	movs	r3, #45	; 0x2d
 8007a7e:	426d      	negs	r5, r5
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a84:	230a      	movs	r3, #10
 8007a86:	485e      	ldr	r0, [pc, #376]	; (8007c00 <_printf_i+0x244>)
 8007a88:	e019      	b.n	8007abe <_printf_i+0x102>
 8007a8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a8e:	6805      	ldr	r5, [r0, #0]
 8007a90:	600b      	str	r3, [r1, #0]
 8007a92:	bf18      	it	ne
 8007a94:	b22d      	sxthne	r5, r5
 8007a96:	e7ef      	b.n	8007a78 <_printf_i+0xbc>
 8007a98:	680b      	ldr	r3, [r1, #0]
 8007a9a:	6825      	ldr	r5, [r4, #0]
 8007a9c:	1d18      	adds	r0, r3, #4
 8007a9e:	6008      	str	r0, [r1, #0]
 8007aa0:	0628      	lsls	r0, r5, #24
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0xec>
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	e002      	b.n	8007aae <_printf_i+0xf2>
 8007aa8:	0669      	lsls	r1, r5, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0xe8>
 8007aac:	881d      	ldrh	r5, [r3, #0]
 8007aae:	2f6f      	cmp	r7, #111	; 0x6f
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2308      	moveq	r3, #8
 8007ab4:	230a      	movne	r3, #10
 8007ab6:	4852      	ldr	r0, [pc, #328]	; (8007c00 <_printf_i+0x244>)
 8007ab8:	2100      	movs	r1, #0
 8007aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007abe:	6866      	ldr	r6, [r4, #4]
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	bfa8      	it	ge
 8007ac4:	6821      	ldrge	r1, [r4, #0]
 8007ac6:	60a6      	str	r6, [r4, #8]
 8007ac8:	bfa4      	itt	ge
 8007aca:	f021 0104 	bicge.w	r1, r1, #4
 8007ace:	6021      	strge	r1, [r4, #0]
 8007ad0:	b90d      	cbnz	r5, 8007ad6 <_printf_i+0x11a>
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d04d      	beq.n	8007b72 <_printf_i+0x1b6>
 8007ad6:	4616      	mov	r6, r2
 8007ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007adc:	fb03 5711 	mls	r7, r3, r1, r5
 8007ae0:	5dc7      	ldrb	r7, [r0, r7]
 8007ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ae6:	462f      	mov	r7, r5
 8007ae8:	42bb      	cmp	r3, r7
 8007aea:	460d      	mov	r5, r1
 8007aec:	d9f4      	bls.n	8007ad8 <_printf_i+0x11c>
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d10b      	bne.n	8007b0a <_printf_i+0x14e>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	07df      	lsls	r7, r3, #31
 8007af6:	d508      	bpl.n	8007b0a <_printf_i+0x14e>
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	6861      	ldr	r1, [r4, #4]
 8007afc:	4299      	cmp	r1, r3
 8007afe:	bfde      	ittt	le
 8007b00:	2330      	movle	r3, #48	; 0x30
 8007b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b0a:	1b92      	subs	r2, r2, r6
 8007b0c:	6122      	str	r2, [r4, #16]
 8007b0e:	464b      	mov	r3, r9
 8007b10:	4621      	mov	r1, r4
 8007b12:	4640      	mov	r0, r8
 8007b14:	f8cd a000 	str.w	sl, [sp]
 8007b18:	aa03      	add	r2, sp, #12
 8007b1a:	f7ff fedf 	bl	80078dc <_printf_common>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d14c      	bne.n	8007bbc <_printf_i+0x200>
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
 8007b26:	b004      	add	sp, #16
 8007b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2c:	4834      	ldr	r0, [pc, #208]	; (8007c00 <_printf_i+0x244>)
 8007b2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b32:	680e      	ldr	r6, [r1, #0]
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b3a:	061f      	lsls	r7, r3, #24
 8007b3c:	600e      	str	r6, [r1, #0]
 8007b3e:	d514      	bpl.n	8007b6a <_printf_i+0x1ae>
 8007b40:	07d9      	lsls	r1, r3, #31
 8007b42:	bf44      	itt	mi
 8007b44:	f043 0320 	orrmi.w	r3, r3, #32
 8007b48:	6023      	strmi	r3, [r4, #0]
 8007b4a:	b91d      	cbnz	r5, 8007b54 <_printf_i+0x198>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f023 0320 	bic.w	r3, r3, #32
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	2310      	movs	r3, #16
 8007b56:	e7af      	b.n	8007ab8 <_printf_i+0xfc>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	f043 0320 	orr.w	r3, r3, #32
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	2378      	movs	r3, #120	; 0x78
 8007b62:	4828      	ldr	r0, [pc, #160]	; (8007c04 <_printf_i+0x248>)
 8007b64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b68:	e7e3      	b.n	8007b32 <_printf_i+0x176>
 8007b6a:	065e      	lsls	r6, r3, #25
 8007b6c:	bf48      	it	mi
 8007b6e:	b2ad      	uxthmi	r5, r5
 8007b70:	e7e6      	b.n	8007b40 <_printf_i+0x184>
 8007b72:	4616      	mov	r6, r2
 8007b74:	e7bb      	b.n	8007aee <_printf_i+0x132>
 8007b76:	680b      	ldr	r3, [r1, #0]
 8007b78:	6826      	ldr	r6, [r4, #0]
 8007b7a:	1d1d      	adds	r5, r3, #4
 8007b7c:	6960      	ldr	r0, [r4, #20]
 8007b7e:	600d      	str	r5, [r1, #0]
 8007b80:	0635      	lsls	r5, r6, #24
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	d501      	bpl.n	8007b8a <_printf_i+0x1ce>
 8007b86:	6018      	str	r0, [r3, #0]
 8007b88:	e002      	b.n	8007b90 <_printf_i+0x1d4>
 8007b8a:	0671      	lsls	r1, r6, #25
 8007b8c:	d5fb      	bpl.n	8007b86 <_printf_i+0x1ca>
 8007b8e:	8018      	strh	r0, [r3, #0]
 8007b90:	2300      	movs	r3, #0
 8007b92:	4616      	mov	r6, r2
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	e7ba      	b.n	8007b0e <_printf_i+0x152>
 8007b98:	680b      	ldr	r3, [r1, #0]
 8007b9a:	1d1a      	adds	r2, r3, #4
 8007b9c:	600a      	str	r2, [r1, #0]
 8007b9e:	681e      	ldr	r6, [r3, #0]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	6862      	ldr	r2, [r4, #4]
 8007ba6:	f001 fb0b 	bl	80091c0 <memchr>
 8007baa:	b108      	cbz	r0, 8007bb0 <_printf_i+0x1f4>
 8007bac:	1b80      	subs	r0, r0, r6
 8007bae:	6060      	str	r0, [r4, #4]
 8007bb0:	6863      	ldr	r3, [r4, #4]
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bba:	e7a8      	b.n	8007b0e <_printf_i+0x152>
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	47d0      	blx	sl
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d0ab      	beq.n	8007b22 <_printf_i+0x166>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	079b      	lsls	r3, r3, #30
 8007bce:	d413      	bmi.n	8007bf8 <_printf_i+0x23c>
 8007bd0:	68e0      	ldr	r0, [r4, #12]
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	4298      	cmp	r0, r3
 8007bd6:	bfb8      	it	lt
 8007bd8:	4618      	movlt	r0, r3
 8007bda:	e7a4      	b.n	8007b26 <_printf_i+0x16a>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	4632      	mov	r2, r6
 8007be0:	4649      	mov	r1, r9
 8007be2:	4640      	mov	r0, r8
 8007be4:	47d0      	blx	sl
 8007be6:	3001      	adds	r0, #1
 8007be8:	d09b      	beq.n	8007b22 <_printf_i+0x166>
 8007bea:	3501      	adds	r5, #1
 8007bec:	68e3      	ldr	r3, [r4, #12]
 8007bee:	9903      	ldr	r1, [sp, #12]
 8007bf0:	1a5b      	subs	r3, r3, r1
 8007bf2:	42ab      	cmp	r3, r5
 8007bf4:	dcf2      	bgt.n	8007bdc <_printf_i+0x220>
 8007bf6:	e7eb      	b.n	8007bd0 <_printf_i+0x214>
 8007bf8:	2500      	movs	r5, #0
 8007bfa:	f104 0619 	add.w	r6, r4, #25
 8007bfe:	e7f5      	b.n	8007bec <_printf_i+0x230>
 8007c00:	0800acb0 	.word	0x0800acb0
 8007c04:	0800acc1 	.word	0x0800acc1

08007c08 <iprintf>:
 8007c08:	b40f      	push	{r0, r1, r2, r3}
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <iprintf+0x2c>)
 8007c0c:	b513      	push	{r0, r1, r4, lr}
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	b124      	cbz	r4, 8007c1c <iprintf+0x14>
 8007c12:	69a3      	ldr	r3, [r4, #24]
 8007c14:	b913      	cbnz	r3, 8007c1c <iprintf+0x14>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f001 f9ae 	bl	8008f78 <__sinit>
 8007c1c:	ab05      	add	r3, sp, #20
 8007c1e:	4620      	mov	r0, r4
 8007c20:	9a04      	ldr	r2, [sp, #16]
 8007c22:	68a1      	ldr	r1, [r4, #8]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	f002 fa75 	bl	800a114 <_vfiprintf_r>
 8007c2a:	b002      	add	sp, #8
 8007c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c30:	b004      	add	sp, #16
 8007c32:	4770      	bx	lr
 8007c34:	20000020 	.word	0x20000020

08007c38 <_puts_r>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	460e      	mov	r6, r1
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	b118      	cbz	r0, 8007c48 <_puts_r+0x10>
 8007c40:	6983      	ldr	r3, [r0, #24]
 8007c42:	b90b      	cbnz	r3, 8007c48 <_puts_r+0x10>
 8007c44:	f001 f998 	bl	8008f78 <__sinit>
 8007c48:	69ab      	ldr	r3, [r5, #24]
 8007c4a:	68ac      	ldr	r4, [r5, #8]
 8007c4c:	b913      	cbnz	r3, 8007c54 <_puts_r+0x1c>
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f001 f992 	bl	8008f78 <__sinit>
 8007c54:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <_puts_r+0xd0>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d120      	bne.n	8007c9c <_puts_r+0x64>
 8007c5a:	686c      	ldr	r4, [r5, #4]
 8007c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c5e:	07db      	lsls	r3, r3, #31
 8007c60:	d405      	bmi.n	8007c6e <_puts_r+0x36>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	0598      	lsls	r0, r3, #22
 8007c66:	d402      	bmi.n	8007c6e <_puts_r+0x36>
 8007c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6a:	f001 fa28 	bl	80090be <__retarget_lock_acquire_recursive>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	0719      	lsls	r1, r3, #28
 8007c72:	d51d      	bpl.n	8007cb0 <_puts_r+0x78>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	b1db      	cbz	r3, 8007cb0 <_puts_r+0x78>
 8007c78:	3e01      	subs	r6, #1
 8007c7a:	68a3      	ldr	r3, [r4, #8]
 8007c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c80:	3b01      	subs	r3, #1
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	bb39      	cbnz	r1, 8007cd6 <_puts_r+0x9e>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da38      	bge.n	8007cfc <_puts_r+0xc4>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	210a      	movs	r1, #10
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f8f8 	bl	8007e84 <__swbuf_r>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d011      	beq.n	8007cbc <_puts_r+0x84>
 8007c98:	250a      	movs	r5, #10
 8007c9a:	e011      	b.n	8007cc0 <_puts_r+0x88>
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <_puts_r+0xd4>)
 8007c9e:	429c      	cmp	r4, r3
 8007ca0:	d101      	bne.n	8007ca6 <_puts_r+0x6e>
 8007ca2:	68ac      	ldr	r4, [r5, #8]
 8007ca4:	e7da      	b.n	8007c5c <_puts_r+0x24>
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <_puts_r+0xd8>)
 8007ca8:	429c      	cmp	r4, r3
 8007caa:	bf08      	it	eq
 8007cac:	68ec      	ldreq	r4, [r5, #12]
 8007cae:	e7d5      	b.n	8007c5c <_puts_r+0x24>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f94a 	bl	8007f4c <__swsetup_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0dd      	beq.n	8007c78 <_puts_r+0x40>
 8007cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8007cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	d405      	bmi.n	8007cd2 <_puts_r+0x9a>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	059b      	lsls	r3, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_puts_r+0x9a>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cce:	f001 f9f7 	bl	80090c0 <__retarget_lock_release_recursive>
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da04      	bge.n	8007ce4 <_puts_r+0xac>
 8007cda:	69a2      	ldr	r2, [r4, #24]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	dc06      	bgt.n	8007cee <_puts_r+0xb6>
 8007ce0:	290a      	cmp	r1, #10
 8007ce2:	d004      	beq.n	8007cee <_puts_r+0xb6>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	6022      	str	r2, [r4, #0]
 8007cea:	7019      	strb	r1, [r3, #0]
 8007cec:	e7c5      	b.n	8007c7a <_puts_r+0x42>
 8007cee:	4622      	mov	r2, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f8c7 	bl	8007e84 <__swbuf_r>
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d1bf      	bne.n	8007c7a <_puts_r+0x42>
 8007cfa:	e7df      	b.n	8007cbc <_puts_r+0x84>
 8007cfc:	250a      	movs	r5, #10
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	701d      	strb	r5, [r3, #0]
 8007d06:	e7db      	b.n	8007cc0 <_puts_r+0x88>
 8007d08:	0800ad88 	.word	0x0800ad88
 8007d0c:	0800ada8 	.word	0x0800ada8
 8007d10:	0800ad68 	.word	0x0800ad68

08007d14 <puts>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <puts+0xc>)
 8007d16:	4601      	mov	r1, r0
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	f7ff bf8d 	b.w	8007c38 <_puts_r>
 8007d1e:	bf00      	nop
 8007d20:	20000020 	.word	0x20000020

08007d24 <siprintf>:
 8007d24:	b40e      	push	{r1, r2, r3}
 8007d26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d2a:	b500      	push	{lr}
 8007d2c:	b09c      	sub	sp, #112	; 0x70
 8007d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d30:	9002      	str	r0, [sp, #8]
 8007d32:	9006      	str	r0, [sp, #24]
 8007d34:	9107      	str	r1, [sp, #28]
 8007d36:	9104      	str	r1, [sp, #16]
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <siprintf+0x38>)
 8007d3a:	4909      	ldr	r1, [pc, #36]	; (8007d60 <siprintf+0x3c>)
 8007d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d40:	9105      	str	r1, [sp, #20]
 8007d42:	6800      	ldr	r0, [r0, #0]
 8007d44:	a902      	add	r1, sp, #8
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f001 fee8 	bl	8009b1c <_svfiprintf_r>
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	b01c      	add	sp, #112	; 0x70
 8007d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d58:	b003      	add	sp, #12
 8007d5a:	4770      	bx	lr
 8007d5c:	20000020 	.word	0x20000020
 8007d60:	ffff0208 	.word	0xffff0208

08007d64 <siscanf>:
 8007d64:	b40e      	push	{r1, r2, r3}
 8007d66:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007d6a:	b530      	push	{r4, r5, lr}
 8007d6c:	b09c      	sub	sp, #112	; 0x70
 8007d6e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007d70:	f854 5b04 	ldr.w	r5, [r4], #4
 8007d74:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	f7f8 f9e8 	bl	8000150 <strlen>
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <siscanf+0x4c>)
 8007d82:	9003      	str	r0, [sp, #12]
 8007d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d86:	2300      	movs	r3, #0
 8007d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d8a:	9314      	str	r3, [sp, #80]	; 0x50
 8007d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d90:	9007      	str	r0, [sp, #28]
 8007d92:	4808      	ldr	r0, [pc, #32]	; (8007db4 <siscanf+0x50>)
 8007d94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d98:	462a      	mov	r2, r5
 8007d9a:	4623      	mov	r3, r4
 8007d9c:	a902      	add	r1, sp, #8
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	9401      	str	r4, [sp, #4]
 8007da2:	f002 f815 	bl	8009dd0 <__ssvfiscanf_r>
 8007da6:	b01c      	add	sp, #112	; 0x70
 8007da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dac:	b003      	add	sp, #12
 8007dae:	4770      	bx	lr
 8007db0:	08007ddb 	.word	0x08007ddb
 8007db4:	20000020 	.word	0x20000020

08007db8 <__sread>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	460c      	mov	r4, r1
 8007dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc0:	f002 fc22 	bl	800a608 <_read_r>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	bfab      	itete	ge
 8007dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dca:	89a3      	ldrhlt	r3, [r4, #12]
 8007dcc:	181b      	addge	r3, r3, r0
 8007dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dd2:	bfac      	ite	ge
 8007dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dd6:	81a3      	strhlt	r3, [r4, #12]
 8007dd8:	bd10      	pop	{r4, pc}

08007dda <__seofread>:
 8007dda:	2000      	movs	r0, #0
 8007ddc:	4770      	bx	lr

08007dde <__swrite>:
 8007dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	461f      	mov	r7, r3
 8007de4:	898b      	ldrh	r3, [r1, #12]
 8007de6:	4605      	mov	r5, r0
 8007de8:	05db      	lsls	r3, r3, #23
 8007dea:	460c      	mov	r4, r1
 8007dec:	4616      	mov	r6, r2
 8007dee:	d505      	bpl.n	8007dfc <__swrite+0x1e>
 8007df0:	2302      	movs	r3, #2
 8007df2:	2200      	movs	r2, #0
 8007df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df8:	f001 f964 	bl	80090c4 <_lseek_r>
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	4632      	mov	r2, r6
 8007e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	4628      	mov	r0, r5
 8007e08:	463b      	mov	r3, r7
 8007e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e12:	f000 b889 	b.w	8007f28 <_write_r>

08007e16 <__sseek>:
 8007e16:	b510      	push	{r4, lr}
 8007e18:	460c      	mov	r4, r1
 8007e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1e:	f001 f951 	bl	80090c4 <_lseek_r>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	bf15      	itete	ne
 8007e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e32:	81a3      	strheq	r3, [r4, #12]
 8007e34:	bf18      	it	ne
 8007e36:	81a3      	strhne	r3, [r4, #12]
 8007e38:	bd10      	pop	{r4, pc}

08007e3a <__sclose>:
 8007e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3e:	f000 b8f3 	b.w	8008028 <_close_r>

08007e42 <strcat>:
 8007e42:	4602      	mov	r2, r0
 8007e44:	b510      	push	{r4, lr}
 8007e46:	7814      	ldrb	r4, [r2, #0]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	2c00      	cmp	r4, #0
 8007e4e:	d1fa      	bne.n	8007e46 <strcat+0x4>
 8007e50:	3b01      	subs	r3, #1
 8007e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	d1f9      	bne.n	8007e52 <strcat+0x10>
 8007e5e:	bd10      	pop	{r4, pc}

08007e60 <strncmp>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	b16a      	cbz	r2, 8007e80 <strncmp+0x20>
 8007e64:	3901      	subs	r1, #1
 8007e66:	1884      	adds	r4, r0, r2
 8007e68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007e6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d103      	bne.n	8007e7c <strncmp+0x1c>
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d001      	beq.n	8007e7c <strncmp+0x1c>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f5      	bne.n	8007e68 <strncmp+0x8>
 8007e7c:	1a98      	subs	r0, r3, r2
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	4610      	mov	r0, r2
 8007e82:	e7fc      	b.n	8007e7e <strncmp+0x1e>

08007e84 <__swbuf_r>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	460e      	mov	r6, r1
 8007e88:	4614      	mov	r4, r2
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	b118      	cbz	r0, 8007e96 <__swbuf_r+0x12>
 8007e8e:	6983      	ldr	r3, [r0, #24]
 8007e90:	b90b      	cbnz	r3, 8007e96 <__swbuf_r+0x12>
 8007e92:	f001 f871 	bl	8008f78 <__sinit>
 8007e96:	4b21      	ldr	r3, [pc, #132]	; (8007f1c <__swbuf_r+0x98>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d12b      	bne.n	8007ef4 <__swbuf_r+0x70>
 8007e9c:	686c      	ldr	r4, [r5, #4]
 8007e9e:	69a3      	ldr	r3, [r4, #24]
 8007ea0:	60a3      	str	r3, [r4, #8]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	071a      	lsls	r2, r3, #28
 8007ea6:	d52f      	bpl.n	8007f08 <__swbuf_r+0x84>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	b36b      	cbz	r3, 8007f08 <__swbuf_r+0x84>
 8007eac:	6923      	ldr	r3, [r4, #16]
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	b2f6      	uxtb	r6, r6
 8007eb2:	1ac0      	subs	r0, r0, r3
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	4637      	mov	r7, r6
 8007eb8:	4283      	cmp	r3, r0
 8007eba:	dc04      	bgt.n	8007ec6 <__swbuf_r+0x42>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 ffc6 	bl	8008e50 <_fflush_r>
 8007ec4:	bb30      	cbnz	r0, 8007f14 <__swbuf_r+0x90>
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	3001      	adds	r0, #1
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	6022      	str	r2, [r4, #0]
 8007ed4:	701e      	strb	r6, [r3, #0]
 8007ed6:	6963      	ldr	r3, [r4, #20]
 8007ed8:	4283      	cmp	r3, r0
 8007eda:	d004      	beq.n	8007ee6 <__swbuf_r+0x62>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	07db      	lsls	r3, r3, #31
 8007ee0:	d506      	bpl.n	8007ef0 <__swbuf_r+0x6c>
 8007ee2:	2e0a      	cmp	r6, #10
 8007ee4:	d104      	bne.n	8007ef0 <__swbuf_r+0x6c>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 ffb1 	bl	8008e50 <_fflush_r>
 8007eee:	b988      	cbnz	r0, 8007f14 <__swbuf_r+0x90>
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <__swbuf_r+0x9c>)
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	d101      	bne.n	8007efe <__swbuf_r+0x7a>
 8007efa:	68ac      	ldr	r4, [r5, #8]
 8007efc:	e7cf      	b.n	8007e9e <__swbuf_r+0x1a>
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <__swbuf_r+0xa0>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	bf08      	it	eq
 8007f04:	68ec      	ldreq	r4, [r5, #12]
 8007f06:	e7ca      	b.n	8007e9e <__swbuf_r+0x1a>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 f81e 	bl	8007f4c <__swsetup_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0cb      	beq.n	8007eac <__swbuf_r+0x28>
 8007f14:	f04f 37ff 	mov.w	r7, #4294967295
 8007f18:	e7ea      	b.n	8007ef0 <__swbuf_r+0x6c>
 8007f1a:	bf00      	nop
 8007f1c:	0800ad88 	.word	0x0800ad88
 8007f20:	0800ada8 	.word	0x0800ada8
 8007f24:	0800ad68 	.word	0x0800ad68

08007f28 <_write_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	4611      	mov	r1, r2
 8007f30:	2200      	movs	r2, #0
 8007f32:	4d05      	ldr	r5, [pc, #20]	; (8007f48 <_write_r+0x20>)
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7fa fb16 	bl	8002568 <_write>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_write_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_write_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	200007d4 	.word	0x200007d4

08007f4c <__swsetup_r>:
 8007f4c:	4b32      	ldr	r3, [pc, #200]	; (8008018 <__swsetup_r+0xcc>)
 8007f4e:	b570      	push	{r4, r5, r6, lr}
 8007f50:	681d      	ldr	r5, [r3, #0]
 8007f52:	4606      	mov	r6, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	b125      	cbz	r5, 8007f62 <__swsetup_r+0x16>
 8007f58:	69ab      	ldr	r3, [r5, #24]
 8007f5a:	b913      	cbnz	r3, 8007f62 <__swsetup_r+0x16>
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f001 f80b 	bl	8008f78 <__sinit>
 8007f62:	4b2e      	ldr	r3, [pc, #184]	; (800801c <__swsetup_r+0xd0>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d10f      	bne.n	8007f88 <__swsetup_r+0x3c>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f70:	0719      	lsls	r1, r3, #28
 8007f72:	d42c      	bmi.n	8007fce <__swsetup_r+0x82>
 8007f74:	06dd      	lsls	r5, r3, #27
 8007f76:	d411      	bmi.n	8007f9c <__swsetup_r+0x50>
 8007f78:	2309      	movs	r3, #9
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e03e      	b.n	8008006 <__swsetup_r+0xba>
 8007f88:	4b25      	ldr	r3, [pc, #148]	; (8008020 <__swsetup_r+0xd4>)
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	d101      	bne.n	8007f92 <__swsetup_r+0x46>
 8007f8e:	68ac      	ldr	r4, [r5, #8]
 8007f90:	e7eb      	b.n	8007f6a <__swsetup_r+0x1e>
 8007f92:	4b24      	ldr	r3, [pc, #144]	; (8008024 <__swsetup_r+0xd8>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	bf08      	it	eq
 8007f98:	68ec      	ldreq	r4, [r5, #12]
 8007f9a:	e7e6      	b.n	8007f6a <__swsetup_r+0x1e>
 8007f9c:	0758      	lsls	r0, r3, #29
 8007f9e:	d512      	bpl.n	8007fc6 <__swsetup_r+0x7a>
 8007fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa2:	b141      	cbz	r1, 8007fb6 <__swsetup_r+0x6a>
 8007fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa8:	4299      	cmp	r1, r3
 8007faa:	d002      	beq.n	8007fb2 <__swsetup_r+0x66>
 8007fac:	4630      	mov	r0, r6
 8007fae:	f001 fcb3 	bl	8009918 <_free_r>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f043 0308 	orr.w	r3, r3, #8
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	b94b      	cbnz	r3, 8007fe6 <__swsetup_r+0x9a>
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fdc:	d003      	beq.n	8007fe6 <__swsetup_r+0x9a>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f001 f8a5 	bl	8009130 <__smakebuf_r>
 8007fe6:	89a0      	ldrh	r0, [r4, #12]
 8007fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fec:	f010 0301 	ands.w	r3, r0, #1
 8007ff0:	d00a      	beq.n	8008008 <__swsetup_r+0xbc>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	6963      	ldr	r3, [r4, #20]
 8007ff8:	425b      	negs	r3, r3
 8007ffa:	61a3      	str	r3, [r4, #24]
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	b943      	cbnz	r3, 8008012 <__swsetup_r+0xc6>
 8008000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008004:	d1ba      	bne.n	8007f7c <__swsetup_r+0x30>
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	0781      	lsls	r1, r0, #30
 800800a:	bf58      	it	pl
 800800c:	6963      	ldrpl	r3, [r4, #20]
 800800e:	60a3      	str	r3, [r4, #8]
 8008010:	e7f4      	b.n	8007ffc <__swsetup_r+0xb0>
 8008012:	2000      	movs	r0, #0
 8008014:	e7f7      	b.n	8008006 <__swsetup_r+0xba>
 8008016:	bf00      	nop
 8008018:	20000020 	.word	0x20000020
 800801c:	0800ad88 	.word	0x0800ad88
 8008020:	0800ada8 	.word	0x0800ada8
 8008024:	0800ad68 	.word	0x0800ad68

08008028 <_close_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	2300      	movs	r3, #0
 800802c:	4d05      	ldr	r5, [pc, #20]	; (8008044 <_close_r+0x1c>)
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7fa fab4 	bl	80025a0 <_close>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_close_r+0x1a>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_close_r+0x1a>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	200007d4 	.word	0x200007d4

08008048 <quorem>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	690c      	ldr	r4, [r1, #16]
 8008050:	4607      	mov	r7, r0
 8008052:	42a3      	cmp	r3, r4
 8008054:	f2c0 8083 	blt.w	800815e <quorem+0x116>
 8008058:	3c01      	subs	r4, #1
 800805a:	f100 0514 	add.w	r5, r0, #20
 800805e:	f101 0814 	add.w	r8, r1, #20
 8008062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800806c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008070:	3301      	adds	r3, #1
 8008072:	429a      	cmp	r2, r3
 8008074:	fbb2 f6f3 	udiv	r6, r2, r3
 8008078:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800807c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008080:	d332      	bcc.n	80080e8 <quorem+0xa0>
 8008082:	f04f 0e00 	mov.w	lr, #0
 8008086:	4640      	mov	r0, r8
 8008088:	46ac      	mov	ip, r5
 800808a:	46f2      	mov	sl, lr
 800808c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008090:	b293      	uxth	r3, r2
 8008092:	fb06 e303 	mla	r3, r6, r3, lr
 8008096:	0c12      	lsrs	r2, r2, #16
 8008098:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800809c:	fb06 e202 	mla	r2, r6, r2, lr
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	ebaa 0303 	sub.w	r3, sl, r3
 80080a6:	f8dc a000 	ldr.w	sl, [ip]
 80080aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ae:	fa1f fa8a 	uxth.w	sl, sl
 80080b2:	4453      	add	r3, sl
 80080b4:	fa1f fa82 	uxth.w	sl, r2
 80080b8:	f8dc 2000 	ldr.w	r2, [ip]
 80080bc:	4581      	cmp	r9, r0
 80080be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080d0:	f84c 3b04 	str.w	r3, [ip], #4
 80080d4:	d2da      	bcs.n	800808c <quorem+0x44>
 80080d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80080da:	b92b      	cbnz	r3, 80080e8 <quorem+0xa0>
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	3b04      	subs	r3, #4
 80080e0:	429d      	cmp	r5, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	d32f      	bcc.n	8008146 <quorem+0xfe>
 80080e6:	613c      	str	r4, [r7, #16]
 80080e8:	4638      	mov	r0, r7
 80080ea:	f001 faff 	bl	80096ec <__mcmp>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	db25      	blt.n	800813e <quorem+0xf6>
 80080f2:	4628      	mov	r0, r5
 80080f4:	f04f 0c00 	mov.w	ip, #0
 80080f8:	3601      	adds	r6, #1
 80080fa:	f858 1b04 	ldr.w	r1, [r8], #4
 80080fe:	f8d0 e000 	ldr.w	lr, [r0]
 8008102:	b28b      	uxth	r3, r1
 8008104:	ebac 0303 	sub.w	r3, ip, r3
 8008108:	fa1f f28e 	uxth.w	r2, lr
 800810c:	4413      	add	r3, r2
 800810e:	0c0a      	lsrs	r2, r1, #16
 8008110:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008118:	b29b      	uxth	r3, r3
 800811a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800811e:	45c1      	cmp	r9, r8
 8008120:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008124:	f840 3b04 	str.w	r3, [r0], #4
 8008128:	d2e7      	bcs.n	80080fa <quorem+0xb2>
 800812a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800812e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008132:	b922      	cbnz	r2, 800813e <quorem+0xf6>
 8008134:	3b04      	subs	r3, #4
 8008136:	429d      	cmp	r5, r3
 8008138:	461a      	mov	r2, r3
 800813a:	d30a      	bcc.n	8008152 <quorem+0x10a>
 800813c:	613c      	str	r4, [r7, #16]
 800813e:	4630      	mov	r0, r6
 8008140:	b003      	add	sp, #12
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	3b04      	subs	r3, #4
 800814a:	2a00      	cmp	r2, #0
 800814c:	d1cb      	bne.n	80080e6 <quorem+0x9e>
 800814e:	3c01      	subs	r4, #1
 8008150:	e7c6      	b.n	80080e0 <quorem+0x98>
 8008152:	6812      	ldr	r2, [r2, #0]
 8008154:	3b04      	subs	r3, #4
 8008156:	2a00      	cmp	r2, #0
 8008158:	d1f0      	bne.n	800813c <quorem+0xf4>
 800815a:	3c01      	subs	r4, #1
 800815c:	e7eb      	b.n	8008136 <quorem+0xee>
 800815e:	2000      	movs	r0, #0
 8008160:	e7ee      	b.n	8008140 <quorem+0xf8>
 8008162:	0000      	movs	r0, r0
 8008164:	0000      	movs	r0, r0
	...

08008168 <_dtoa_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	4616      	mov	r6, r2
 800816e:	461f      	mov	r7, r3
 8008170:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008172:	b099      	sub	sp, #100	; 0x64
 8008174:	4605      	mov	r5, r0
 8008176:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800817a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800817e:	b974      	cbnz	r4, 800819e <_dtoa_r+0x36>
 8008180:	2010      	movs	r0, #16
 8008182:	f001 f815 	bl	80091b0 <malloc>
 8008186:	4602      	mov	r2, r0
 8008188:	6268      	str	r0, [r5, #36]	; 0x24
 800818a:	b920      	cbnz	r0, 8008196 <_dtoa_r+0x2e>
 800818c:	21ea      	movs	r1, #234	; 0xea
 800818e:	4bae      	ldr	r3, [pc, #696]	; (8008448 <_dtoa_r+0x2e0>)
 8008190:	48ae      	ldr	r0, [pc, #696]	; (800844c <_dtoa_r+0x2e4>)
 8008192:	f002 fbd3 	bl	800a93c <__assert_func>
 8008196:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800819a:	6004      	str	r4, [r0, #0]
 800819c:	60c4      	str	r4, [r0, #12]
 800819e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	b151      	cbz	r1, 80081ba <_dtoa_r+0x52>
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	2301      	movs	r3, #1
 80081a8:	4093      	lsls	r3, r2
 80081aa:	604a      	str	r2, [r1, #4]
 80081ac:	608b      	str	r3, [r1, #8]
 80081ae:	4628      	mov	r0, r5
 80081b0:	f001 f862 	bl	8009278 <_Bfree>
 80081b4:	2200      	movs	r2, #0
 80081b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	1e3b      	subs	r3, r7, #0
 80081bc:	bfaf      	iteee	ge
 80081be:	2300      	movge	r3, #0
 80081c0:	2201      	movlt	r2, #1
 80081c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081c6:	9305      	strlt	r3, [sp, #20]
 80081c8:	bfa8      	it	ge
 80081ca:	f8c8 3000 	strge.w	r3, [r8]
 80081ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80081d2:	4b9f      	ldr	r3, [pc, #636]	; (8008450 <_dtoa_r+0x2e8>)
 80081d4:	bfb8      	it	lt
 80081d6:	f8c8 2000 	strlt.w	r2, [r8]
 80081da:	ea33 0309 	bics.w	r3, r3, r9
 80081de:	d119      	bne.n	8008214 <_dtoa_r+0xac>
 80081e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80081e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ec:	4333      	orrs	r3, r6
 80081ee:	f000 8580 	beq.w	8008cf2 <_dtoa_r+0xb8a>
 80081f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081f4:	b953      	cbnz	r3, 800820c <_dtoa_r+0xa4>
 80081f6:	4b97      	ldr	r3, [pc, #604]	; (8008454 <_dtoa_r+0x2ec>)
 80081f8:	e022      	b.n	8008240 <_dtoa_r+0xd8>
 80081fa:	4b97      	ldr	r3, [pc, #604]	; (8008458 <_dtoa_r+0x2f0>)
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	3308      	adds	r3, #8
 8008200:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	9808      	ldr	r0, [sp, #32]
 8008206:	b019      	add	sp, #100	; 0x64
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	4b91      	ldr	r3, [pc, #580]	; (8008454 <_dtoa_r+0x2ec>)
 800820e:	9308      	str	r3, [sp, #32]
 8008210:	3303      	adds	r3, #3
 8008212:	e7f5      	b.n	8008200 <_dtoa_r+0x98>
 8008214:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008218:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800821c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008220:	2200      	movs	r2, #0
 8008222:	2300      	movs	r3, #0
 8008224:	f7f8 fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8008228:	4680      	mov	r8, r0
 800822a:	b158      	cbz	r0, 8008244 <_dtoa_r+0xdc>
 800822c:	2301      	movs	r3, #1
 800822e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8559 	beq.w	8008cec <_dtoa_r+0xb84>
 800823a:	4888      	ldr	r0, [pc, #544]	; (800845c <_dtoa_r+0x2f4>)
 800823c:	6018      	str	r0, [r3, #0]
 800823e:	1e43      	subs	r3, r0, #1
 8008240:	9308      	str	r3, [sp, #32]
 8008242:	e7df      	b.n	8008204 <_dtoa_r+0x9c>
 8008244:	ab16      	add	r3, sp, #88	; 0x58
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	ab17      	add	r3, sp, #92	; 0x5c
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	4628      	mov	r0, r5
 800824e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008252:	f001 faf7 	bl	8009844 <__d2b>
 8008256:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800825a:	4682      	mov	sl, r0
 800825c:	2c00      	cmp	r4, #0
 800825e:	d07e      	beq.n	800835e <_dtoa_r+0x1f6>
 8008260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008266:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800826a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800826e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008272:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008276:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800827a:	2200      	movs	r2, #0
 800827c:	4b78      	ldr	r3, [pc, #480]	; (8008460 <_dtoa_r+0x2f8>)
 800827e:	f7f7 ff73 	bl	8000168 <__aeabi_dsub>
 8008282:	a36b      	add	r3, pc, #428	; (adr r3, 8008430 <_dtoa_r+0x2c8>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	a36a      	add	r3, pc, #424	; (adr r3, 8008438 <_dtoa_r+0x2d0>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f7 ff6b 	bl	800016c <__adddf3>
 8008296:	4606      	mov	r6, r0
 8008298:	4620      	mov	r0, r4
 800829a:	460f      	mov	r7, r1
 800829c:	f7f8 f8b2 	bl	8000404 <__aeabi_i2d>
 80082a0:	a367      	add	r3, pc, #412	; (adr r3, 8008440 <_dtoa_r+0x2d8>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f8 f917 	bl	80004d8 <__aeabi_dmul>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f7 ff5b 	bl	800016c <__adddf3>
 80082b6:	4606      	mov	r6, r0
 80082b8:	460f      	mov	r7, r1
 80082ba:	f7f8 fbbd 	bl	8000a38 <__aeabi_d2iz>
 80082be:	2200      	movs	r2, #0
 80082c0:	4681      	mov	r9, r0
 80082c2:	2300      	movs	r3, #0
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fb78 	bl	80009bc <__aeabi_dcmplt>
 80082cc:	b148      	cbz	r0, 80082e2 <_dtoa_r+0x17a>
 80082ce:	4648      	mov	r0, r9
 80082d0:	f7f8 f898 	bl	8000404 <__aeabi_i2d>
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	f7f8 fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80082dc:	b908      	cbnz	r0, 80082e2 <_dtoa_r+0x17a>
 80082de:	f109 39ff 	add.w	r9, r9, #4294967295
 80082e2:	f1b9 0f16 	cmp.w	r9, #22
 80082e6:	d857      	bhi.n	8008398 <_dtoa_r+0x230>
 80082e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ec:	4b5d      	ldr	r3, [pc, #372]	; (8008464 <_dtoa_r+0x2fc>)
 80082ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f8 fb61 	bl	80009bc <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d04e      	beq.n	800839c <_dtoa_r+0x234>
 80082fe:	2300      	movs	r3, #0
 8008300:	f109 39ff 	add.w	r9, r9, #4294967295
 8008304:	930f      	str	r3, [sp, #60]	; 0x3c
 8008306:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008308:	1b1c      	subs	r4, r3, r4
 800830a:	1e63      	subs	r3, r4, #1
 800830c:	9309      	str	r3, [sp, #36]	; 0x24
 800830e:	bf49      	itett	mi
 8008310:	f1c4 0301 	rsbmi	r3, r4, #1
 8008314:	2300      	movpl	r3, #0
 8008316:	9306      	strmi	r3, [sp, #24]
 8008318:	2300      	movmi	r3, #0
 800831a:	bf54      	ite	pl
 800831c:	9306      	strpl	r3, [sp, #24]
 800831e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008320:	f1b9 0f00 	cmp.w	r9, #0
 8008324:	db3c      	blt.n	80083a0 <_dtoa_r+0x238>
 8008326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008328:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800832c:	444b      	add	r3, r9
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	2300      	movs	r3, #0
 8008332:	930a      	str	r3, [sp, #40]	; 0x28
 8008334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008336:	2b09      	cmp	r3, #9
 8008338:	d86c      	bhi.n	8008414 <_dtoa_r+0x2ac>
 800833a:	2b05      	cmp	r3, #5
 800833c:	bfc4      	itt	gt
 800833e:	3b04      	subgt	r3, #4
 8008340:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008344:	bfc8      	it	gt
 8008346:	2400      	movgt	r4, #0
 8008348:	f1a3 0302 	sub.w	r3, r3, #2
 800834c:	bfd8      	it	le
 800834e:	2401      	movle	r4, #1
 8008350:	2b03      	cmp	r3, #3
 8008352:	f200 808b 	bhi.w	800846c <_dtoa_r+0x304>
 8008356:	e8df f003 	tbb	[pc, r3]
 800835a:	4f2d      	.short	0x4f2d
 800835c:	5b4d      	.short	0x5b4d
 800835e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008362:	441c      	add	r4, r3
 8008364:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008368:	2b20      	cmp	r3, #32
 800836a:	bfc3      	ittte	gt
 800836c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008370:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008374:	fa09 f303 	lslgt.w	r3, r9, r3
 8008378:	f1c3 0320 	rsble	r3, r3, #32
 800837c:	bfc6      	itte	gt
 800837e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008382:	4318      	orrgt	r0, r3
 8008384:	fa06 f003 	lslle.w	r0, r6, r3
 8008388:	f7f8 f82c 	bl	80003e4 <__aeabi_ui2d>
 800838c:	2301      	movs	r3, #1
 800838e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008392:	3c01      	subs	r4, #1
 8008394:	9313      	str	r3, [sp, #76]	; 0x4c
 8008396:	e770      	b.n	800827a <_dtoa_r+0x112>
 8008398:	2301      	movs	r3, #1
 800839a:	e7b3      	b.n	8008304 <_dtoa_r+0x19c>
 800839c:	900f      	str	r0, [sp, #60]	; 0x3c
 800839e:	e7b2      	b.n	8008306 <_dtoa_r+0x19e>
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	eba3 0309 	sub.w	r3, r3, r9
 80083a6:	9306      	str	r3, [sp, #24]
 80083a8:	f1c9 0300 	rsb	r3, r9, #0
 80083ac:	930a      	str	r3, [sp, #40]	; 0x28
 80083ae:	2300      	movs	r3, #0
 80083b0:	930e      	str	r3, [sp, #56]	; 0x38
 80083b2:	e7bf      	b.n	8008334 <_dtoa_r+0x1cc>
 80083b4:	2300      	movs	r3, #0
 80083b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80083b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dc59      	bgt.n	8008472 <_dtoa_r+0x30a>
 80083be:	f04f 0b01 	mov.w	fp, #1
 80083c2:	465b      	mov	r3, fp
 80083c4:	f8cd b008 	str.w	fp, [sp, #8]
 80083c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80083cc:	2200      	movs	r2, #0
 80083ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80083d0:	6042      	str	r2, [r0, #4]
 80083d2:	2204      	movs	r2, #4
 80083d4:	f102 0614 	add.w	r6, r2, #20
 80083d8:	429e      	cmp	r6, r3
 80083da:	6841      	ldr	r1, [r0, #4]
 80083dc:	d94f      	bls.n	800847e <_dtoa_r+0x316>
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 ff0a 	bl	80091f8 <_Balloc>
 80083e4:	9008      	str	r0, [sp, #32]
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d14d      	bne.n	8008486 <_dtoa_r+0x31e>
 80083ea:	4602      	mov	r2, r0
 80083ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083f0:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <_dtoa_r+0x300>)
 80083f2:	e6cd      	b.n	8008190 <_dtoa_r+0x28>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e7de      	b.n	80083b6 <_dtoa_r+0x24e>
 80083f8:	2300      	movs	r3, #0
 80083fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80083fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083fe:	eb09 0b03 	add.w	fp, r9, r3
 8008402:	f10b 0301 	add.w	r3, fp, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	bfb8      	it	lt
 800840c:	2301      	movlt	r3, #1
 800840e:	e7dd      	b.n	80083cc <_dtoa_r+0x264>
 8008410:	2301      	movs	r3, #1
 8008412:	e7f2      	b.n	80083fa <_dtoa_r+0x292>
 8008414:	2401      	movs	r4, #1
 8008416:	2300      	movs	r3, #0
 8008418:	940b      	str	r4, [sp, #44]	; 0x2c
 800841a:	9322      	str	r3, [sp, #136]	; 0x88
 800841c:	f04f 3bff 	mov.w	fp, #4294967295
 8008420:	2200      	movs	r2, #0
 8008422:	2312      	movs	r3, #18
 8008424:	f8cd b008 	str.w	fp, [sp, #8]
 8008428:	9223      	str	r2, [sp, #140]	; 0x8c
 800842a:	e7cf      	b.n	80083cc <_dtoa_r+0x264>
 800842c:	f3af 8000 	nop.w
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	0800acdf 	.word	0x0800acdf
 800844c:	0800acf6 	.word	0x0800acf6
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	0800acdb 	.word	0x0800acdb
 8008458:	0800acd2 	.word	0x0800acd2
 800845c:	0800af3a 	.word	0x0800af3a
 8008460:	3ff80000 	.word	0x3ff80000
 8008464:	0800ae50 	.word	0x0800ae50
 8008468:	0800ad55 	.word	0x0800ad55
 800846c:	2301      	movs	r3, #1
 800846e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008470:	e7d4      	b.n	800841c <_dtoa_r+0x2b4>
 8008472:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008476:	465b      	mov	r3, fp
 8008478:	f8cd b008 	str.w	fp, [sp, #8]
 800847c:	e7a6      	b.n	80083cc <_dtoa_r+0x264>
 800847e:	3101      	adds	r1, #1
 8008480:	6041      	str	r1, [r0, #4]
 8008482:	0052      	lsls	r2, r2, #1
 8008484:	e7a6      	b.n	80083d4 <_dtoa_r+0x26c>
 8008486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008488:	9a08      	ldr	r2, [sp, #32]
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	2b0e      	cmp	r3, #14
 8008490:	f200 80a8 	bhi.w	80085e4 <_dtoa_r+0x47c>
 8008494:	2c00      	cmp	r4, #0
 8008496:	f000 80a5 	beq.w	80085e4 <_dtoa_r+0x47c>
 800849a:	f1b9 0f00 	cmp.w	r9, #0
 800849e:	dd34      	ble.n	800850a <_dtoa_r+0x3a2>
 80084a0:	4a9a      	ldr	r2, [pc, #616]	; (800870c <_dtoa_r+0x5a4>)
 80084a2:	f009 030f 	and.w	r3, r9, #15
 80084a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80084ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80084ba:	d016      	beq.n	80084ea <_dtoa_r+0x382>
 80084bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084c0:	4b93      	ldr	r3, [pc, #588]	; (8008710 <_dtoa_r+0x5a8>)
 80084c2:	2703      	movs	r7, #3
 80084c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084c8:	f7f8 f930 	bl	800072c <__aeabi_ddiv>
 80084cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084d0:	f004 040f 	and.w	r4, r4, #15
 80084d4:	4e8e      	ldr	r6, [pc, #568]	; (8008710 <_dtoa_r+0x5a8>)
 80084d6:	b954      	cbnz	r4, 80084ee <_dtoa_r+0x386>
 80084d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084e0:	f7f8 f924 	bl	800072c <__aeabi_ddiv>
 80084e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084e8:	e029      	b.n	800853e <_dtoa_r+0x3d6>
 80084ea:	2702      	movs	r7, #2
 80084ec:	e7f2      	b.n	80084d4 <_dtoa_r+0x36c>
 80084ee:	07e1      	lsls	r1, r4, #31
 80084f0:	d508      	bpl.n	8008504 <_dtoa_r+0x39c>
 80084f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084fa:	f7f7 ffed 	bl	80004d8 <__aeabi_dmul>
 80084fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008502:	3701      	adds	r7, #1
 8008504:	1064      	asrs	r4, r4, #1
 8008506:	3608      	adds	r6, #8
 8008508:	e7e5      	b.n	80084d6 <_dtoa_r+0x36e>
 800850a:	f000 80a5 	beq.w	8008658 <_dtoa_r+0x4f0>
 800850e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008512:	f1c9 0400 	rsb	r4, r9, #0
 8008516:	4b7d      	ldr	r3, [pc, #500]	; (800870c <_dtoa_r+0x5a4>)
 8008518:	f004 020f 	and.w	r2, r4, #15
 800851c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 ffd8 	bl	80004d8 <__aeabi_dmul>
 8008528:	2702      	movs	r7, #2
 800852a:	2300      	movs	r3, #0
 800852c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008530:	4e77      	ldr	r6, [pc, #476]	; (8008710 <_dtoa_r+0x5a8>)
 8008532:	1124      	asrs	r4, r4, #4
 8008534:	2c00      	cmp	r4, #0
 8008536:	f040 8084 	bne.w	8008642 <_dtoa_r+0x4da>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1d2      	bne.n	80084e4 <_dtoa_r+0x37c>
 800853e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 808b 	beq.w	800865c <_dtoa_r+0x4f4>
 8008546:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800854a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800854e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008552:	2200      	movs	r2, #0
 8008554:	4b6f      	ldr	r3, [pc, #444]	; (8008714 <_dtoa_r+0x5ac>)
 8008556:	f7f8 fa31 	bl	80009bc <__aeabi_dcmplt>
 800855a:	2800      	cmp	r0, #0
 800855c:	d07e      	beq.n	800865c <_dtoa_r+0x4f4>
 800855e:	9b02      	ldr	r3, [sp, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d07b      	beq.n	800865c <_dtoa_r+0x4f4>
 8008564:	f1bb 0f00 	cmp.w	fp, #0
 8008568:	dd38      	ble.n	80085dc <_dtoa_r+0x474>
 800856a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800856e:	2200      	movs	r2, #0
 8008570:	4b69      	ldr	r3, [pc, #420]	; (8008718 <_dtoa_r+0x5b0>)
 8008572:	f7f7 ffb1 	bl	80004d8 <__aeabi_dmul>
 8008576:	465c      	mov	r4, fp
 8008578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008580:	3701      	adds	r7, #1
 8008582:	4638      	mov	r0, r7
 8008584:	f7f7 ff3e 	bl	8000404 <__aeabi_i2d>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	f7f7 ffa4 	bl	80004d8 <__aeabi_dmul>
 8008590:	2200      	movs	r2, #0
 8008592:	4b62      	ldr	r3, [pc, #392]	; (800871c <_dtoa_r+0x5b4>)
 8008594:	f7f7 fdea 	bl	800016c <__adddf3>
 8008598:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800859c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085a0:	9611      	str	r6, [sp, #68]	; 0x44
 80085a2:	2c00      	cmp	r4, #0
 80085a4:	d15d      	bne.n	8008662 <_dtoa_r+0x4fa>
 80085a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b5c      	ldr	r3, [pc, #368]	; (8008720 <_dtoa_r+0x5b8>)
 80085ae:	f7f7 fddb 	bl	8000168 <__aeabi_dsub>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085ba:	4633      	mov	r3, r6
 80085bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085be:	f7f8 fa1b 	bl	80009f8 <__aeabi_dcmpgt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f040 829e 	bne.w	8008b04 <_dtoa_r+0x99c>
 80085c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80085d2:	f7f8 f9f3 	bl	80009bc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f040 8292 	bne.w	8008b00 <_dtoa_r+0x998>
 80085dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80085e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f2c0 8153 	blt.w	8008892 <_dtoa_r+0x72a>
 80085ec:	f1b9 0f0e 	cmp.w	r9, #14
 80085f0:	f300 814f 	bgt.w	8008892 <_dtoa_r+0x72a>
 80085f4:	4b45      	ldr	r3, [pc, #276]	; (800870c <_dtoa_r+0x5a4>)
 80085f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80085fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008604:	2b00      	cmp	r3, #0
 8008606:	f280 80db 	bge.w	80087c0 <_dtoa_r+0x658>
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f300 80d7 	bgt.w	80087c0 <_dtoa_r+0x658>
 8008612:	f040 8274 	bne.w	8008afe <_dtoa_r+0x996>
 8008616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800861a:	2200      	movs	r2, #0
 800861c:	4b40      	ldr	r3, [pc, #256]	; (8008720 <_dtoa_r+0x5b8>)
 800861e:	f7f7 ff5b 	bl	80004d8 <__aeabi_dmul>
 8008622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008626:	f7f8 f9dd 	bl	80009e4 <__aeabi_dcmpge>
 800862a:	9c02      	ldr	r4, [sp, #8]
 800862c:	4626      	mov	r6, r4
 800862e:	2800      	cmp	r0, #0
 8008630:	f040 824a 	bne.w	8008ac8 <_dtoa_r+0x960>
 8008634:	2331      	movs	r3, #49	; 0x31
 8008636:	9f08      	ldr	r7, [sp, #32]
 8008638:	f109 0901 	add.w	r9, r9, #1
 800863c:	f807 3b01 	strb.w	r3, [r7], #1
 8008640:	e246      	b.n	8008ad0 <_dtoa_r+0x968>
 8008642:	07e2      	lsls	r2, r4, #31
 8008644:	d505      	bpl.n	8008652 <_dtoa_r+0x4ea>
 8008646:	e9d6 2300 	ldrd	r2, r3, [r6]
 800864a:	f7f7 ff45 	bl	80004d8 <__aeabi_dmul>
 800864e:	2301      	movs	r3, #1
 8008650:	3701      	adds	r7, #1
 8008652:	1064      	asrs	r4, r4, #1
 8008654:	3608      	adds	r6, #8
 8008656:	e76d      	b.n	8008534 <_dtoa_r+0x3cc>
 8008658:	2702      	movs	r7, #2
 800865a:	e770      	b.n	800853e <_dtoa_r+0x3d6>
 800865c:	46c8      	mov	r8, r9
 800865e:	9c02      	ldr	r4, [sp, #8]
 8008660:	e78f      	b.n	8008582 <_dtoa_r+0x41a>
 8008662:	9908      	ldr	r1, [sp, #32]
 8008664:	4b29      	ldr	r3, [pc, #164]	; (800870c <_dtoa_r+0x5a4>)
 8008666:	4421      	add	r1, r4
 8008668:	9112      	str	r1, [sp, #72]	; 0x48
 800866a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800866c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008670:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008674:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008678:	2900      	cmp	r1, #0
 800867a:	d055      	beq.n	8008728 <_dtoa_r+0x5c0>
 800867c:	2000      	movs	r0, #0
 800867e:	4929      	ldr	r1, [pc, #164]	; (8008724 <_dtoa_r+0x5bc>)
 8008680:	f7f8 f854 	bl	800072c <__aeabi_ddiv>
 8008684:	463b      	mov	r3, r7
 8008686:	4632      	mov	r2, r6
 8008688:	f7f7 fd6e 	bl	8000168 <__aeabi_dsub>
 800868c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008690:	9f08      	ldr	r7, [sp, #32]
 8008692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008696:	f7f8 f9cf 	bl	8000a38 <__aeabi_d2iz>
 800869a:	4604      	mov	r4, r0
 800869c:	f7f7 feb2 	bl	8000404 <__aeabi_i2d>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a8:	f7f7 fd5e 	bl	8000168 <__aeabi_dsub>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	3430      	adds	r4, #48	; 0x30
 80086b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086ba:	f807 4b01 	strb.w	r4, [r7], #1
 80086be:	f7f8 f97d 	bl	80009bc <__aeabi_dcmplt>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d174      	bne.n	80087b0 <_dtoa_r+0x648>
 80086c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ca:	2000      	movs	r0, #0
 80086cc:	4911      	ldr	r1, [pc, #68]	; (8008714 <_dtoa_r+0x5ac>)
 80086ce:	f7f7 fd4b 	bl	8000168 <__aeabi_dsub>
 80086d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086d6:	f7f8 f971 	bl	80009bc <__aeabi_dcmplt>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f040 80b6 	bne.w	800884c <_dtoa_r+0x6e4>
 80086e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e2:	429f      	cmp	r7, r3
 80086e4:	f43f af7a 	beq.w	80085dc <_dtoa_r+0x474>
 80086e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086ec:	2200      	movs	r2, #0
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <_dtoa_r+0x5b0>)
 80086f0:	f7f7 fef2 	bl	80004d8 <__aeabi_dmul>
 80086f4:	2200      	movs	r2, #0
 80086f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086fe:	4b06      	ldr	r3, [pc, #24]	; (8008718 <_dtoa_r+0x5b0>)
 8008700:	f7f7 feea 	bl	80004d8 <__aeabi_dmul>
 8008704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008708:	e7c3      	b.n	8008692 <_dtoa_r+0x52a>
 800870a:	bf00      	nop
 800870c:	0800ae50 	.word	0x0800ae50
 8008710:	0800ae28 	.word	0x0800ae28
 8008714:	3ff00000 	.word	0x3ff00000
 8008718:	40240000 	.word	0x40240000
 800871c:	401c0000 	.word	0x401c0000
 8008720:	40140000 	.word	0x40140000
 8008724:	3fe00000 	.word	0x3fe00000
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fed4 	bl	80004d8 <__aeabi_dmul>
 8008730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008732:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008736:	9c08      	ldr	r4, [sp, #32]
 8008738:	9314      	str	r3, [sp, #80]	; 0x50
 800873a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800873e:	f7f8 f97b 	bl	8000a38 <__aeabi_d2iz>
 8008742:	9015      	str	r0, [sp, #84]	; 0x54
 8008744:	f7f7 fe5e 	bl	8000404 <__aeabi_i2d>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008750:	f7f7 fd0a 	bl	8000168 <__aeabi_dsub>
 8008754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008756:	4606      	mov	r6, r0
 8008758:	3330      	adds	r3, #48	; 0x30
 800875a:	f804 3b01 	strb.w	r3, [r4], #1
 800875e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008760:	460f      	mov	r7, r1
 8008762:	429c      	cmp	r4, r3
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	d124      	bne.n	80087b4 <_dtoa_r+0x64c>
 800876a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800876e:	4bb3      	ldr	r3, [pc, #716]	; (8008a3c <_dtoa_r+0x8d4>)
 8008770:	f7f7 fcfc 	bl	800016c <__adddf3>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f8 f93c 	bl	80009f8 <__aeabi_dcmpgt>
 8008780:	2800      	cmp	r0, #0
 8008782:	d162      	bne.n	800884a <_dtoa_r+0x6e2>
 8008784:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008788:	2000      	movs	r0, #0
 800878a:	49ac      	ldr	r1, [pc, #688]	; (8008a3c <_dtoa_r+0x8d4>)
 800878c:	f7f7 fcec 	bl	8000168 <__aeabi_dsub>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f8 f910 	bl	80009bc <__aeabi_dcmplt>
 800879c:	2800      	cmp	r0, #0
 800879e:	f43f af1d 	beq.w	80085dc <_dtoa_r+0x474>
 80087a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80087a4:	1e7b      	subs	r3, r7, #1
 80087a6:	9314      	str	r3, [sp, #80]	; 0x50
 80087a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80087ac:	2b30      	cmp	r3, #48	; 0x30
 80087ae:	d0f8      	beq.n	80087a2 <_dtoa_r+0x63a>
 80087b0:	46c1      	mov	r9, r8
 80087b2:	e03a      	b.n	800882a <_dtoa_r+0x6c2>
 80087b4:	4ba2      	ldr	r3, [pc, #648]	; (8008a40 <_dtoa_r+0x8d8>)
 80087b6:	f7f7 fe8f 	bl	80004d8 <__aeabi_dmul>
 80087ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087be:	e7bc      	b.n	800873a <_dtoa_r+0x5d2>
 80087c0:	9f08      	ldr	r7, [sp, #32]
 80087c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ca:	f7f7 ffaf 	bl	800072c <__aeabi_ddiv>
 80087ce:	f7f8 f933 	bl	8000a38 <__aeabi_d2iz>
 80087d2:	4604      	mov	r4, r0
 80087d4:	f7f7 fe16 	bl	8000404 <__aeabi_i2d>
 80087d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087dc:	f7f7 fe7c 	bl	80004d8 <__aeabi_dmul>
 80087e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80087e4:	460b      	mov	r3, r1
 80087e6:	4602      	mov	r2, r0
 80087e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ec:	f7f7 fcbc 	bl	8000168 <__aeabi_dsub>
 80087f0:	f807 6b01 	strb.w	r6, [r7], #1
 80087f4:	9e08      	ldr	r6, [sp, #32]
 80087f6:	9b02      	ldr	r3, [sp, #8]
 80087f8:	1bbe      	subs	r6, r7, r6
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	d13a      	bne.n	8008874 <_dtoa_r+0x70c>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	f7f7 fcb3 	bl	800016c <__adddf3>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800880e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008812:	f7f8 f8f1 	bl	80009f8 <__aeabi_dcmpgt>
 8008816:	bb58      	cbnz	r0, 8008870 <_dtoa_r+0x708>
 8008818:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800881c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008820:	f7f8 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008824:	b108      	cbz	r0, 800882a <_dtoa_r+0x6c2>
 8008826:	07e1      	lsls	r1, r4, #31
 8008828:	d422      	bmi.n	8008870 <_dtoa_r+0x708>
 800882a:	4628      	mov	r0, r5
 800882c:	4651      	mov	r1, sl
 800882e:	f000 fd23 	bl	8009278 <_Bfree>
 8008832:	2300      	movs	r3, #0
 8008834:	703b      	strb	r3, [r7, #0]
 8008836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008838:	f109 0001 	add.w	r0, r9, #1
 800883c:	6018      	str	r0, [r3, #0]
 800883e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008840:	2b00      	cmp	r3, #0
 8008842:	f43f acdf 	beq.w	8008204 <_dtoa_r+0x9c>
 8008846:	601f      	str	r7, [r3, #0]
 8008848:	e4dc      	b.n	8008204 <_dtoa_r+0x9c>
 800884a:	4627      	mov	r7, r4
 800884c:	463b      	mov	r3, r7
 800884e:	461f      	mov	r7, r3
 8008850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008854:	2a39      	cmp	r2, #57	; 0x39
 8008856:	d107      	bne.n	8008868 <_dtoa_r+0x700>
 8008858:	9a08      	ldr	r2, [sp, #32]
 800885a:	429a      	cmp	r2, r3
 800885c:	d1f7      	bne.n	800884e <_dtoa_r+0x6e6>
 800885e:	2230      	movs	r2, #48	; 0x30
 8008860:	9908      	ldr	r1, [sp, #32]
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	700a      	strb	r2, [r1, #0]
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	3201      	adds	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e79f      	b.n	80087b0 <_dtoa_r+0x648>
 8008870:	46c8      	mov	r8, r9
 8008872:	e7eb      	b.n	800884c <_dtoa_r+0x6e4>
 8008874:	2200      	movs	r2, #0
 8008876:	4b72      	ldr	r3, [pc, #456]	; (8008a40 <_dtoa_r+0x8d8>)
 8008878:	f7f7 fe2e 	bl	80004d8 <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	f7f8 f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800888c:	2800      	cmp	r0, #0
 800888e:	d098      	beq.n	80087c2 <_dtoa_r+0x65a>
 8008890:	e7cb      	b.n	800882a <_dtoa_r+0x6c2>
 8008892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008894:	2a00      	cmp	r2, #0
 8008896:	f000 80cd 	beq.w	8008a34 <_dtoa_r+0x8cc>
 800889a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800889c:	2a01      	cmp	r2, #1
 800889e:	f300 80af 	bgt.w	8008a00 <_dtoa_r+0x898>
 80088a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	f000 80a7 	beq.w	80089f8 <_dtoa_r+0x890>
 80088aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088b0:	9f06      	ldr	r7, [sp, #24]
 80088b2:	9a06      	ldr	r2, [sp, #24]
 80088b4:	2101      	movs	r1, #1
 80088b6:	441a      	add	r2, r3
 80088b8:	9206      	str	r2, [sp, #24]
 80088ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088bc:	4628      	mov	r0, r5
 80088be:	441a      	add	r2, r3
 80088c0:	9209      	str	r2, [sp, #36]	; 0x24
 80088c2:	f000 fd93 	bl	80093ec <__i2b>
 80088c6:	4606      	mov	r6, r0
 80088c8:	2f00      	cmp	r7, #0
 80088ca:	dd0c      	ble.n	80088e6 <_dtoa_r+0x77e>
 80088cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd09      	ble.n	80088e6 <_dtoa_r+0x77e>
 80088d2:	42bb      	cmp	r3, r7
 80088d4:	bfa8      	it	ge
 80088d6:	463b      	movge	r3, r7
 80088d8:	9a06      	ldr	r2, [sp, #24]
 80088da:	1aff      	subs	r7, r7, r3
 80088dc:	1ad2      	subs	r2, r2, r3
 80088de:	9206      	str	r2, [sp, #24]
 80088e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	9309      	str	r3, [sp, #36]	; 0x24
 80088e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e8:	b1f3      	cbz	r3, 8008928 <_dtoa_r+0x7c0>
 80088ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80a9 	beq.w	8008a44 <_dtoa_r+0x8dc>
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	dd10      	ble.n	8008918 <_dtoa_r+0x7b0>
 80088f6:	4631      	mov	r1, r6
 80088f8:	4622      	mov	r2, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 fe30 	bl	8009560 <__pow5mult>
 8008900:	4652      	mov	r2, sl
 8008902:	4601      	mov	r1, r0
 8008904:	4606      	mov	r6, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f000 fd86 	bl	8009418 <__multiply>
 800890c:	4680      	mov	r8, r0
 800890e:	4651      	mov	r1, sl
 8008910:	4628      	mov	r0, r5
 8008912:	f000 fcb1 	bl	8009278 <_Bfree>
 8008916:	46c2      	mov	sl, r8
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	1b1a      	subs	r2, r3, r4
 800891c:	d004      	beq.n	8008928 <_dtoa_r+0x7c0>
 800891e:	4651      	mov	r1, sl
 8008920:	4628      	mov	r0, r5
 8008922:	f000 fe1d 	bl	8009560 <__pow5mult>
 8008926:	4682      	mov	sl, r0
 8008928:	2101      	movs	r1, #1
 800892a:	4628      	mov	r0, r5
 800892c:	f000 fd5e 	bl	80093ec <__i2b>
 8008930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008932:	4604      	mov	r4, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	f340 8087 	ble.w	8008a48 <_dtoa_r+0x8e0>
 800893a:	461a      	mov	r2, r3
 800893c:	4601      	mov	r1, r0
 800893e:	4628      	mov	r0, r5
 8008940:	f000 fe0e 	bl	8009560 <__pow5mult>
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	4604      	mov	r4, r0
 8008948:	2b01      	cmp	r3, #1
 800894a:	f340 8080 	ble.w	8008a4e <_dtoa_r+0x8e6>
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008958:	6918      	ldr	r0, [r3, #16]
 800895a:	f000 fcf9 	bl	8009350 <__hi0bits>
 800895e:	f1c0 0020 	rsb	r0, r0, #32
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	4418      	add	r0, r3
 8008966:	f010 001f 	ands.w	r0, r0, #31
 800896a:	f000 8092 	beq.w	8008a92 <_dtoa_r+0x92a>
 800896e:	f1c0 0320 	rsb	r3, r0, #32
 8008972:	2b04      	cmp	r3, #4
 8008974:	f340 808a 	ble.w	8008a8c <_dtoa_r+0x924>
 8008978:	f1c0 001c 	rsb	r0, r0, #28
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	4407      	add	r7, r0
 8008980:	4403      	add	r3, r0
 8008982:	9306      	str	r3, [sp, #24]
 8008984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008986:	4403      	add	r3, r0
 8008988:	9309      	str	r3, [sp, #36]	; 0x24
 800898a:	9b06      	ldr	r3, [sp, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	dd05      	ble.n	800899c <_dtoa_r+0x834>
 8008990:	4651      	mov	r1, sl
 8008992:	461a      	mov	r2, r3
 8008994:	4628      	mov	r0, r5
 8008996:	f000 fe3d 	bl	8009614 <__lshift>
 800899a:	4682      	mov	sl, r0
 800899c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dd05      	ble.n	80089ae <_dtoa_r+0x846>
 80089a2:	4621      	mov	r1, r4
 80089a4:	461a      	mov	r2, r3
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 fe34 	bl	8009614 <__lshift>
 80089ac:	4604      	mov	r4, r0
 80089ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d070      	beq.n	8008a96 <_dtoa_r+0x92e>
 80089b4:	4621      	mov	r1, r4
 80089b6:	4650      	mov	r0, sl
 80089b8:	f000 fe98 	bl	80096ec <__mcmp>
 80089bc:	2800      	cmp	r0, #0
 80089be:	da6a      	bge.n	8008a96 <_dtoa_r+0x92e>
 80089c0:	2300      	movs	r3, #0
 80089c2:	4651      	mov	r1, sl
 80089c4:	220a      	movs	r2, #10
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fc78 	bl	80092bc <__multadd>
 80089cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ce:	4682      	mov	sl, r0
 80089d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8193 	beq.w	8008d00 <_dtoa_r+0xb98>
 80089da:	4631      	mov	r1, r6
 80089dc:	2300      	movs	r3, #0
 80089de:	220a      	movs	r2, #10
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 fc6b 	bl	80092bc <__multadd>
 80089e6:	f1bb 0f00 	cmp.w	fp, #0
 80089ea:	4606      	mov	r6, r0
 80089ec:	f300 8093 	bgt.w	8008b16 <_dtoa_r+0x9ae>
 80089f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc57      	bgt.n	8008aa6 <_dtoa_r+0x93e>
 80089f6:	e08e      	b.n	8008b16 <_dtoa_r+0x9ae>
 80089f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089fe:	e756      	b.n	80088ae <_dtoa_r+0x746>
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	1e5c      	subs	r4, r3, #1
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	bfb7      	itett	lt
 8008a0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a0c:	1b1c      	subge	r4, r3, r4
 8008a0e:	1ae2      	sublt	r2, r4, r3
 8008a10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a12:	bfbe      	ittt	lt
 8008a14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a16:	189b      	addlt	r3, r3, r2
 8008a18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	bfb8      	it	lt
 8008a1e:	2400      	movlt	r4, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfbb      	ittet	lt
 8008a24:	9b06      	ldrlt	r3, [sp, #24]
 8008a26:	9a02      	ldrlt	r2, [sp, #8]
 8008a28:	9f06      	ldrge	r7, [sp, #24]
 8008a2a:	1a9f      	sublt	r7, r3, r2
 8008a2c:	bfac      	ite	ge
 8008a2e:	9b02      	ldrge	r3, [sp, #8]
 8008a30:	2300      	movlt	r3, #0
 8008a32:	e73e      	b.n	80088b2 <_dtoa_r+0x74a>
 8008a34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a36:	9f06      	ldr	r7, [sp, #24]
 8008a38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a3a:	e745      	b.n	80088c8 <_dtoa_r+0x760>
 8008a3c:	3fe00000 	.word	0x3fe00000
 8008a40:	40240000 	.word	0x40240000
 8008a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a46:	e76a      	b.n	800891e <_dtoa_r+0x7b6>
 8008a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	dc19      	bgt.n	8008a82 <_dtoa_r+0x91a>
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	b9bb      	cbnz	r3, 8008a82 <_dtoa_r+0x91a>
 8008a52:	9b05      	ldr	r3, [sp, #20]
 8008a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a58:	b99b      	cbnz	r3, 8008a82 <_dtoa_r+0x91a>
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a60:	0d1b      	lsrs	r3, r3, #20
 8008a62:	051b      	lsls	r3, r3, #20
 8008a64:	b183      	cbz	r3, 8008a88 <_dtoa_r+0x920>
 8008a66:	f04f 0801 	mov.w	r8, #1
 8008a6a:	9b06      	ldr	r3, [sp, #24]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	9306      	str	r3, [sp, #24]
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	3301      	adds	r3, #1
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f47f af6a 	bne.w	8008952 <_dtoa_r+0x7ea>
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e76f      	b.n	8008962 <_dtoa_r+0x7fa>
 8008a82:	f04f 0800 	mov.w	r8, #0
 8008a86:	e7f6      	b.n	8008a76 <_dtoa_r+0x90e>
 8008a88:	4698      	mov	r8, r3
 8008a8a:	e7f4      	b.n	8008a76 <_dtoa_r+0x90e>
 8008a8c:	f43f af7d 	beq.w	800898a <_dtoa_r+0x822>
 8008a90:	4618      	mov	r0, r3
 8008a92:	301c      	adds	r0, #28
 8008a94:	e772      	b.n	800897c <_dtoa_r+0x814>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc36      	bgt.n	8008b0a <_dtoa_r+0x9a2>
 8008a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dd33      	ble.n	8008b0a <_dtoa_r+0x9a2>
 8008aa2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008aa6:	f1bb 0f00 	cmp.w	fp, #0
 8008aaa:	d10d      	bne.n	8008ac8 <_dtoa_r+0x960>
 8008aac:	4621      	mov	r1, r4
 8008aae:	465b      	mov	r3, fp
 8008ab0:	2205      	movs	r2, #5
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 fc02 	bl	80092bc <__multadd>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4650      	mov	r0, sl
 8008abe:	f000 fe15 	bl	80096ec <__mcmp>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f73f adb6 	bgt.w	8008634 <_dtoa_r+0x4cc>
 8008ac8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008aca:	9f08      	ldr	r7, [sp, #32]
 8008acc:	ea6f 0903 	mvn.w	r9, r3
 8008ad0:	f04f 0800 	mov.w	r8, #0
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 fbce 	bl	8009278 <_Bfree>
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	f43f aea4 	beq.w	800882a <_dtoa_r+0x6c2>
 8008ae2:	f1b8 0f00 	cmp.w	r8, #0
 8008ae6:	d005      	beq.n	8008af4 <_dtoa_r+0x98c>
 8008ae8:	45b0      	cmp	r8, r6
 8008aea:	d003      	beq.n	8008af4 <_dtoa_r+0x98c>
 8008aec:	4641      	mov	r1, r8
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 fbc2 	bl	8009278 <_Bfree>
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 fbbe 	bl	8009278 <_Bfree>
 8008afc:	e695      	b.n	800882a <_dtoa_r+0x6c2>
 8008afe:	2400      	movs	r4, #0
 8008b00:	4626      	mov	r6, r4
 8008b02:	e7e1      	b.n	8008ac8 <_dtoa_r+0x960>
 8008b04:	46c1      	mov	r9, r8
 8008b06:	4626      	mov	r6, r4
 8008b08:	e594      	b.n	8008634 <_dtoa_r+0x4cc>
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 80fc 	beq.w	8008d0e <_dtoa_r+0xba6>
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	dd05      	ble.n	8008b26 <_dtoa_r+0x9be>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	463a      	mov	r2, r7
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 fd78 	bl	8009614 <__lshift>
 8008b24:	4606      	mov	r6, r0
 8008b26:	f1b8 0f00 	cmp.w	r8, #0
 8008b2a:	d05c      	beq.n	8008be6 <_dtoa_r+0xa7e>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	6871      	ldr	r1, [r6, #4]
 8008b30:	f000 fb62 	bl	80091f8 <_Balloc>
 8008b34:	4607      	mov	r7, r0
 8008b36:	b928      	cbnz	r0, 8008b44 <_dtoa_r+0x9dc>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b3e:	4b7e      	ldr	r3, [pc, #504]	; (8008d38 <_dtoa_r+0xbd0>)
 8008b40:	f7ff bb26 	b.w	8008190 <_dtoa_r+0x28>
 8008b44:	6932      	ldr	r2, [r6, #16]
 8008b46:	f106 010c 	add.w	r1, r6, #12
 8008b4a:	3202      	adds	r2, #2
 8008b4c:	0092      	lsls	r2, r2, #2
 8008b4e:	300c      	adds	r0, #12
 8008b50:	f000 fb44 	bl	80091dc <memcpy>
 8008b54:	2201      	movs	r2, #1
 8008b56:	4639      	mov	r1, r7
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 fd5b 	bl	8009614 <__lshift>
 8008b5e:	46b0      	mov	r8, r6
 8008b60:	4606      	mov	r6, r0
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	3301      	adds	r3, #1
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	9b08      	ldr	r3, [sp, #32]
 8008b6a:	445b      	add	r3, fp
 8008b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b80:	f7ff fa62 	bl	8008048 <quorem>
 8008b84:	4603      	mov	r3, r0
 8008b86:	4641      	mov	r1, r8
 8008b88:	3330      	adds	r3, #48	; 0x30
 8008b8a:	9004      	str	r0, [sp, #16]
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b90:	f000 fdac 	bl	80096ec <__mcmp>
 8008b94:	4632      	mov	r2, r6
 8008b96:	9006      	str	r0, [sp, #24]
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f000 fdc2 	bl	8009724 <__mdiff>
 8008ba0:	68c2      	ldr	r2, [r0, #12]
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba6:	bb02      	cbnz	r2, 8008bea <_dtoa_r+0xa82>
 8008ba8:	4601      	mov	r1, r0
 8008baa:	4650      	mov	r0, sl
 8008bac:	f000 fd9e 	bl	80096ec <__mcmp>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008bbc:	f000 fb5c 	bl	8009278 <_Bfree>
 8008bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bc4:	9f02      	ldr	r7, [sp, #8]
 8008bc6:	ea43 0102 	orr.w	r1, r3, r2
 8008bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd0:	d10d      	bne.n	8008bee <_dtoa_r+0xa86>
 8008bd2:	2b39      	cmp	r3, #57	; 0x39
 8008bd4:	d027      	beq.n	8008c26 <_dtoa_r+0xabe>
 8008bd6:	9a06      	ldr	r2, [sp, #24]
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	dd01      	ble.n	8008be0 <_dtoa_r+0xa78>
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	3331      	adds	r3, #49	; 0x31
 8008be0:	f88b 3000 	strb.w	r3, [fp]
 8008be4:	e776      	b.n	8008ad4 <_dtoa_r+0x96c>
 8008be6:	4630      	mov	r0, r6
 8008be8:	e7b9      	b.n	8008b5e <_dtoa_r+0x9f6>
 8008bea:	2201      	movs	r2, #1
 8008bec:	e7e2      	b.n	8008bb4 <_dtoa_r+0xa4c>
 8008bee:	9906      	ldr	r1, [sp, #24]
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	db04      	blt.n	8008bfe <_dtoa_r+0xa96>
 8008bf4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008bf6:	4301      	orrs	r1, r0
 8008bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bfa:	4301      	orrs	r1, r0
 8008bfc:	d120      	bne.n	8008c40 <_dtoa_r+0xad8>
 8008bfe:	2a00      	cmp	r2, #0
 8008c00:	ddee      	ble.n	8008be0 <_dtoa_r+0xa78>
 8008c02:	4651      	mov	r1, sl
 8008c04:	2201      	movs	r2, #1
 8008c06:	4628      	mov	r0, r5
 8008c08:	9302      	str	r3, [sp, #8]
 8008c0a:	f000 fd03 	bl	8009614 <__lshift>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4682      	mov	sl, r0
 8008c12:	f000 fd6b 	bl	80096ec <__mcmp>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	dc02      	bgt.n	8008c22 <_dtoa_r+0xaba>
 8008c1c:	d1e0      	bne.n	8008be0 <_dtoa_r+0xa78>
 8008c1e:	07da      	lsls	r2, r3, #31
 8008c20:	d5de      	bpl.n	8008be0 <_dtoa_r+0xa78>
 8008c22:	2b39      	cmp	r3, #57	; 0x39
 8008c24:	d1da      	bne.n	8008bdc <_dtoa_r+0xa74>
 8008c26:	2339      	movs	r3, #57	; 0x39
 8008c28:	f88b 3000 	strb.w	r3, [fp]
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	461f      	mov	r7, r3
 8008c30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	2a39      	cmp	r2, #57	; 0x39
 8008c38:	d050      	beq.n	8008cdc <_dtoa_r+0xb74>
 8008c3a:	3201      	adds	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e749      	b.n	8008ad4 <_dtoa_r+0x96c>
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	dd03      	ble.n	8008c4c <_dtoa_r+0xae4>
 8008c44:	2b39      	cmp	r3, #57	; 0x39
 8008c46:	d0ee      	beq.n	8008c26 <_dtoa_r+0xabe>
 8008c48:	3301      	adds	r3, #1
 8008c4a:	e7c9      	b.n	8008be0 <_dtoa_r+0xa78>
 8008c4c:	9a02      	ldr	r2, [sp, #8]
 8008c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c54:	428a      	cmp	r2, r1
 8008c56:	d02a      	beq.n	8008cae <_dtoa_r+0xb46>
 8008c58:	4651      	mov	r1, sl
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 fb2c 	bl	80092bc <__multadd>
 8008c64:	45b0      	cmp	r8, r6
 8008c66:	4682      	mov	sl, r0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	f04f 020a 	mov.w	r2, #10
 8008c70:	4641      	mov	r1, r8
 8008c72:	4628      	mov	r0, r5
 8008c74:	d107      	bne.n	8008c86 <_dtoa_r+0xb1e>
 8008c76:	f000 fb21 	bl	80092bc <__multadd>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	3301      	adds	r3, #1
 8008c82:	9302      	str	r3, [sp, #8]
 8008c84:	e777      	b.n	8008b76 <_dtoa_r+0xa0e>
 8008c86:	f000 fb19 	bl	80092bc <__multadd>
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	2300      	movs	r3, #0
 8008c90:	220a      	movs	r2, #10
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 fb12 	bl	80092bc <__multadd>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	e7f0      	b.n	8008c7e <_dtoa_r+0xb16>
 8008c9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ca0:	bfcc      	ite	gt
 8008ca2:	465f      	movgt	r7, fp
 8008ca4:	2701      	movle	r7, #1
 8008ca6:	f04f 0800 	mov.w	r8, #0
 8008caa:	9a08      	ldr	r2, [sp, #32]
 8008cac:	4417      	add	r7, r2
 8008cae:	4651      	mov	r1, sl
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	f000 fcad 	bl	8009614 <__lshift>
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	f000 fd15 	bl	80096ec <__mcmp>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	dcb2      	bgt.n	8008c2c <_dtoa_r+0xac4>
 8008cc6:	d102      	bne.n	8008cce <_dtoa_r+0xb66>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	07db      	lsls	r3, r3, #31
 8008ccc:	d4ae      	bmi.n	8008c2c <_dtoa_r+0xac4>
 8008cce:	463b      	mov	r3, r7
 8008cd0:	461f      	mov	r7, r3
 8008cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cd6:	2a30      	cmp	r2, #48	; 0x30
 8008cd8:	d0fa      	beq.n	8008cd0 <_dtoa_r+0xb68>
 8008cda:	e6fb      	b.n	8008ad4 <_dtoa_r+0x96c>
 8008cdc:	9a08      	ldr	r2, [sp, #32]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d1a5      	bne.n	8008c2e <_dtoa_r+0xac6>
 8008ce2:	2331      	movs	r3, #49	; 0x31
 8008ce4:	f109 0901 	add.w	r9, r9, #1
 8008ce8:	7013      	strb	r3, [r2, #0]
 8008cea:	e6f3      	b.n	8008ad4 <_dtoa_r+0x96c>
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <_dtoa_r+0xbd4>)
 8008cee:	f7ff baa7 	b.w	8008240 <_dtoa_r+0xd8>
 8008cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f aa80 	bne.w	80081fa <_dtoa_r+0x92>
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <_dtoa_r+0xbd8>)
 8008cfc:	f7ff baa0 	b.w	8008240 <_dtoa_r+0xd8>
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	dc03      	bgt.n	8008d0e <_dtoa_r+0xba6>
 8008d06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f73f aecc 	bgt.w	8008aa6 <_dtoa_r+0x93e>
 8008d0e:	9f08      	ldr	r7, [sp, #32]
 8008d10:	4621      	mov	r1, r4
 8008d12:	4650      	mov	r0, sl
 8008d14:	f7ff f998 	bl	8008048 <quorem>
 8008d18:	9a08      	ldr	r2, [sp, #32]
 8008d1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d1e:	f807 3b01 	strb.w	r3, [r7], #1
 8008d22:	1aba      	subs	r2, r7, r2
 8008d24:	4593      	cmp	fp, r2
 8008d26:	ddb9      	ble.n	8008c9c <_dtoa_r+0xb34>
 8008d28:	4651      	mov	r1, sl
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 fac4 	bl	80092bc <__multadd>
 8008d34:	4682      	mov	sl, r0
 8008d36:	e7eb      	b.n	8008d10 <_dtoa_r+0xba8>
 8008d38:	0800ad55 	.word	0x0800ad55
 8008d3c:	0800af39 	.word	0x0800af39
 8008d40:	0800acd2 	.word	0x0800acd2

08008d44 <__sflush_r>:
 8008d44:	898a      	ldrh	r2, [r1, #12]
 8008d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	0710      	lsls	r0, r2, #28
 8008d4e:	460c      	mov	r4, r1
 8008d50:	d458      	bmi.n	8008e04 <__sflush_r+0xc0>
 8008d52:	684b      	ldr	r3, [r1, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc05      	bgt.n	8008d64 <__sflush_r+0x20>
 8008d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dc02      	bgt.n	8008d64 <__sflush_r+0x20>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d0f9      	beq.n	8008d5e <__sflush_r+0x1a>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d70:	682f      	ldr	r7, [r5, #0]
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	d032      	beq.n	8008ddc <__sflush_r+0x98>
 8008d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	075a      	lsls	r2, r3, #29
 8008d7c:	d505      	bpl.n	8008d8a <__sflush_r+0x46>
 8008d7e:	6863      	ldr	r3, [r4, #4]
 8008d80:	1ac0      	subs	r0, r0, r3
 8008d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d84:	b10b      	cbz	r3, 8008d8a <__sflush_r+0x46>
 8008d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d88:	1ac0      	subs	r0, r0, r3
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d90:	4628      	mov	r0, r5
 8008d92:	6a21      	ldr	r1, [r4, #32]
 8008d94:	47b0      	blx	r6
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	d106      	bne.n	8008daa <__sflush_r+0x66>
 8008d9c:	6829      	ldr	r1, [r5, #0]
 8008d9e:	291d      	cmp	r1, #29
 8008da0:	d82c      	bhi.n	8008dfc <__sflush_r+0xb8>
 8008da2:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <__sflush_r+0x108>)
 8008da4:	40ca      	lsrs	r2, r1
 8008da6:	07d6      	lsls	r6, r2, #31
 8008da8:	d528      	bpl.n	8008dfc <__sflush_r+0xb8>
 8008daa:	2200      	movs	r2, #0
 8008dac:	6062      	str	r2, [r4, #4]
 8008dae:	6922      	ldr	r2, [r4, #16]
 8008db0:	04d9      	lsls	r1, r3, #19
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	d504      	bpl.n	8008dc0 <__sflush_r+0x7c>
 8008db6:	1c42      	adds	r2, r0, #1
 8008db8:	d101      	bne.n	8008dbe <__sflush_r+0x7a>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b903      	cbnz	r3, 8008dc0 <__sflush_r+0x7c>
 8008dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8008dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dc2:	602f      	str	r7, [r5, #0]
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d0ca      	beq.n	8008d5e <__sflush_r+0x1a>
 8008dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <__sflush_r+0x92>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f000 fda1 	bl	8009918 <_free_r>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8008dda:	e7c1      	b.n	8008d60 <__sflush_r+0x1c>
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	2301      	movs	r3, #1
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b0      	blx	r6
 8008de4:	1c41      	adds	r1, r0, #1
 8008de6:	d1c7      	bne.n	8008d78 <__sflush_r+0x34>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c4      	beq.n	8008d78 <__sflush_r+0x34>
 8008dee:	2b1d      	cmp	r3, #29
 8008df0:	d001      	beq.n	8008df6 <__sflush_r+0xb2>
 8008df2:	2b16      	cmp	r3, #22
 8008df4:	d101      	bne.n	8008dfa <__sflush_r+0xb6>
 8008df6:	602f      	str	r7, [r5, #0]
 8008df8:	e7b1      	b.n	8008d5e <__sflush_r+0x1a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	e7ad      	b.n	8008d60 <__sflush_r+0x1c>
 8008e04:	690f      	ldr	r7, [r1, #16]
 8008e06:	2f00      	cmp	r7, #0
 8008e08:	d0a9      	beq.n	8008d5e <__sflush_r+0x1a>
 8008e0a:	0793      	lsls	r3, r2, #30
 8008e0c:	bf18      	it	ne
 8008e0e:	2300      	movne	r3, #0
 8008e10:	680e      	ldr	r6, [r1, #0]
 8008e12:	bf08      	it	eq
 8008e14:	694b      	ldreq	r3, [r1, #20]
 8008e16:	eba6 0807 	sub.w	r8, r6, r7
 8008e1a:	600f      	str	r7, [r1, #0]
 8008e1c:	608b      	str	r3, [r1, #8]
 8008e1e:	f1b8 0f00 	cmp.w	r8, #0
 8008e22:	dd9c      	ble.n	8008d5e <__sflush_r+0x1a>
 8008e24:	4643      	mov	r3, r8
 8008e26:	463a      	mov	r2, r7
 8008e28:	4628      	mov	r0, r5
 8008e2a:	6a21      	ldr	r1, [r4, #32]
 8008e2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e2e:	47b0      	blx	r6
 8008e30:	2800      	cmp	r0, #0
 8008e32:	dc06      	bgt.n	8008e42 <__sflush_r+0xfe>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	e78e      	b.n	8008d60 <__sflush_r+0x1c>
 8008e42:	4407      	add	r7, r0
 8008e44:	eba8 0800 	sub.w	r8, r8, r0
 8008e48:	e7e9      	b.n	8008e1e <__sflush_r+0xda>
 8008e4a:	bf00      	nop
 8008e4c:	20400001 	.word	0x20400001

08008e50 <_fflush_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	690b      	ldr	r3, [r1, #16]
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b913      	cbnz	r3, 8008e60 <_fflush_r+0x10>
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	b118      	cbz	r0, 8008e6a <_fflush_r+0x1a>
 8008e62:	6983      	ldr	r3, [r0, #24]
 8008e64:	b90b      	cbnz	r3, 8008e6a <_fflush_r+0x1a>
 8008e66:	f000 f887 	bl	8008f78 <__sinit>
 8008e6a:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <_fflush_r+0x6c>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	d11b      	bne.n	8008ea8 <_fflush_r+0x58>
 8008e70:	686c      	ldr	r4, [r5, #4]
 8008e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0ef      	beq.n	8008e5a <_fflush_r+0xa>
 8008e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e7c:	07d0      	lsls	r0, r2, #31
 8008e7e:	d404      	bmi.n	8008e8a <_fflush_r+0x3a>
 8008e80:	0599      	lsls	r1, r3, #22
 8008e82:	d402      	bmi.n	8008e8a <_fflush_r+0x3a>
 8008e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e86:	f000 f91a 	bl	80090be <__retarget_lock_acquire_recursive>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	f7ff ff59 	bl	8008d44 <__sflush_r>
 8008e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e94:	4605      	mov	r5, r0
 8008e96:	07da      	lsls	r2, r3, #31
 8008e98:	d4e0      	bmi.n	8008e5c <_fflush_r+0xc>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	059b      	lsls	r3, r3, #22
 8008e9e:	d4dd      	bmi.n	8008e5c <_fflush_r+0xc>
 8008ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ea2:	f000 f90d 	bl	80090c0 <__retarget_lock_release_recursive>
 8008ea6:	e7d9      	b.n	8008e5c <_fflush_r+0xc>
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <_fflush_r+0x70>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <_fflush_r+0x62>
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	e7df      	b.n	8008e72 <_fflush_r+0x22>
 8008eb2:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <_fflush_r+0x74>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68ec      	ldreq	r4, [r5, #12]
 8008eba:	e7da      	b.n	8008e72 <_fflush_r+0x22>
 8008ebc:	0800ad88 	.word	0x0800ad88
 8008ec0:	0800ada8 	.word	0x0800ada8
 8008ec4:	0800ad68 	.word	0x0800ad68

08008ec8 <std>:
 8008ec8:	2300      	movs	r3, #0
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	4604      	mov	r4, r0
 8008ece:	e9c0 3300 	strd	r3, r3, [r0]
 8008ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ed6:	6083      	str	r3, [r0, #8]
 8008ed8:	8181      	strh	r1, [r0, #12]
 8008eda:	6643      	str	r3, [r0, #100]	; 0x64
 8008edc:	81c2      	strh	r2, [r0, #14]
 8008ede:	6183      	str	r3, [r0, #24]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	305c      	adds	r0, #92	; 0x5c
 8008ee6:	f7fe fa27 	bl	8007338 <memset>
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <std+0x38>)
 8008eec:	6224      	str	r4, [r4, #32]
 8008eee:	6263      	str	r3, [r4, #36]	; 0x24
 8008ef0:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <std+0x3c>)
 8008ef2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ef4:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <std+0x40>)
 8008ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <std+0x44>)
 8008efa:	6323      	str	r3, [r4, #48]	; 0x30
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	bf00      	nop
 8008f00:	08007db9 	.word	0x08007db9
 8008f04:	08007ddf 	.word	0x08007ddf
 8008f08:	08007e17 	.word	0x08007e17
 8008f0c:	08007e3b 	.word	0x08007e3b

08008f10 <_cleanup_r>:
 8008f10:	4901      	ldr	r1, [pc, #4]	; (8008f18 <_cleanup_r+0x8>)
 8008f12:	f000 b8af 	b.w	8009074 <_fwalk_reent>
 8008f16:	bf00      	nop
 8008f18:	08008e51 	.word	0x08008e51

08008f1c <__sfmoreglue>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	2568      	movs	r5, #104	; 0x68
 8008f20:	1e4a      	subs	r2, r1, #1
 8008f22:	4355      	muls	r5, r2
 8008f24:	460e      	mov	r6, r1
 8008f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f2a:	f000 fd41 	bl	80099b0 <_malloc_r>
 8008f2e:	4604      	mov	r4, r0
 8008f30:	b140      	cbz	r0, 8008f44 <__sfmoreglue+0x28>
 8008f32:	2100      	movs	r1, #0
 8008f34:	e9c0 1600 	strd	r1, r6, [r0]
 8008f38:	300c      	adds	r0, #12
 8008f3a:	60a0      	str	r0, [r4, #8]
 8008f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f40:	f7fe f9fa 	bl	8007338 <memset>
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd70      	pop	{r4, r5, r6, pc}

08008f48 <__sfp_lock_acquire>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__sfp_lock_acquire+0x8>)
 8008f4a:	f000 b8b8 	b.w	80090be <__retarget_lock_acquire_recursive>
 8008f4e:	bf00      	nop
 8008f50:	200007d0 	.word	0x200007d0

08008f54 <__sfp_lock_release>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__sfp_lock_release+0x8>)
 8008f56:	f000 b8b3 	b.w	80090c0 <__retarget_lock_release_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200007d0 	.word	0x200007d0

08008f60 <__sinit_lock_acquire>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__sinit_lock_acquire+0x8>)
 8008f62:	f000 b8ac 	b.w	80090be <__retarget_lock_acquire_recursive>
 8008f66:	bf00      	nop
 8008f68:	200007cb 	.word	0x200007cb

08008f6c <__sinit_lock_release>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__sinit_lock_release+0x8>)
 8008f6e:	f000 b8a7 	b.w	80090c0 <__retarget_lock_release_recursive>
 8008f72:	bf00      	nop
 8008f74:	200007cb 	.word	0x200007cb

08008f78 <__sinit>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	f7ff fff0 	bl	8008f60 <__sinit_lock_acquire>
 8008f80:	69a3      	ldr	r3, [r4, #24]
 8008f82:	b11b      	cbz	r3, 8008f8c <__sinit+0x14>
 8008f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f88:	f7ff bff0 	b.w	8008f6c <__sinit_lock_release>
 8008f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f90:	6523      	str	r3, [r4, #80]	; 0x50
 8008f92:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <__sinit+0x68>)
 8008f94:	4a13      	ldr	r2, [pc, #76]	; (8008fe4 <__sinit+0x6c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f9a:	42a3      	cmp	r3, r4
 8008f9c:	bf08      	it	eq
 8008f9e:	2301      	moveq	r3, #1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	bf08      	it	eq
 8008fa4:	61a3      	streq	r3, [r4, #24]
 8008fa6:	f000 f81f 	bl	8008fe8 <__sfp>
 8008faa:	6060      	str	r0, [r4, #4]
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 f81b 	bl	8008fe8 <__sfp>
 8008fb2:	60a0      	str	r0, [r4, #8]
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 f817 	bl	8008fe8 <__sfp>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2104      	movs	r1, #4
 8008fbe:	60e0      	str	r0, [r4, #12]
 8008fc0:	6860      	ldr	r0, [r4, #4]
 8008fc2:	f7ff ff81 	bl	8008ec8 <std>
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	2109      	movs	r1, #9
 8008fca:	68a0      	ldr	r0, [r4, #8]
 8008fcc:	f7ff ff7c 	bl	8008ec8 <std>
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	2112      	movs	r1, #18
 8008fd4:	68e0      	ldr	r0, [r4, #12]
 8008fd6:	f7ff ff77 	bl	8008ec8 <std>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61a3      	str	r3, [r4, #24]
 8008fde:	e7d1      	b.n	8008f84 <__sinit+0xc>
 8008fe0:	0800ac9c 	.word	0x0800ac9c
 8008fe4:	08008f11 	.word	0x08008f11

08008fe8 <__sfp>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	4607      	mov	r7, r0
 8008fec:	f7ff ffac 	bl	8008f48 <__sfp_lock_acquire>
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	; (800906c <__sfp+0x84>)
 8008ff2:	681e      	ldr	r6, [r3, #0]
 8008ff4:	69b3      	ldr	r3, [r6, #24]
 8008ff6:	b913      	cbnz	r3, 8008ffe <__sfp+0x16>
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ffbd 	bl	8008f78 <__sinit>
 8008ffe:	3648      	adds	r6, #72	; 0x48
 8009000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009004:	3b01      	subs	r3, #1
 8009006:	d503      	bpl.n	8009010 <__sfp+0x28>
 8009008:	6833      	ldr	r3, [r6, #0]
 800900a:	b30b      	cbz	r3, 8009050 <__sfp+0x68>
 800900c:	6836      	ldr	r6, [r6, #0]
 800900e:	e7f7      	b.n	8009000 <__sfp+0x18>
 8009010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009014:	b9d5      	cbnz	r5, 800904c <__sfp+0x64>
 8009016:	4b16      	ldr	r3, [pc, #88]	; (8009070 <__sfp+0x88>)
 8009018:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800901c:	60e3      	str	r3, [r4, #12]
 800901e:	6665      	str	r5, [r4, #100]	; 0x64
 8009020:	f000 f84c 	bl	80090bc <__retarget_lock_init_recursive>
 8009024:	f7ff ff96 	bl	8008f54 <__sfp_lock_release>
 8009028:	2208      	movs	r2, #8
 800902a:	4629      	mov	r1, r5
 800902c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009034:	6025      	str	r5, [r4, #0]
 8009036:	61a5      	str	r5, [r4, #24]
 8009038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800903c:	f7fe f97c 	bl	8007338 <memset>
 8009040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009048:	4620      	mov	r0, r4
 800904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904c:	3468      	adds	r4, #104	; 0x68
 800904e:	e7d9      	b.n	8009004 <__sfp+0x1c>
 8009050:	2104      	movs	r1, #4
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ff62 	bl	8008f1c <__sfmoreglue>
 8009058:	4604      	mov	r4, r0
 800905a:	6030      	str	r0, [r6, #0]
 800905c:	2800      	cmp	r0, #0
 800905e:	d1d5      	bne.n	800900c <__sfp+0x24>
 8009060:	f7ff ff78 	bl	8008f54 <__sfp_lock_release>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	e7ee      	b.n	8009048 <__sfp+0x60>
 800906a:	bf00      	nop
 800906c:	0800ac9c 	.word	0x0800ac9c
 8009070:	ffff0001 	.word	0xffff0001

08009074 <_fwalk_reent>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	4606      	mov	r6, r0
 800907a:	4688      	mov	r8, r1
 800907c:	2700      	movs	r7, #0
 800907e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009086:	f1b9 0901 	subs.w	r9, r9, #1
 800908a:	d505      	bpl.n	8009098 <_fwalk_reent+0x24>
 800908c:	6824      	ldr	r4, [r4, #0]
 800908e:	2c00      	cmp	r4, #0
 8009090:	d1f7      	bne.n	8009082 <_fwalk_reent+0xe>
 8009092:	4638      	mov	r0, r7
 8009094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009098:	89ab      	ldrh	r3, [r5, #12]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d907      	bls.n	80090ae <_fwalk_reent+0x3a>
 800909e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a2:	3301      	adds	r3, #1
 80090a4:	d003      	beq.n	80090ae <_fwalk_reent+0x3a>
 80090a6:	4629      	mov	r1, r5
 80090a8:	4630      	mov	r0, r6
 80090aa:	47c0      	blx	r8
 80090ac:	4307      	orrs	r7, r0
 80090ae:	3568      	adds	r5, #104	; 0x68
 80090b0:	e7e9      	b.n	8009086 <_fwalk_reent+0x12>
	...

080090b4 <_localeconv_r>:
 80090b4:	4800      	ldr	r0, [pc, #0]	; (80090b8 <_localeconv_r+0x4>)
 80090b6:	4770      	bx	lr
 80090b8:	20000174 	.word	0x20000174

080090bc <__retarget_lock_init_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_acquire_recursive>:
 80090be:	4770      	bx	lr

080090c0 <__retarget_lock_release_recursive>:
 80090c0:	4770      	bx	lr
	...

080090c4 <_lseek_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	2200      	movs	r2, #0
 80090ce:	4d05      	ldr	r5, [pc, #20]	; (80090e4 <_lseek_r+0x20>)
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f9 fa88 	bl	80025e8 <_lseek>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_lseek_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_lseek_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	200007d4 	.word	0x200007d4

080090e8 <__swhatbuf_r>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	460e      	mov	r6, r1
 80090ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f0:	4614      	mov	r4, r2
 80090f2:	2900      	cmp	r1, #0
 80090f4:	461d      	mov	r5, r3
 80090f6:	b096      	sub	sp, #88	; 0x58
 80090f8:	da07      	bge.n	800910a <__swhatbuf_r+0x22>
 80090fa:	2300      	movs	r3, #0
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	89b3      	ldrh	r3, [r6, #12]
 8009100:	061a      	lsls	r2, r3, #24
 8009102:	d410      	bmi.n	8009126 <__swhatbuf_r+0x3e>
 8009104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009108:	e00e      	b.n	8009128 <__swhatbuf_r+0x40>
 800910a:	466a      	mov	r2, sp
 800910c:	f001 fc46 	bl	800a99c <_fstat_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	dbf2      	blt.n	80090fa <__swhatbuf_r+0x12>
 8009114:	9a01      	ldr	r2, [sp, #4]
 8009116:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800911a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800911e:	425a      	negs	r2, r3
 8009120:	415a      	adcs	r2, r3
 8009122:	602a      	str	r2, [r5, #0]
 8009124:	e7ee      	b.n	8009104 <__swhatbuf_r+0x1c>
 8009126:	2340      	movs	r3, #64	; 0x40
 8009128:	2000      	movs	r0, #0
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	b016      	add	sp, #88	; 0x58
 800912e:	bd70      	pop	{r4, r5, r6, pc}

08009130 <__smakebuf_r>:
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009134:	079d      	lsls	r5, r3, #30
 8009136:	4606      	mov	r6, r0
 8009138:	460c      	mov	r4, r1
 800913a:	d507      	bpl.n	800914c <__smakebuf_r+0x1c>
 800913c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	6123      	str	r3, [r4, #16]
 8009144:	2301      	movs	r3, #1
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	b002      	add	sp, #8
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	466a      	mov	r2, sp
 800914e:	ab01      	add	r3, sp, #4
 8009150:	f7ff ffca 	bl	80090e8 <__swhatbuf_r>
 8009154:	9900      	ldr	r1, [sp, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	4630      	mov	r0, r6
 800915a:	f000 fc29 	bl	80099b0 <_malloc_r>
 800915e:	b948      	cbnz	r0, 8009174 <__smakebuf_r+0x44>
 8009160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d4ef      	bmi.n	8009148 <__smakebuf_r+0x18>
 8009168:	f023 0303 	bic.w	r3, r3, #3
 800916c:	f043 0302 	orr.w	r3, r3, #2
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7e3      	b.n	800913c <__smakebuf_r+0xc>
 8009174:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <__smakebuf_r+0x7c>)
 8009176:	62b3      	str	r3, [r6, #40]	; 0x28
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	6120      	str	r0, [r4, #16]
 8009186:	6163      	str	r3, [r4, #20]
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	b15b      	cbz	r3, 80091a4 <__smakebuf_r+0x74>
 800918c:	4630      	mov	r0, r6
 800918e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009192:	f001 fc15 	bl	800a9c0 <_isatty_r>
 8009196:	b128      	cbz	r0, 80091a4 <__smakebuf_r+0x74>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	f043 0301 	orr.w	r3, r3, #1
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	89a0      	ldrh	r0, [r4, #12]
 80091a6:	4305      	orrs	r5, r0
 80091a8:	81a5      	strh	r5, [r4, #12]
 80091aa:	e7cd      	b.n	8009148 <__smakebuf_r+0x18>
 80091ac:	08008f11 	.word	0x08008f11

080091b0 <malloc>:
 80091b0:	4b02      	ldr	r3, [pc, #8]	; (80091bc <malloc+0xc>)
 80091b2:	4601      	mov	r1, r0
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	f000 bbfb 	b.w	80099b0 <_malloc_r>
 80091ba:	bf00      	nop
 80091bc:	20000020 	.word	0x20000020

080091c0 <memchr>:
 80091c0:	4603      	mov	r3, r0
 80091c2:	b510      	push	{r4, lr}
 80091c4:	b2c9      	uxtb	r1, r1
 80091c6:	4402      	add	r2, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	d101      	bne.n	80091d2 <memchr+0x12>
 80091ce:	2000      	movs	r0, #0
 80091d0:	e003      	b.n	80091da <memchr+0x1a>
 80091d2:	7804      	ldrb	r4, [r0, #0]
 80091d4:	3301      	adds	r3, #1
 80091d6:	428c      	cmp	r4, r1
 80091d8:	d1f6      	bne.n	80091c8 <memchr+0x8>
 80091da:	bd10      	pop	{r4, pc}

080091dc <memcpy>:
 80091dc:	440a      	add	r2, r1
 80091de:	4291      	cmp	r1, r2
 80091e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091e4:	d100      	bne.n	80091e8 <memcpy+0xc>
 80091e6:	4770      	bx	lr
 80091e8:	b510      	push	{r4, lr}
 80091ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ee:	4291      	cmp	r1, r2
 80091f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f4:	d1f9      	bne.n	80091ea <memcpy+0xe>
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <_Balloc>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	b976      	cbnz	r6, 8009220 <_Balloc+0x28>
 8009202:	2010      	movs	r0, #16
 8009204:	f7ff ffd4 	bl	80091b0 <malloc>
 8009208:	4602      	mov	r2, r0
 800920a:	6260      	str	r0, [r4, #36]	; 0x24
 800920c:	b920      	cbnz	r0, 8009218 <_Balloc+0x20>
 800920e:	2166      	movs	r1, #102	; 0x66
 8009210:	4b17      	ldr	r3, [pc, #92]	; (8009270 <_Balloc+0x78>)
 8009212:	4818      	ldr	r0, [pc, #96]	; (8009274 <_Balloc+0x7c>)
 8009214:	f001 fb92 	bl	800a93c <__assert_func>
 8009218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800921c:	6006      	str	r6, [r0, #0]
 800921e:	60c6      	str	r6, [r0, #12]
 8009220:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009222:	68f3      	ldr	r3, [r6, #12]
 8009224:	b183      	cbz	r3, 8009248 <_Balloc+0x50>
 8009226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800922e:	b9b8      	cbnz	r0, 8009260 <_Balloc+0x68>
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f605 	lsl.w	r6, r1, r5
 8009236:	1d72      	adds	r2, r6, #5
 8009238:	4620      	mov	r0, r4
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	f000 fb5e 	bl	80098fc <_calloc_r>
 8009240:	b160      	cbz	r0, 800925c <_Balloc+0x64>
 8009242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009246:	e00e      	b.n	8009266 <_Balloc+0x6e>
 8009248:	2221      	movs	r2, #33	; 0x21
 800924a:	2104      	movs	r1, #4
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fb55 	bl	80098fc <_calloc_r>
 8009252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009254:	60f0      	str	r0, [r6, #12]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e4      	bne.n	8009226 <_Balloc+0x2e>
 800925c:	2000      	movs	r0, #0
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	6802      	ldr	r2, [r0, #0]
 8009262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009266:	2300      	movs	r3, #0
 8009268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800926c:	e7f7      	b.n	800925e <_Balloc+0x66>
 800926e:	bf00      	nop
 8009270:	0800acdf 	.word	0x0800acdf
 8009274:	0800adc8 	.word	0x0800adc8

08009278 <_Bfree>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800927c:	4605      	mov	r5, r0
 800927e:	460c      	mov	r4, r1
 8009280:	b976      	cbnz	r6, 80092a0 <_Bfree+0x28>
 8009282:	2010      	movs	r0, #16
 8009284:	f7ff ff94 	bl	80091b0 <malloc>
 8009288:	4602      	mov	r2, r0
 800928a:	6268      	str	r0, [r5, #36]	; 0x24
 800928c:	b920      	cbnz	r0, 8009298 <_Bfree+0x20>
 800928e:	218a      	movs	r1, #138	; 0x8a
 8009290:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <_Bfree+0x3c>)
 8009292:	4809      	ldr	r0, [pc, #36]	; (80092b8 <_Bfree+0x40>)
 8009294:	f001 fb52 	bl	800a93c <__assert_func>
 8009298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800929c:	6006      	str	r6, [r0, #0]
 800929e:	60c6      	str	r6, [r0, #12]
 80092a0:	b13c      	cbz	r4, 80092b2 <_Bfree+0x3a>
 80092a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092a4:	6862      	ldr	r2, [r4, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ac:	6021      	str	r1, [r4, #0]
 80092ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	0800acdf 	.word	0x0800acdf
 80092b8:	0800adc8 	.word	0x0800adc8

080092bc <__multadd>:
 80092bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c0:	4698      	mov	r8, r3
 80092c2:	460c      	mov	r4, r1
 80092c4:	2300      	movs	r3, #0
 80092c6:	690e      	ldr	r6, [r1, #16]
 80092c8:	4607      	mov	r7, r0
 80092ca:	f101 0014 	add.w	r0, r1, #20
 80092ce:	6805      	ldr	r5, [r0, #0]
 80092d0:	3301      	adds	r3, #1
 80092d2:	b2a9      	uxth	r1, r5
 80092d4:	fb02 8101 	mla	r1, r2, r1, r8
 80092d8:	0c2d      	lsrs	r5, r5, #16
 80092da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80092de:	fb02 c505 	mla	r5, r2, r5, ip
 80092e2:	b289      	uxth	r1, r1
 80092e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80092e8:	429e      	cmp	r6, r3
 80092ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80092ee:	f840 1b04 	str.w	r1, [r0], #4
 80092f2:	dcec      	bgt.n	80092ce <__multadd+0x12>
 80092f4:	f1b8 0f00 	cmp.w	r8, #0
 80092f8:	d022      	beq.n	8009340 <__multadd+0x84>
 80092fa:	68a3      	ldr	r3, [r4, #8]
 80092fc:	42b3      	cmp	r3, r6
 80092fe:	dc19      	bgt.n	8009334 <__multadd+0x78>
 8009300:	6861      	ldr	r1, [r4, #4]
 8009302:	4638      	mov	r0, r7
 8009304:	3101      	adds	r1, #1
 8009306:	f7ff ff77 	bl	80091f8 <_Balloc>
 800930a:	4605      	mov	r5, r0
 800930c:	b928      	cbnz	r0, 800931a <__multadd+0x5e>
 800930e:	4602      	mov	r2, r0
 8009310:	21b5      	movs	r1, #181	; 0xb5
 8009312:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <__multadd+0x8c>)
 8009314:	480d      	ldr	r0, [pc, #52]	; (800934c <__multadd+0x90>)
 8009316:	f001 fb11 	bl	800a93c <__assert_func>
 800931a:	6922      	ldr	r2, [r4, #16]
 800931c:	f104 010c 	add.w	r1, r4, #12
 8009320:	3202      	adds	r2, #2
 8009322:	0092      	lsls	r2, r2, #2
 8009324:	300c      	adds	r0, #12
 8009326:	f7ff ff59 	bl	80091dc <memcpy>
 800932a:	4621      	mov	r1, r4
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff ffa3 	bl	8009278 <_Bfree>
 8009332:	462c      	mov	r4, r5
 8009334:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009338:	3601      	adds	r6, #1
 800933a:	f8c3 8014 	str.w	r8, [r3, #20]
 800933e:	6126      	str	r6, [r4, #16]
 8009340:	4620      	mov	r0, r4
 8009342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009346:	bf00      	nop
 8009348:	0800ad55 	.word	0x0800ad55
 800934c:	0800adc8 	.word	0x0800adc8

08009350 <__hi0bits>:
 8009350:	0c02      	lsrs	r2, r0, #16
 8009352:	0412      	lsls	r2, r2, #16
 8009354:	4603      	mov	r3, r0
 8009356:	b9ca      	cbnz	r2, 800938c <__hi0bits+0x3c>
 8009358:	0403      	lsls	r3, r0, #16
 800935a:	2010      	movs	r0, #16
 800935c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009360:	bf04      	itt	eq
 8009362:	021b      	lsleq	r3, r3, #8
 8009364:	3008      	addeq	r0, #8
 8009366:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800936a:	bf04      	itt	eq
 800936c:	011b      	lsleq	r3, r3, #4
 800936e:	3004      	addeq	r0, #4
 8009370:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009374:	bf04      	itt	eq
 8009376:	009b      	lsleq	r3, r3, #2
 8009378:	3002      	addeq	r0, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	db05      	blt.n	800938a <__hi0bits+0x3a>
 800937e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009382:	f100 0001 	add.w	r0, r0, #1
 8009386:	bf08      	it	eq
 8009388:	2020      	moveq	r0, #32
 800938a:	4770      	bx	lr
 800938c:	2000      	movs	r0, #0
 800938e:	e7e5      	b.n	800935c <__hi0bits+0xc>

08009390 <__lo0bits>:
 8009390:	6803      	ldr	r3, [r0, #0]
 8009392:	4602      	mov	r2, r0
 8009394:	f013 0007 	ands.w	r0, r3, #7
 8009398:	d00b      	beq.n	80093b2 <__lo0bits+0x22>
 800939a:	07d9      	lsls	r1, r3, #31
 800939c:	d422      	bmi.n	80093e4 <__lo0bits+0x54>
 800939e:	0798      	lsls	r0, r3, #30
 80093a0:	bf49      	itett	mi
 80093a2:	085b      	lsrmi	r3, r3, #1
 80093a4:	089b      	lsrpl	r3, r3, #2
 80093a6:	2001      	movmi	r0, #1
 80093a8:	6013      	strmi	r3, [r2, #0]
 80093aa:	bf5c      	itt	pl
 80093ac:	2002      	movpl	r0, #2
 80093ae:	6013      	strpl	r3, [r2, #0]
 80093b0:	4770      	bx	lr
 80093b2:	b299      	uxth	r1, r3
 80093b4:	b909      	cbnz	r1, 80093ba <__lo0bits+0x2a>
 80093b6:	2010      	movs	r0, #16
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093be:	bf04      	itt	eq
 80093c0:	0a1b      	lsreq	r3, r3, #8
 80093c2:	3008      	addeq	r0, #8
 80093c4:	0719      	lsls	r1, r3, #28
 80093c6:	bf04      	itt	eq
 80093c8:	091b      	lsreq	r3, r3, #4
 80093ca:	3004      	addeq	r0, #4
 80093cc:	0799      	lsls	r1, r3, #30
 80093ce:	bf04      	itt	eq
 80093d0:	089b      	lsreq	r3, r3, #2
 80093d2:	3002      	addeq	r0, #2
 80093d4:	07d9      	lsls	r1, r3, #31
 80093d6:	d403      	bmi.n	80093e0 <__lo0bits+0x50>
 80093d8:	085b      	lsrs	r3, r3, #1
 80093da:	f100 0001 	add.w	r0, r0, #1
 80093de:	d003      	beq.n	80093e8 <__lo0bits+0x58>
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	4770      	bx	lr
 80093e4:	2000      	movs	r0, #0
 80093e6:	4770      	bx	lr
 80093e8:	2020      	movs	r0, #32
 80093ea:	4770      	bx	lr

080093ec <__i2b>:
 80093ec:	b510      	push	{r4, lr}
 80093ee:	460c      	mov	r4, r1
 80093f0:	2101      	movs	r1, #1
 80093f2:	f7ff ff01 	bl	80091f8 <_Balloc>
 80093f6:	4602      	mov	r2, r0
 80093f8:	b928      	cbnz	r0, 8009406 <__i2b+0x1a>
 80093fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093fe:	4b04      	ldr	r3, [pc, #16]	; (8009410 <__i2b+0x24>)
 8009400:	4804      	ldr	r0, [pc, #16]	; (8009414 <__i2b+0x28>)
 8009402:	f001 fa9b 	bl	800a93c <__assert_func>
 8009406:	2301      	movs	r3, #1
 8009408:	6144      	str	r4, [r0, #20]
 800940a:	6103      	str	r3, [r0, #16]
 800940c:	bd10      	pop	{r4, pc}
 800940e:	bf00      	nop
 8009410:	0800ad55 	.word	0x0800ad55
 8009414:	0800adc8 	.word	0x0800adc8

08009418 <__multiply>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	4614      	mov	r4, r2
 800941e:	690a      	ldr	r2, [r1, #16]
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	460d      	mov	r5, r1
 8009424:	429a      	cmp	r2, r3
 8009426:	bfbe      	ittt	lt
 8009428:	460b      	movlt	r3, r1
 800942a:	4625      	movlt	r5, r4
 800942c:	461c      	movlt	r4, r3
 800942e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009432:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009436:	68ab      	ldr	r3, [r5, #8]
 8009438:	6869      	ldr	r1, [r5, #4]
 800943a:	eb0a 0709 	add.w	r7, sl, r9
 800943e:	42bb      	cmp	r3, r7
 8009440:	b085      	sub	sp, #20
 8009442:	bfb8      	it	lt
 8009444:	3101      	addlt	r1, #1
 8009446:	f7ff fed7 	bl	80091f8 <_Balloc>
 800944a:	b930      	cbnz	r0, 800945a <__multiply+0x42>
 800944c:	4602      	mov	r2, r0
 800944e:	f240 115d 	movw	r1, #349	; 0x15d
 8009452:	4b41      	ldr	r3, [pc, #260]	; (8009558 <__multiply+0x140>)
 8009454:	4841      	ldr	r0, [pc, #260]	; (800955c <__multiply+0x144>)
 8009456:	f001 fa71 	bl	800a93c <__assert_func>
 800945a:	f100 0614 	add.w	r6, r0, #20
 800945e:	4633      	mov	r3, r6
 8009460:	2200      	movs	r2, #0
 8009462:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009466:	4543      	cmp	r3, r8
 8009468:	d31e      	bcc.n	80094a8 <__multiply+0x90>
 800946a:	f105 0c14 	add.w	ip, r5, #20
 800946e:	f104 0314 	add.w	r3, r4, #20
 8009472:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009476:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800947a:	9202      	str	r2, [sp, #8]
 800947c:	ebac 0205 	sub.w	r2, ip, r5
 8009480:	3a15      	subs	r2, #21
 8009482:	f022 0203 	bic.w	r2, r2, #3
 8009486:	3204      	adds	r2, #4
 8009488:	f105 0115 	add.w	r1, r5, #21
 800948c:	458c      	cmp	ip, r1
 800948e:	bf38      	it	cc
 8009490:	2204      	movcc	r2, #4
 8009492:	9201      	str	r2, [sp, #4]
 8009494:	9a02      	ldr	r2, [sp, #8]
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	429a      	cmp	r2, r3
 800949a:	d808      	bhi.n	80094ae <__multiply+0x96>
 800949c:	2f00      	cmp	r7, #0
 800949e:	dc55      	bgt.n	800954c <__multiply+0x134>
 80094a0:	6107      	str	r7, [r0, #16]
 80094a2:	b005      	add	sp, #20
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	f843 2b04 	str.w	r2, [r3], #4
 80094ac:	e7db      	b.n	8009466 <__multiply+0x4e>
 80094ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80094b2:	f1ba 0f00 	cmp.w	sl, #0
 80094b6:	d020      	beq.n	80094fa <__multiply+0xe2>
 80094b8:	46b1      	mov	r9, r6
 80094ba:	2200      	movs	r2, #0
 80094bc:	f105 0e14 	add.w	lr, r5, #20
 80094c0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80094c4:	f8d9 b000 	ldr.w	fp, [r9]
 80094c8:	b2a1      	uxth	r1, r4
 80094ca:	fa1f fb8b 	uxth.w	fp, fp
 80094ce:	fb0a b101 	mla	r1, sl, r1, fp
 80094d2:	4411      	add	r1, r2
 80094d4:	f8d9 2000 	ldr.w	r2, [r9]
 80094d8:	0c24      	lsrs	r4, r4, #16
 80094da:	0c12      	lsrs	r2, r2, #16
 80094dc:	fb0a 2404 	mla	r4, sl, r4, r2
 80094e0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80094e4:	b289      	uxth	r1, r1
 80094e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094ea:	45f4      	cmp	ip, lr
 80094ec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80094f0:	f849 1b04 	str.w	r1, [r9], #4
 80094f4:	d8e4      	bhi.n	80094c0 <__multiply+0xa8>
 80094f6:	9901      	ldr	r1, [sp, #4]
 80094f8:	5072      	str	r2, [r6, r1]
 80094fa:	9a03      	ldr	r2, [sp, #12]
 80094fc:	3304      	adds	r3, #4
 80094fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	d01f      	beq.n	8009548 <__multiply+0x130>
 8009508:	46b6      	mov	lr, r6
 800950a:	f04f 0a00 	mov.w	sl, #0
 800950e:	6834      	ldr	r4, [r6, #0]
 8009510:	f105 0114 	add.w	r1, r5, #20
 8009514:	880a      	ldrh	r2, [r1, #0]
 8009516:	f8be b002 	ldrh.w	fp, [lr, #2]
 800951a:	b2a4      	uxth	r4, r4
 800951c:	fb09 b202 	mla	r2, r9, r2, fp
 8009520:	4492      	add	sl, r2
 8009522:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009526:	f84e 4b04 	str.w	r4, [lr], #4
 800952a:	f851 4b04 	ldr.w	r4, [r1], #4
 800952e:	f8be 2000 	ldrh.w	r2, [lr]
 8009532:	0c24      	lsrs	r4, r4, #16
 8009534:	fb09 2404 	mla	r4, r9, r4, r2
 8009538:	458c      	cmp	ip, r1
 800953a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800953e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009542:	d8e7      	bhi.n	8009514 <__multiply+0xfc>
 8009544:	9a01      	ldr	r2, [sp, #4]
 8009546:	50b4      	str	r4, [r6, r2]
 8009548:	3604      	adds	r6, #4
 800954a:	e7a3      	b.n	8009494 <__multiply+0x7c>
 800954c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1a5      	bne.n	80094a0 <__multiply+0x88>
 8009554:	3f01      	subs	r7, #1
 8009556:	e7a1      	b.n	800949c <__multiply+0x84>
 8009558:	0800ad55 	.word	0x0800ad55
 800955c:	0800adc8 	.word	0x0800adc8

08009560 <__pow5mult>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	4615      	mov	r5, r2
 8009566:	f012 0203 	ands.w	r2, r2, #3
 800956a:	4606      	mov	r6, r0
 800956c:	460f      	mov	r7, r1
 800956e:	d007      	beq.n	8009580 <__pow5mult+0x20>
 8009570:	4c25      	ldr	r4, [pc, #148]	; (8009608 <__pow5mult+0xa8>)
 8009572:	3a01      	subs	r2, #1
 8009574:	2300      	movs	r3, #0
 8009576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800957a:	f7ff fe9f 	bl	80092bc <__multadd>
 800957e:	4607      	mov	r7, r0
 8009580:	10ad      	asrs	r5, r5, #2
 8009582:	d03d      	beq.n	8009600 <__pow5mult+0xa0>
 8009584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009586:	b97c      	cbnz	r4, 80095a8 <__pow5mult+0x48>
 8009588:	2010      	movs	r0, #16
 800958a:	f7ff fe11 	bl	80091b0 <malloc>
 800958e:	4602      	mov	r2, r0
 8009590:	6270      	str	r0, [r6, #36]	; 0x24
 8009592:	b928      	cbnz	r0, 80095a0 <__pow5mult+0x40>
 8009594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009598:	4b1c      	ldr	r3, [pc, #112]	; (800960c <__pow5mult+0xac>)
 800959a:	481d      	ldr	r0, [pc, #116]	; (8009610 <__pow5mult+0xb0>)
 800959c:	f001 f9ce 	bl	800a93c <__assert_func>
 80095a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095a4:	6004      	str	r4, [r0, #0]
 80095a6:	60c4      	str	r4, [r0, #12]
 80095a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095b0:	b94c      	cbnz	r4, 80095c6 <__pow5mult+0x66>
 80095b2:	f240 2171 	movw	r1, #625	; 0x271
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ff18 	bl	80093ec <__i2b>
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	f04f 0900 	mov.w	r9, #0
 80095ca:	07eb      	lsls	r3, r5, #31
 80095cc:	d50a      	bpl.n	80095e4 <__pow5mult+0x84>
 80095ce:	4639      	mov	r1, r7
 80095d0:	4622      	mov	r2, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ff20 	bl	8009418 <__multiply>
 80095d8:	4680      	mov	r8, r0
 80095da:	4639      	mov	r1, r7
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff fe4b 	bl	8009278 <_Bfree>
 80095e2:	4647      	mov	r7, r8
 80095e4:	106d      	asrs	r5, r5, #1
 80095e6:	d00b      	beq.n	8009600 <__pow5mult+0xa0>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	b938      	cbnz	r0, 80095fc <__pow5mult+0x9c>
 80095ec:	4622      	mov	r2, r4
 80095ee:	4621      	mov	r1, r4
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff ff11 	bl	8009418 <__multiply>
 80095f6:	6020      	str	r0, [r4, #0]
 80095f8:	f8c0 9000 	str.w	r9, [r0]
 80095fc:	4604      	mov	r4, r0
 80095fe:	e7e4      	b.n	80095ca <__pow5mult+0x6a>
 8009600:	4638      	mov	r0, r7
 8009602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009606:	bf00      	nop
 8009608:	0800af18 	.word	0x0800af18
 800960c:	0800acdf 	.word	0x0800acdf
 8009610:	0800adc8 	.word	0x0800adc8

08009614 <__lshift>:
 8009614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009618:	460c      	mov	r4, r1
 800961a:	4607      	mov	r7, r0
 800961c:	4691      	mov	r9, r2
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	6849      	ldr	r1, [r1, #4]
 8009622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800962c:	f108 0601 	add.w	r6, r8, #1
 8009630:	42b3      	cmp	r3, r6
 8009632:	db0b      	blt.n	800964c <__lshift+0x38>
 8009634:	4638      	mov	r0, r7
 8009636:	f7ff fddf 	bl	80091f8 <_Balloc>
 800963a:	4605      	mov	r5, r0
 800963c:	b948      	cbnz	r0, 8009652 <__lshift+0x3e>
 800963e:	4602      	mov	r2, r0
 8009640:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009644:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <__lshift+0xd0>)
 8009646:	4828      	ldr	r0, [pc, #160]	; (80096e8 <__lshift+0xd4>)
 8009648:	f001 f978 	bl	800a93c <__assert_func>
 800964c:	3101      	adds	r1, #1
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	e7ee      	b.n	8009630 <__lshift+0x1c>
 8009652:	2300      	movs	r3, #0
 8009654:	f100 0114 	add.w	r1, r0, #20
 8009658:	f100 0210 	add.w	r2, r0, #16
 800965c:	4618      	mov	r0, r3
 800965e:	4553      	cmp	r3, sl
 8009660:	db33      	blt.n	80096ca <__lshift+0xb6>
 8009662:	6920      	ldr	r0, [r4, #16]
 8009664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009668:	f104 0314 	add.w	r3, r4, #20
 800966c:	f019 091f 	ands.w	r9, r9, #31
 8009670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009678:	d02b      	beq.n	80096d2 <__lshift+0xbe>
 800967a:	468a      	mov	sl, r1
 800967c:	2200      	movs	r2, #0
 800967e:	f1c9 0e20 	rsb	lr, r9, #32
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	fa00 f009 	lsl.w	r0, r0, r9
 8009688:	4302      	orrs	r2, r0
 800968a:	f84a 2b04 	str.w	r2, [sl], #4
 800968e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009692:	459c      	cmp	ip, r3
 8009694:	fa22 f20e 	lsr.w	r2, r2, lr
 8009698:	d8f3      	bhi.n	8009682 <__lshift+0x6e>
 800969a:	ebac 0304 	sub.w	r3, ip, r4
 800969e:	3b15      	subs	r3, #21
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	3304      	adds	r3, #4
 80096a6:	f104 0015 	add.w	r0, r4, #21
 80096aa:	4584      	cmp	ip, r0
 80096ac:	bf38      	it	cc
 80096ae:	2304      	movcc	r3, #4
 80096b0:	50ca      	str	r2, [r1, r3]
 80096b2:	b10a      	cbz	r2, 80096b8 <__lshift+0xa4>
 80096b4:	f108 0602 	add.w	r6, r8, #2
 80096b8:	3e01      	subs	r6, #1
 80096ba:	4638      	mov	r0, r7
 80096bc:	4621      	mov	r1, r4
 80096be:	612e      	str	r6, [r5, #16]
 80096c0:	f7ff fdda 	bl	8009278 <_Bfree>
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80096ce:	3301      	adds	r3, #1
 80096d0:	e7c5      	b.n	800965e <__lshift+0x4a>
 80096d2:	3904      	subs	r1, #4
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	459c      	cmp	ip, r3
 80096da:	f841 2f04 	str.w	r2, [r1, #4]!
 80096de:	d8f9      	bhi.n	80096d4 <__lshift+0xc0>
 80096e0:	e7ea      	b.n	80096b8 <__lshift+0xa4>
 80096e2:	bf00      	nop
 80096e4:	0800ad55 	.word	0x0800ad55
 80096e8:	0800adc8 	.word	0x0800adc8

080096ec <__mcmp>:
 80096ec:	4603      	mov	r3, r0
 80096ee:	690a      	ldr	r2, [r1, #16]
 80096f0:	6900      	ldr	r0, [r0, #16]
 80096f2:	b530      	push	{r4, r5, lr}
 80096f4:	1a80      	subs	r0, r0, r2
 80096f6:	d10d      	bne.n	8009714 <__mcmp+0x28>
 80096f8:	3314      	adds	r3, #20
 80096fa:	3114      	adds	r1, #20
 80096fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800970c:	4295      	cmp	r5, r2
 800970e:	d002      	beq.n	8009716 <__mcmp+0x2a>
 8009710:	d304      	bcc.n	800971c <__mcmp+0x30>
 8009712:	2001      	movs	r0, #1
 8009714:	bd30      	pop	{r4, r5, pc}
 8009716:	42a3      	cmp	r3, r4
 8009718:	d3f4      	bcc.n	8009704 <__mcmp+0x18>
 800971a:	e7fb      	b.n	8009714 <__mcmp+0x28>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e7f8      	b.n	8009714 <__mcmp+0x28>
	...

08009724 <__mdiff>:
 8009724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	460c      	mov	r4, r1
 800972a:	4606      	mov	r6, r0
 800972c:	4611      	mov	r1, r2
 800972e:	4620      	mov	r0, r4
 8009730:	4692      	mov	sl, r2
 8009732:	f7ff ffdb 	bl	80096ec <__mcmp>
 8009736:	1e05      	subs	r5, r0, #0
 8009738:	d111      	bne.n	800975e <__mdiff+0x3a>
 800973a:	4629      	mov	r1, r5
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff fd5b 	bl	80091f8 <_Balloc>
 8009742:	4602      	mov	r2, r0
 8009744:	b928      	cbnz	r0, 8009752 <__mdiff+0x2e>
 8009746:	f240 2132 	movw	r1, #562	; 0x232
 800974a:	4b3c      	ldr	r3, [pc, #240]	; (800983c <__mdiff+0x118>)
 800974c:	483c      	ldr	r0, [pc, #240]	; (8009840 <__mdiff+0x11c>)
 800974e:	f001 f8f5 	bl	800a93c <__assert_func>
 8009752:	2301      	movs	r3, #1
 8009754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009758:	4610      	mov	r0, r2
 800975a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	bfa4      	itt	ge
 8009760:	4653      	movge	r3, sl
 8009762:	46a2      	movge	sl, r4
 8009764:	4630      	mov	r0, r6
 8009766:	f8da 1004 	ldr.w	r1, [sl, #4]
 800976a:	bfa6      	itte	ge
 800976c:	461c      	movge	r4, r3
 800976e:	2500      	movge	r5, #0
 8009770:	2501      	movlt	r5, #1
 8009772:	f7ff fd41 	bl	80091f8 <_Balloc>
 8009776:	4602      	mov	r2, r0
 8009778:	b918      	cbnz	r0, 8009782 <__mdiff+0x5e>
 800977a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800977e:	4b2f      	ldr	r3, [pc, #188]	; (800983c <__mdiff+0x118>)
 8009780:	e7e4      	b.n	800974c <__mdiff+0x28>
 8009782:	f100 0814 	add.w	r8, r0, #20
 8009786:	f8da 7010 	ldr.w	r7, [sl, #16]
 800978a:	60c5      	str	r5, [r0, #12]
 800978c:	f04f 0c00 	mov.w	ip, #0
 8009790:	f10a 0514 	add.w	r5, sl, #20
 8009794:	f10a 0010 	add.w	r0, sl, #16
 8009798:	46c2      	mov	sl, r8
 800979a:	6926      	ldr	r6, [r4, #16]
 800979c:	f104 0914 	add.w	r9, r4, #20
 80097a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80097a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80097ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80097b0:	fa1f f18b 	uxth.w	r1, fp
 80097b4:	4461      	add	r1, ip
 80097b6:	fa1f fc83 	uxth.w	ip, r3
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	eba1 010c 	sub.w	r1, r1, ip
 80097c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097c8:	b289      	uxth	r1, r1
 80097ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80097ce:	454e      	cmp	r6, r9
 80097d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80097d4:	f84a 3b04 	str.w	r3, [sl], #4
 80097d8:	d8e6      	bhi.n	80097a8 <__mdiff+0x84>
 80097da:	1b33      	subs	r3, r6, r4
 80097dc:	3b15      	subs	r3, #21
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	3415      	adds	r4, #21
 80097e4:	3304      	adds	r3, #4
 80097e6:	42a6      	cmp	r6, r4
 80097e8:	bf38      	it	cc
 80097ea:	2304      	movcc	r3, #4
 80097ec:	441d      	add	r5, r3
 80097ee:	4443      	add	r3, r8
 80097f0:	461e      	mov	r6, r3
 80097f2:	462c      	mov	r4, r5
 80097f4:	4574      	cmp	r4, lr
 80097f6:	d30e      	bcc.n	8009816 <__mdiff+0xf2>
 80097f8:	f10e 0103 	add.w	r1, lr, #3
 80097fc:	1b49      	subs	r1, r1, r5
 80097fe:	f021 0103 	bic.w	r1, r1, #3
 8009802:	3d03      	subs	r5, #3
 8009804:	45ae      	cmp	lr, r5
 8009806:	bf38      	it	cc
 8009808:	2100      	movcc	r1, #0
 800980a:	4419      	add	r1, r3
 800980c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009810:	b18b      	cbz	r3, 8009836 <__mdiff+0x112>
 8009812:	6117      	str	r7, [r2, #16]
 8009814:	e7a0      	b.n	8009758 <__mdiff+0x34>
 8009816:	f854 8b04 	ldr.w	r8, [r4], #4
 800981a:	fa1f f188 	uxth.w	r1, r8
 800981e:	4461      	add	r1, ip
 8009820:	1408      	asrs	r0, r1, #16
 8009822:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009826:	b289      	uxth	r1, r1
 8009828:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800982c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009830:	f846 1b04 	str.w	r1, [r6], #4
 8009834:	e7de      	b.n	80097f4 <__mdiff+0xd0>
 8009836:	3f01      	subs	r7, #1
 8009838:	e7e8      	b.n	800980c <__mdiff+0xe8>
 800983a:	bf00      	nop
 800983c:	0800ad55 	.word	0x0800ad55
 8009840:	0800adc8 	.word	0x0800adc8

08009844 <__d2b>:
 8009844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009848:	2101      	movs	r1, #1
 800984a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800984e:	4690      	mov	r8, r2
 8009850:	461d      	mov	r5, r3
 8009852:	f7ff fcd1 	bl	80091f8 <_Balloc>
 8009856:	4604      	mov	r4, r0
 8009858:	b930      	cbnz	r0, 8009868 <__d2b+0x24>
 800985a:	4602      	mov	r2, r0
 800985c:	f240 310a 	movw	r1, #778	; 0x30a
 8009860:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <__d2b+0xb0>)
 8009862:	4825      	ldr	r0, [pc, #148]	; (80098f8 <__d2b+0xb4>)
 8009864:	f001 f86a 	bl	800a93c <__assert_func>
 8009868:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800986c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009870:	bb2d      	cbnz	r5, 80098be <__d2b+0x7a>
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	f1b8 0300 	subs.w	r3, r8, #0
 8009878:	d026      	beq.n	80098c8 <__d2b+0x84>
 800987a:	4668      	mov	r0, sp
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	f7ff fd87 	bl	8009390 <__lo0bits>
 8009882:	9900      	ldr	r1, [sp, #0]
 8009884:	b1f0      	cbz	r0, 80098c4 <__d2b+0x80>
 8009886:	9a01      	ldr	r2, [sp, #4]
 8009888:	f1c0 0320 	rsb	r3, r0, #32
 800988c:	fa02 f303 	lsl.w	r3, r2, r3
 8009890:	430b      	orrs	r3, r1
 8009892:	40c2      	lsrs	r2, r0
 8009894:	6163      	str	r3, [r4, #20]
 8009896:	9201      	str	r2, [sp, #4]
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	bf14      	ite	ne
 800989e:	2102      	movne	r1, #2
 80098a0:	2101      	moveq	r1, #1
 80098a2:	61a3      	str	r3, [r4, #24]
 80098a4:	6121      	str	r1, [r4, #16]
 80098a6:	b1c5      	cbz	r5, 80098da <__d2b+0x96>
 80098a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098ac:	4405      	add	r5, r0
 80098ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098b2:	603d      	str	r5, [r7, #0]
 80098b4:	6030      	str	r0, [r6, #0]
 80098b6:	4620      	mov	r0, r4
 80098b8:	b002      	add	sp, #8
 80098ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098c2:	e7d6      	b.n	8009872 <__d2b+0x2e>
 80098c4:	6161      	str	r1, [r4, #20]
 80098c6:	e7e7      	b.n	8009898 <__d2b+0x54>
 80098c8:	a801      	add	r0, sp, #4
 80098ca:	f7ff fd61 	bl	8009390 <__lo0bits>
 80098ce:	2101      	movs	r1, #1
 80098d0:	9b01      	ldr	r3, [sp, #4]
 80098d2:	6121      	str	r1, [r4, #16]
 80098d4:	6163      	str	r3, [r4, #20]
 80098d6:	3020      	adds	r0, #32
 80098d8:	e7e5      	b.n	80098a6 <__d2b+0x62>
 80098da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80098de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098e2:	6038      	str	r0, [r7, #0]
 80098e4:	6918      	ldr	r0, [r3, #16]
 80098e6:	f7ff fd33 	bl	8009350 <__hi0bits>
 80098ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80098ee:	6031      	str	r1, [r6, #0]
 80098f0:	e7e1      	b.n	80098b6 <__d2b+0x72>
 80098f2:	bf00      	nop
 80098f4:	0800ad55 	.word	0x0800ad55
 80098f8:	0800adc8 	.word	0x0800adc8

080098fc <_calloc_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	fb02 f501 	mul.w	r5, r2, r1
 8009902:	4629      	mov	r1, r5
 8009904:	f000 f854 	bl	80099b0 <_malloc_r>
 8009908:	4604      	mov	r4, r0
 800990a:	b118      	cbz	r0, 8009914 <_calloc_r+0x18>
 800990c:	462a      	mov	r2, r5
 800990e:	2100      	movs	r1, #0
 8009910:	f7fd fd12 	bl	8007338 <memset>
 8009914:	4620      	mov	r0, r4
 8009916:	bd38      	pop	{r3, r4, r5, pc}

08009918 <_free_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4605      	mov	r5, r0
 800991c:	2900      	cmp	r1, #0
 800991e:	d043      	beq.n	80099a8 <_free_r+0x90>
 8009920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009924:	1f0c      	subs	r4, r1, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfb8      	it	lt
 800992a:	18e4      	addlt	r4, r4, r3
 800992c:	f001 f884 	bl	800aa38 <__malloc_lock>
 8009930:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <_free_r+0x94>)
 8009932:	6813      	ldr	r3, [r2, #0]
 8009934:	4610      	mov	r0, r2
 8009936:	b933      	cbnz	r3, 8009946 <_free_r+0x2e>
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	6014      	str	r4, [r2, #0]
 800993c:	4628      	mov	r0, r5
 800993e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009942:	f001 b87f 	b.w	800aa44 <__malloc_unlock>
 8009946:	42a3      	cmp	r3, r4
 8009948:	d90a      	bls.n	8009960 <_free_r+0x48>
 800994a:	6821      	ldr	r1, [r4, #0]
 800994c:	1862      	adds	r2, r4, r1
 800994e:	4293      	cmp	r3, r2
 8009950:	bf01      	itttt	eq
 8009952:	681a      	ldreq	r2, [r3, #0]
 8009954:	685b      	ldreq	r3, [r3, #4]
 8009956:	1852      	addeq	r2, r2, r1
 8009958:	6022      	streq	r2, [r4, #0]
 800995a:	6063      	str	r3, [r4, #4]
 800995c:	6004      	str	r4, [r0, #0]
 800995e:	e7ed      	b.n	800993c <_free_r+0x24>
 8009960:	461a      	mov	r2, r3
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	b10b      	cbz	r3, 800996a <_free_r+0x52>
 8009966:	42a3      	cmp	r3, r4
 8009968:	d9fa      	bls.n	8009960 <_free_r+0x48>
 800996a:	6811      	ldr	r1, [r2, #0]
 800996c:	1850      	adds	r0, r2, r1
 800996e:	42a0      	cmp	r0, r4
 8009970:	d10b      	bne.n	800998a <_free_r+0x72>
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	4401      	add	r1, r0
 8009976:	1850      	adds	r0, r2, r1
 8009978:	4283      	cmp	r3, r0
 800997a:	6011      	str	r1, [r2, #0]
 800997c:	d1de      	bne.n	800993c <_free_r+0x24>
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4401      	add	r1, r0
 8009984:	6011      	str	r1, [r2, #0]
 8009986:	6053      	str	r3, [r2, #4]
 8009988:	e7d8      	b.n	800993c <_free_r+0x24>
 800998a:	d902      	bls.n	8009992 <_free_r+0x7a>
 800998c:	230c      	movs	r3, #12
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	e7d4      	b.n	800993c <_free_r+0x24>
 8009992:	6820      	ldr	r0, [r4, #0]
 8009994:	1821      	adds	r1, r4, r0
 8009996:	428b      	cmp	r3, r1
 8009998:	bf01      	itttt	eq
 800999a:	6819      	ldreq	r1, [r3, #0]
 800999c:	685b      	ldreq	r3, [r3, #4]
 800999e:	1809      	addeq	r1, r1, r0
 80099a0:	6021      	streq	r1, [r4, #0]
 80099a2:	6063      	str	r3, [r4, #4]
 80099a4:	6054      	str	r4, [r2, #4]
 80099a6:	e7c9      	b.n	800993c <_free_r+0x24>
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	2000021c 	.word	0x2000021c

080099b0 <_malloc_r>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	1ccd      	adds	r5, r1, #3
 80099b4:	f025 0503 	bic.w	r5, r5, #3
 80099b8:	3508      	adds	r5, #8
 80099ba:	2d0c      	cmp	r5, #12
 80099bc:	bf38      	it	cc
 80099be:	250c      	movcc	r5, #12
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	4606      	mov	r6, r0
 80099c4:	db01      	blt.n	80099ca <_malloc_r+0x1a>
 80099c6:	42a9      	cmp	r1, r5
 80099c8:	d903      	bls.n	80099d2 <_malloc_r+0x22>
 80099ca:	230c      	movs	r3, #12
 80099cc:	6033      	str	r3, [r6, #0]
 80099ce:	2000      	movs	r0, #0
 80099d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d2:	f001 f831 	bl	800aa38 <__malloc_lock>
 80099d6:	4921      	ldr	r1, [pc, #132]	; (8009a5c <_malloc_r+0xac>)
 80099d8:	680a      	ldr	r2, [r1, #0]
 80099da:	4614      	mov	r4, r2
 80099dc:	b99c      	cbnz	r4, 8009a06 <_malloc_r+0x56>
 80099de:	4f20      	ldr	r7, [pc, #128]	; (8009a60 <_malloc_r+0xb0>)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	b923      	cbnz	r3, 80099ee <_malloc_r+0x3e>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 fe20 	bl	800a62c <_sbrk_r>
 80099ec:	6038      	str	r0, [r7, #0]
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 fe1b 	bl	800a62c <_sbrk_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d123      	bne.n	8009a42 <_malloc_r+0x92>
 80099fa:	230c      	movs	r3, #12
 80099fc:	4630      	mov	r0, r6
 80099fe:	6033      	str	r3, [r6, #0]
 8009a00:	f001 f820 	bl	800aa44 <__malloc_unlock>
 8009a04:	e7e3      	b.n	80099ce <_malloc_r+0x1e>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	1b5b      	subs	r3, r3, r5
 8009a0a:	d417      	bmi.n	8009a3c <_malloc_r+0x8c>
 8009a0c:	2b0b      	cmp	r3, #11
 8009a0e:	d903      	bls.n	8009a18 <_malloc_r+0x68>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	441c      	add	r4, r3
 8009a14:	6025      	str	r5, [r4, #0]
 8009a16:	e004      	b.n	8009a22 <_malloc_r+0x72>
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	42a2      	cmp	r2, r4
 8009a1c:	bf0c      	ite	eq
 8009a1e:	600b      	streq	r3, [r1, #0]
 8009a20:	6053      	strne	r3, [r2, #4]
 8009a22:	4630      	mov	r0, r6
 8009a24:	f001 f80e 	bl	800aa44 <__malloc_unlock>
 8009a28:	f104 000b 	add.w	r0, r4, #11
 8009a2c:	1d23      	adds	r3, r4, #4
 8009a2e:	f020 0007 	bic.w	r0, r0, #7
 8009a32:	1ac2      	subs	r2, r0, r3
 8009a34:	d0cc      	beq.n	80099d0 <_malloc_r+0x20>
 8009a36:	1a1b      	subs	r3, r3, r0
 8009a38:	50a3      	str	r3, [r4, r2]
 8009a3a:	e7c9      	b.n	80099d0 <_malloc_r+0x20>
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	6864      	ldr	r4, [r4, #4]
 8009a40:	e7cc      	b.n	80099dc <_malloc_r+0x2c>
 8009a42:	1cc4      	adds	r4, r0, #3
 8009a44:	f024 0403 	bic.w	r4, r4, #3
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d0e3      	beq.n	8009a14 <_malloc_r+0x64>
 8009a4c:	1a21      	subs	r1, r4, r0
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 fdec 	bl	800a62c <_sbrk_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d1dd      	bne.n	8009a14 <_malloc_r+0x64>
 8009a58:	e7cf      	b.n	80099fa <_malloc_r+0x4a>
 8009a5a:	bf00      	nop
 8009a5c:	2000021c 	.word	0x2000021c
 8009a60:	20000220 	.word	0x20000220

08009a64 <__ssputs_r>:
 8009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	688e      	ldr	r6, [r1, #8]
 8009a6a:	4682      	mov	sl, r0
 8009a6c:	429e      	cmp	r6, r3
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4690      	mov	r8, r2
 8009a72:	461f      	mov	r7, r3
 8009a74:	d838      	bhi.n	8009ae8 <__ssputs_r+0x84>
 8009a76:	898a      	ldrh	r2, [r1, #12]
 8009a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a7c:	d032      	beq.n	8009ae4 <__ssputs_r+0x80>
 8009a7e:	6825      	ldr	r5, [r4, #0]
 8009a80:	6909      	ldr	r1, [r1, #16]
 8009a82:	3301      	adds	r3, #1
 8009a84:	eba5 0901 	sub.w	r9, r5, r1
 8009a88:	6965      	ldr	r5, [r4, #20]
 8009a8a:	444b      	add	r3, r9
 8009a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a94:	106d      	asrs	r5, r5, #1
 8009a96:	429d      	cmp	r5, r3
 8009a98:	bf38      	it	cc
 8009a9a:	461d      	movcc	r5, r3
 8009a9c:	0553      	lsls	r3, r2, #21
 8009a9e:	d531      	bpl.n	8009b04 <__ssputs_r+0xa0>
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	f7ff ff85 	bl	80099b0 <_malloc_r>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	b950      	cbnz	r0, 8009ac0 <__ssputs_r+0x5c>
 8009aaa:	230c      	movs	r3, #12
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	f8ca 3000 	str.w	r3, [sl]
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac0:	464a      	mov	r2, r9
 8009ac2:	6921      	ldr	r1, [r4, #16]
 8009ac4:	f7ff fb8a 	bl	80091dc <memcpy>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	6126      	str	r6, [r4, #16]
 8009ad6:	444e      	add	r6, r9
 8009ad8:	6026      	str	r6, [r4, #0]
 8009ada:	463e      	mov	r6, r7
 8009adc:	6165      	str	r5, [r4, #20]
 8009ade:	eba5 0509 	sub.w	r5, r5, r9
 8009ae2:	60a5      	str	r5, [r4, #8]
 8009ae4:	42be      	cmp	r6, r7
 8009ae6:	d900      	bls.n	8009aea <__ssputs_r+0x86>
 8009ae8:	463e      	mov	r6, r7
 8009aea:	4632      	mov	r2, r6
 8009aec:	4641      	mov	r1, r8
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	f000 ff88 	bl	800aa04 <memmove>
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	1b9b      	subs	r3, r3, r6
 8009afa:	4432      	add	r2, r6
 8009afc:	2000      	movs	r0, #0
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	6022      	str	r2, [r4, #0]
 8009b02:	e7db      	b.n	8009abc <__ssputs_r+0x58>
 8009b04:	462a      	mov	r2, r5
 8009b06:	f000 ffa3 	bl	800aa50 <_realloc_r>
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1e1      	bne.n	8009ad4 <__ssputs_r+0x70>
 8009b10:	4650      	mov	r0, sl
 8009b12:	6921      	ldr	r1, [r4, #16]
 8009b14:	f7ff ff00 	bl	8009918 <_free_r>
 8009b18:	e7c7      	b.n	8009aaa <__ssputs_r+0x46>
	...

08009b1c <_svfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4698      	mov	r8, r3
 8009b22:	898b      	ldrh	r3, [r1, #12]
 8009b24:	4607      	mov	r7, r0
 8009b26:	061b      	lsls	r3, r3, #24
 8009b28:	460d      	mov	r5, r1
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	b09d      	sub	sp, #116	; 0x74
 8009b2e:	d50e      	bpl.n	8009b4e <_svfiprintf_r+0x32>
 8009b30:	690b      	ldr	r3, [r1, #16]
 8009b32:	b963      	cbnz	r3, 8009b4e <_svfiprintf_r+0x32>
 8009b34:	2140      	movs	r1, #64	; 0x40
 8009b36:	f7ff ff3b 	bl	80099b0 <_malloc_r>
 8009b3a:	6028      	str	r0, [r5, #0]
 8009b3c:	6128      	str	r0, [r5, #16]
 8009b3e:	b920      	cbnz	r0, 8009b4a <_svfiprintf_r+0x2e>
 8009b40:	230c      	movs	r3, #12
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	e0d1      	b.n	8009cee <_svfiprintf_r+0x1d2>
 8009b4a:	2340      	movs	r3, #64	; 0x40
 8009b4c:	616b      	str	r3, [r5, #20]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9309      	str	r3, [sp, #36]	; 0x24
 8009b52:	2320      	movs	r3, #32
 8009b54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b58:	2330      	movs	r3, #48	; 0x30
 8009b5a:	f04f 0901 	mov.w	r9, #1
 8009b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d08 <_svfiprintf_r+0x1ec>
 8009b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	469a      	mov	sl, r3
 8009b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b72:	b10a      	cbz	r2, 8009b78 <_svfiprintf_r+0x5c>
 8009b74:	2a25      	cmp	r2, #37	; 0x25
 8009b76:	d1f9      	bne.n	8009b6c <_svfiprintf_r+0x50>
 8009b78:	ebba 0b04 	subs.w	fp, sl, r4
 8009b7c:	d00b      	beq.n	8009b96 <_svfiprintf_r+0x7a>
 8009b7e:	465b      	mov	r3, fp
 8009b80:	4622      	mov	r2, r4
 8009b82:	4629      	mov	r1, r5
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff ff6d 	bl	8009a64 <__ssputs_r>
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f000 80aa 	beq.w	8009ce4 <_svfiprintf_r+0x1c8>
 8009b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b92:	445a      	add	r2, fp
 8009b94:	9209      	str	r2, [sp, #36]	; 0x24
 8009b96:	f89a 3000 	ldrb.w	r3, [sl]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80a2 	beq.w	8009ce4 <_svfiprintf_r+0x1c8>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009baa:	f10a 0a01 	add.w	sl, sl, #1
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb8:	4654      	mov	r4, sl
 8009bba:	2205      	movs	r2, #5
 8009bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc0:	4851      	ldr	r0, [pc, #324]	; (8009d08 <_svfiprintf_r+0x1ec>)
 8009bc2:	f7ff fafd 	bl	80091c0 <memchr>
 8009bc6:	9a04      	ldr	r2, [sp, #16]
 8009bc8:	b9d8      	cbnz	r0, 8009c02 <_svfiprintf_r+0xe6>
 8009bca:	06d0      	lsls	r0, r2, #27
 8009bcc:	bf44      	itt	mi
 8009bce:	2320      	movmi	r3, #32
 8009bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd4:	0711      	lsls	r1, r2, #28
 8009bd6:	bf44      	itt	mi
 8009bd8:	232b      	movmi	r3, #43	; 0x2b
 8009bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bde:	f89a 3000 	ldrb.w	r3, [sl]
 8009be2:	2b2a      	cmp	r3, #42	; 0x2a
 8009be4:	d015      	beq.n	8009c12 <_svfiprintf_r+0xf6>
 8009be6:	4654      	mov	r4, sl
 8009be8:	2000      	movs	r0, #0
 8009bea:	f04f 0c0a 	mov.w	ip, #10
 8009bee:	9a07      	ldr	r2, [sp, #28]
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf6:	3b30      	subs	r3, #48	; 0x30
 8009bf8:	2b09      	cmp	r3, #9
 8009bfa:	d94e      	bls.n	8009c9a <_svfiprintf_r+0x17e>
 8009bfc:	b1b0      	cbz	r0, 8009c2c <_svfiprintf_r+0x110>
 8009bfe:	9207      	str	r2, [sp, #28]
 8009c00:	e014      	b.n	8009c2c <_svfiprintf_r+0x110>
 8009c02:	eba0 0308 	sub.w	r3, r0, r8
 8009c06:	fa09 f303 	lsl.w	r3, r9, r3
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	46a2      	mov	sl, r4
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	e7d2      	b.n	8009bb8 <_svfiprintf_r+0x9c>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	1d19      	adds	r1, r3, #4
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	9103      	str	r1, [sp, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	bfbb      	ittet	lt
 8009c1e:	425b      	neglt	r3, r3
 8009c20:	f042 0202 	orrlt.w	r2, r2, #2
 8009c24:	9307      	strge	r3, [sp, #28]
 8009c26:	9307      	strlt	r3, [sp, #28]
 8009c28:	bfb8      	it	lt
 8009c2a:	9204      	strlt	r2, [sp, #16]
 8009c2c:	7823      	ldrb	r3, [r4, #0]
 8009c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c30:	d10c      	bne.n	8009c4c <_svfiprintf_r+0x130>
 8009c32:	7863      	ldrb	r3, [r4, #1]
 8009c34:	2b2a      	cmp	r3, #42	; 0x2a
 8009c36:	d135      	bne.n	8009ca4 <_svfiprintf_r+0x188>
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	3402      	adds	r4, #2
 8009c3c:	1d1a      	adds	r2, r3, #4
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	9203      	str	r2, [sp, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bfb8      	it	lt
 8009c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d18 <_svfiprintf_r+0x1fc>
 8009c50:	2203      	movs	r2, #3
 8009c52:	4650      	mov	r0, sl
 8009c54:	7821      	ldrb	r1, [r4, #0]
 8009c56:	f7ff fab3 	bl	80091c0 <memchr>
 8009c5a:	b140      	cbz	r0, 8009c6e <_svfiprintf_r+0x152>
 8009c5c:	2340      	movs	r3, #64	; 0x40
 8009c5e:	eba0 000a 	sub.w	r0, r0, sl
 8009c62:	fa03 f000 	lsl.w	r0, r3, r0
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	3401      	adds	r4, #1
 8009c6a:	4303      	orrs	r3, r0
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c72:	2206      	movs	r2, #6
 8009c74:	4825      	ldr	r0, [pc, #148]	; (8009d0c <_svfiprintf_r+0x1f0>)
 8009c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c7a:	f7ff faa1 	bl	80091c0 <memchr>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d038      	beq.n	8009cf4 <_svfiprintf_r+0x1d8>
 8009c82:	4b23      	ldr	r3, [pc, #140]	; (8009d10 <_svfiprintf_r+0x1f4>)
 8009c84:	bb1b      	cbnz	r3, 8009cce <_svfiprintf_r+0x1b2>
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	3307      	adds	r3, #7
 8009c8a:	f023 0307 	bic.w	r3, r3, #7
 8009c8e:	3308      	adds	r3, #8
 8009c90:	9303      	str	r3, [sp, #12]
 8009c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c94:	4433      	add	r3, r6
 8009c96:	9309      	str	r3, [sp, #36]	; 0x24
 8009c98:	e767      	b.n	8009b6a <_svfiprintf_r+0x4e>
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ca2:	e7a5      	b.n	8009bf0 <_svfiprintf_r+0xd4>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f04f 0c0a 	mov.w	ip, #10
 8009caa:	4619      	mov	r1, r3
 8009cac:	3401      	adds	r4, #1
 8009cae:	9305      	str	r3, [sp, #20]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb6:	3a30      	subs	r2, #48	; 0x30
 8009cb8:	2a09      	cmp	r2, #9
 8009cba:	d903      	bls.n	8009cc4 <_svfiprintf_r+0x1a8>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0c5      	beq.n	8009c4c <_svfiprintf_r+0x130>
 8009cc0:	9105      	str	r1, [sp, #20]
 8009cc2:	e7c3      	b.n	8009c4c <_svfiprintf_r+0x130>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ccc:	e7f0      	b.n	8009cb0 <_svfiprintf_r+0x194>
 8009cce:	ab03      	add	r3, sp, #12
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <_svfiprintf_r+0x1f8>)
 8009cd8:	a904      	add	r1, sp, #16
 8009cda:	f7fd fbd3 	bl	8007484 <_printf_float>
 8009cde:	1c42      	adds	r2, r0, #1
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	d1d6      	bne.n	8009c92 <_svfiprintf_r+0x176>
 8009ce4:	89ab      	ldrh	r3, [r5, #12]
 8009ce6:	065b      	lsls	r3, r3, #25
 8009ce8:	f53f af2c 	bmi.w	8009b44 <_svfiprintf_r+0x28>
 8009cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cee:	b01d      	add	sp, #116	; 0x74
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf4:	ab03      	add	r3, sp, #12
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	462a      	mov	r2, r5
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <_svfiprintf_r+0x1f8>)
 8009cfe:	a904      	add	r1, sp, #16
 8009d00:	f7fd fe5c 	bl	80079bc <_printf_i>
 8009d04:	e7eb      	b.n	8009cde <_svfiprintf_r+0x1c2>
 8009d06:	bf00      	nop
 8009d08:	0800af24 	.word	0x0800af24
 8009d0c:	0800af2e 	.word	0x0800af2e
 8009d10:	08007485 	.word	0x08007485
 8009d14:	08009a65 	.word	0x08009a65
 8009d18:	0800af2a 	.word	0x0800af2a

08009d1c <_sungetc_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	1c4b      	adds	r3, r1, #1
 8009d20:	4614      	mov	r4, r2
 8009d22:	d103      	bne.n	8009d2c <_sungetc_r+0x10>
 8009d24:	f04f 35ff 	mov.w	r5, #4294967295
 8009d28:	4628      	mov	r0, r5
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	8993      	ldrh	r3, [r2, #12]
 8009d2e:	b2cd      	uxtb	r5, r1
 8009d30:	f023 0320 	bic.w	r3, r3, #32
 8009d34:	8193      	strh	r3, [r2, #12]
 8009d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d38:	6852      	ldr	r2, [r2, #4]
 8009d3a:	b18b      	cbz	r3, 8009d60 <_sungetc_r+0x44>
 8009d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	dd08      	ble.n	8009d54 <_sungetc_r+0x38>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	1e5a      	subs	r2, r3, #1
 8009d46:	6022      	str	r2, [r4, #0]
 8009d48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009d4c:	6863      	ldr	r3, [r4, #4]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	e7e9      	b.n	8009d28 <_sungetc_r+0xc>
 8009d54:	4621      	mov	r1, r4
 8009d56:	f000 fdb9 	bl	800a8cc <__submore>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0f1      	beq.n	8009d42 <_sungetc_r+0x26>
 8009d5e:	e7e1      	b.n	8009d24 <_sungetc_r+0x8>
 8009d60:	6921      	ldr	r1, [r4, #16]
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	b151      	cbz	r1, 8009d7c <_sungetc_r+0x60>
 8009d66:	4299      	cmp	r1, r3
 8009d68:	d208      	bcs.n	8009d7c <_sungetc_r+0x60>
 8009d6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009d6e:	42a9      	cmp	r1, r5
 8009d70:	d104      	bne.n	8009d7c <_sungetc_r+0x60>
 8009d72:	3b01      	subs	r3, #1
 8009d74:	3201      	adds	r2, #1
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	6062      	str	r2, [r4, #4]
 8009d7a:	e7d5      	b.n	8009d28 <_sungetc_r+0xc>
 8009d7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d84:	6363      	str	r3, [r4, #52]	; 0x34
 8009d86:	2303      	movs	r3, #3
 8009d88:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	2301      	movs	r3, #1
 8009d94:	e7dc      	b.n	8009d50 <_sungetc_r+0x34>

08009d96 <__ssrefill_r>:
 8009d96:	b510      	push	{r4, lr}
 8009d98:	460c      	mov	r4, r1
 8009d9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d9c:	b169      	cbz	r1, 8009dba <__ssrefill_r+0x24>
 8009d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009da2:	4299      	cmp	r1, r3
 8009da4:	d001      	beq.n	8009daa <__ssrefill_r+0x14>
 8009da6:	f7ff fdb7 	bl	8009918 <_free_r>
 8009daa:	2000      	movs	r0, #0
 8009dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dae:	6360      	str	r0, [r4, #52]	; 0x34
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	b113      	cbz	r3, 8009dba <__ssrefill_r+0x24>
 8009db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	bd10      	pop	{r4, pc}
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f043 0320 	orr.w	r3, r3, #32
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	e7f3      	b.n	8009db8 <__ssrefill_r+0x22>

08009dd0 <__ssvfiscanf_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4606      	mov	r6, r0
 8009dda:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009dde:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009de2:	49b3      	ldr	r1, [pc, #716]	; (800a0b0 <__ssvfiscanf_r+0x2e0>)
 8009de4:	f10d 0804 	add.w	r8, sp, #4
 8009de8:	91a0      	str	r1, [sp, #640]	; 0x280
 8009dea:	49b2      	ldr	r1, [pc, #712]	; (800a0b4 <__ssvfiscanf_r+0x2e4>)
 8009dec:	4fb2      	ldr	r7, [pc, #712]	; (800a0b8 <__ssvfiscanf_r+0x2e8>)
 8009dee:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800a0bc <__ssvfiscanf_r+0x2ec>
 8009df2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009df6:	91a1      	str	r1, [sp, #644]	; 0x284
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	f892 a000 	ldrb.w	sl, [r2]
 8009dfe:	f1ba 0f00 	cmp.w	sl, #0
 8009e02:	f000 8153 	beq.w	800a0ac <__ssvfiscanf_r+0x2dc>
 8009e06:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009e0a:	1c55      	adds	r5, r2, #1
 8009e0c:	f013 0308 	ands.w	r3, r3, #8
 8009e10:	d019      	beq.n	8009e46 <__ssvfiscanf_r+0x76>
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	dd0f      	ble.n	8009e38 <__ssvfiscanf_r+0x68>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	5cba      	ldrb	r2, [r7, r2]
 8009e1e:	0712      	lsls	r2, r2, #28
 8009e20:	d401      	bmi.n	8009e26 <__ssvfiscanf_r+0x56>
 8009e22:	462a      	mov	r2, r5
 8009e24:	e7e9      	b.n	8009dfa <__ssvfiscanf_r+0x2a>
 8009e26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e28:	3301      	adds	r3, #1
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	9245      	str	r2, [sp, #276]	; 0x114
 8009e2e:	6862      	ldr	r2, [r4, #4]
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	3a01      	subs	r2, #1
 8009e34:	6062      	str	r2, [r4, #4]
 8009e36:	e7ec      	b.n	8009e12 <__ssvfiscanf_r+0x42>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e3e:	4798      	blx	r3
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0e9      	beq.n	8009e18 <__ssvfiscanf_r+0x48>
 8009e44:	e7ed      	b.n	8009e22 <__ssvfiscanf_r+0x52>
 8009e46:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009e4a:	f040 8086 	bne.w	8009f5a <__ssvfiscanf_r+0x18a>
 8009e4e:	9341      	str	r3, [sp, #260]	; 0x104
 8009e50:	9343      	str	r3, [sp, #268]	; 0x10c
 8009e52:	7853      	ldrb	r3, [r2, #1]
 8009e54:	2b2a      	cmp	r3, #42	; 0x2a
 8009e56:	bf04      	itt	eq
 8009e58:	2310      	moveq	r3, #16
 8009e5a:	1c95      	addeq	r5, r2, #2
 8009e5c:	f04f 020a 	mov.w	r2, #10
 8009e60:	bf08      	it	eq
 8009e62:	9341      	streq	r3, [sp, #260]	; 0x104
 8009e64:	46ab      	mov	fp, r5
 8009e66:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009e6a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009e6e:	2b09      	cmp	r3, #9
 8009e70:	d91d      	bls.n	8009eae <__ssvfiscanf_r+0xde>
 8009e72:	2203      	movs	r2, #3
 8009e74:	4891      	ldr	r0, [pc, #580]	; (800a0bc <__ssvfiscanf_r+0x2ec>)
 8009e76:	f7ff f9a3 	bl	80091c0 <memchr>
 8009e7a:	b140      	cbz	r0, 8009e8e <__ssvfiscanf_r+0xbe>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	465d      	mov	r5, fp
 8009e80:	eba0 0009 	sub.w	r0, r0, r9
 8009e84:	fa03 f000 	lsl.w	r0, r3, r0
 8009e88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e8a:	4318      	orrs	r0, r3
 8009e8c:	9041      	str	r0, [sp, #260]	; 0x104
 8009e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e92:	2b78      	cmp	r3, #120	; 0x78
 8009e94:	d806      	bhi.n	8009ea4 <__ssvfiscanf_r+0xd4>
 8009e96:	2b57      	cmp	r3, #87	; 0x57
 8009e98:	d810      	bhi.n	8009ebc <__ssvfiscanf_r+0xec>
 8009e9a:	2b25      	cmp	r3, #37	; 0x25
 8009e9c:	d05d      	beq.n	8009f5a <__ssvfiscanf_r+0x18a>
 8009e9e:	d857      	bhi.n	8009f50 <__ssvfiscanf_r+0x180>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d075      	beq.n	8009f90 <__ssvfiscanf_r+0x1c0>
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	9342      	str	r3, [sp, #264]	; 0x108
 8009eac:	e082      	b.n	8009fb4 <__ssvfiscanf_r+0x1e4>
 8009eae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009eb0:	465d      	mov	r5, fp
 8009eb2:	fb02 1303 	mla	r3, r2, r3, r1
 8009eb6:	3b30      	subs	r3, #48	; 0x30
 8009eb8:	9343      	str	r3, [sp, #268]	; 0x10c
 8009eba:	e7d3      	b.n	8009e64 <__ssvfiscanf_r+0x94>
 8009ebc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009ec0:	2a20      	cmp	r2, #32
 8009ec2:	d8ef      	bhi.n	8009ea4 <__ssvfiscanf_r+0xd4>
 8009ec4:	a101      	add	r1, pc, #4	; (adr r1, 8009ecc <__ssvfiscanf_r+0xfc>)
 8009ec6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009f9f 	.word	0x08009f9f
 8009ed0:	08009ea5 	.word	0x08009ea5
 8009ed4:	08009ea5 	.word	0x08009ea5
 8009ed8:	08009ffd 	.word	0x08009ffd
 8009edc:	08009ea5 	.word	0x08009ea5
 8009ee0:	08009ea5 	.word	0x08009ea5
 8009ee4:	08009ea5 	.word	0x08009ea5
 8009ee8:	08009ea5 	.word	0x08009ea5
 8009eec:	08009ea5 	.word	0x08009ea5
 8009ef0:	08009ea5 	.word	0x08009ea5
 8009ef4:	08009ea5 	.word	0x08009ea5
 8009ef8:	0800a013 	.word	0x0800a013
 8009efc:	08009fe9 	.word	0x08009fe9
 8009f00:	08009f57 	.word	0x08009f57
 8009f04:	08009f57 	.word	0x08009f57
 8009f08:	08009f57 	.word	0x08009f57
 8009f0c:	08009ea5 	.word	0x08009ea5
 8009f10:	08009fed 	.word	0x08009fed
 8009f14:	08009ea5 	.word	0x08009ea5
 8009f18:	08009ea5 	.word	0x08009ea5
 8009f1c:	08009ea5 	.word	0x08009ea5
 8009f20:	08009ea5 	.word	0x08009ea5
 8009f24:	0800a023 	.word	0x0800a023
 8009f28:	08009ff5 	.word	0x08009ff5
 8009f2c:	08009f97 	.word	0x08009f97
 8009f30:	08009ea5 	.word	0x08009ea5
 8009f34:	08009ea5 	.word	0x08009ea5
 8009f38:	0800a01f 	.word	0x0800a01f
 8009f3c:	08009ea5 	.word	0x08009ea5
 8009f40:	08009fe9 	.word	0x08009fe9
 8009f44:	08009ea5 	.word	0x08009ea5
 8009f48:	08009ea5 	.word	0x08009ea5
 8009f4c:	08009f9f 	.word	0x08009f9f
 8009f50:	3b45      	subs	r3, #69	; 0x45
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d8a6      	bhi.n	8009ea4 <__ssvfiscanf_r+0xd4>
 8009f56:	2305      	movs	r3, #5
 8009f58:	e02b      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 8009f5a:	6863      	ldr	r3, [r4, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd0d      	ble.n	8009f7c <__ssvfiscanf_r+0x1ac>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	4552      	cmp	r2, sl
 8009f66:	f040 80a1 	bne.w	800a0ac <__ssvfiscanf_r+0x2dc>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6862      	ldr	r2, [r4, #4]
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009f72:	3a01      	subs	r2, #1
 8009f74:	3301      	adds	r3, #1
 8009f76:	6062      	str	r2, [r4, #4]
 8009f78:	9345      	str	r3, [sp, #276]	; 0x114
 8009f7a:	e752      	b.n	8009e22 <__ssvfiscanf_r+0x52>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4630      	mov	r0, r6
 8009f80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f82:	4798      	blx	r3
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d0eb      	beq.n	8009f60 <__ssvfiscanf_r+0x190>
 8009f88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	f040 8084 	bne.w	800a098 <__ssvfiscanf_r+0x2c8>
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e086      	b.n	800a0a4 <__ssvfiscanf_r+0x2d4>
 8009f96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f98:	f042 0220 	orr.w	r2, r2, #32
 8009f9c:	9241      	str	r2, [sp, #260]	; 0x104
 8009f9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fa4:	9241      	str	r2, [sp, #260]	; 0x104
 8009fa6:	2210      	movs	r2, #16
 8009fa8:	2b6f      	cmp	r3, #111	; 0x6f
 8009faa:	bf34      	ite	cc
 8009fac:	2303      	movcc	r3, #3
 8009fae:	2304      	movcs	r3, #4
 8009fb0:	9242      	str	r2, [sp, #264]	; 0x108
 8009fb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dd41      	ble.n	800a03e <__ssvfiscanf_r+0x26e>
 8009fba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fbc:	0659      	lsls	r1, r3, #25
 8009fbe:	d404      	bmi.n	8009fca <__ssvfiscanf_r+0x1fa>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	5cba      	ldrb	r2, [r7, r2]
 8009fc6:	0712      	lsls	r2, r2, #28
 8009fc8:	d440      	bmi.n	800a04c <__ssvfiscanf_r+0x27c>
 8009fca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	dc4f      	bgt.n	800a070 <__ssvfiscanf_r+0x2a0>
 8009fd0:	466b      	mov	r3, sp
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	a941      	add	r1, sp, #260	; 0x104
 8009fd8:	f000 f9cc 	bl	800a374 <_scanf_chars>
 8009fdc:	2801      	cmp	r0, #1
 8009fde:	d065      	beq.n	800a0ac <__ssvfiscanf_r+0x2dc>
 8009fe0:	2802      	cmp	r0, #2
 8009fe2:	f47f af1e 	bne.w	8009e22 <__ssvfiscanf_r+0x52>
 8009fe6:	e7cf      	b.n	8009f88 <__ssvfiscanf_r+0x1b8>
 8009fe8:	220a      	movs	r2, #10
 8009fea:	e7dd      	b.n	8009fa8 <__ssvfiscanf_r+0x1d8>
 8009fec:	2300      	movs	r3, #0
 8009fee:	9342      	str	r3, [sp, #264]	; 0x108
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e7de      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	9342      	str	r3, [sp, #264]	; 0x108
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	e7da      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4640      	mov	r0, r8
 800a000:	f000 fb24 	bl	800a64c <__sccl>
 800a004:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a006:	4605      	mov	r5, r0
 800a008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00c:	9341      	str	r3, [sp, #260]	; 0x104
 800a00e:	2301      	movs	r3, #1
 800a010:	e7cf      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 800a012:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a018:	9341      	str	r3, [sp, #260]	; 0x104
 800a01a:	2300      	movs	r3, #0
 800a01c:	e7c9      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 800a01e:	2302      	movs	r3, #2
 800a020:	e7c7      	b.n	8009fb2 <__ssvfiscanf_r+0x1e2>
 800a022:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a024:	06c3      	lsls	r3, r0, #27
 800a026:	f53f aefc 	bmi.w	8009e22 <__ssvfiscanf_r+0x52>
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a02e:	1d19      	adds	r1, r3, #4
 800a030:	9100      	str	r1, [sp, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	07c0      	lsls	r0, r0, #31
 800a036:	bf4c      	ite	mi
 800a038:	801a      	strhmi	r2, [r3, #0]
 800a03a:	601a      	strpl	r2, [r3, #0]
 800a03c:	e6f1      	b.n	8009e22 <__ssvfiscanf_r+0x52>
 800a03e:	4621      	mov	r1, r4
 800a040:	4630      	mov	r0, r6
 800a042:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a044:	4798      	blx	r3
 800a046:	2800      	cmp	r0, #0
 800a048:	d0b7      	beq.n	8009fba <__ssvfiscanf_r+0x1ea>
 800a04a:	e79d      	b.n	8009f88 <__ssvfiscanf_r+0x1b8>
 800a04c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a04e:	3201      	adds	r2, #1
 800a050:	9245      	str	r2, [sp, #276]	; 0x114
 800a052:	6862      	ldr	r2, [r4, #4]
 800a054:	3a01      	subs	r2, #1
 800a056:	2a00      	cmp	r2, #0
 800a058:	6062      	str	r2, [r4, #4]
 800a05a:	dd02      	ble.n	800a062 <__ssvfiscanf_r+0x292>
 800a05c:	3301      	adds	r3, #1
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	e7ae      	b.n	8009fc0 <__ssvfiscanf_r+0x1f0>
 800a062:	4621      	mov	r1, r4
 800a064:	4630      	mov	r0, r6
 800a066:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a068:	4798      	blx	r3
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0a8      	beq.n	8009fc0 <__ssvfiscanf_r+0x1f0>
 800a06e:	e78b      	b.n	8009f88 <__ssvfiscanf_r+0x1b8>
 800a070:	2b04      	cmp	r3, #4
 800a072:	dc06      	bgt.n	800a082 <__ssvfiscanf_r+0x2b2>
 800a074:	466b      	mov	r3, sp
 800a076:	4622      	mov	r2, r4
 800a078:	4630      	mov	r0, r6
 800a07a:	a941      	add	r1, sp, #260	; 0x104
 800a07c:	f000 f9d2 	bl	800a424 <_scanf_i>
 800a080:	e7ac      	b.n	8009fdc <__ssvfiscanf_r+0x20c>
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <__ssvfiscanf_r+0x2f0>)
 800a084:	2b00      	cmp	r3, #0
 800a086:	f43f aecc 	beq.w	8009e22 <__ssvfiscanf_r+0x52>
 800a08a:	466b      	mov	r3, sp
 800a08c:	4622      	mov	r2, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	a941      	add	r1, sp, #260	; 0x104
 800a092:	f3af 8000 	nop.w
 800a096:	e7a1      	b.n	8009fdc <__ssvfiscanf_r+0x20c>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a09e:	bf18      	it	ne
 800a0a0:	f04f 30ff 	movne.w	r0, #4294967295
 800a0a4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a0ae:	e7f9      	b.n	800a0a4 <__ssvfiscanf_r+0x2d4>
 800a0b0:	08009d1d 	.word	0x08009d1d
 800a0b4:	08009d97 	.word	0x08009d97
 800a0b8:	0800af8d 	.word	0x0800af8d
 800a0bc:	0800af2a 	.word	0x0800af2a
 800a0c0:	00000000 	.word	0x00000000

0800a0c4 <__sfputc_r>:
 800a0c4:	6893      	ldr	r3, [r2, #8]
 800a0c6:	b410      	push	{r4}
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	6093      	str	r3, [r2, #8]
 800a0ce:	da07      	bge.n	800a0e0 <__sfputc_r+0x1c>
 800a0d0:	6994      	ldr	r4, [r2, #24]
 800a0d2:	42a3      	cmp	r3, r4
 800a0d4:	db01      	blt.n	800a0da <__sfputc_r+0x16>
 800a0d6:	290a      	cmp	r1, #10
 800a0d8:	d102      	bne.n	800a0e0 <__sfputc_r+0x1c>
 800a0da:	bc10      	pop	{r4}
 800a0dc:	f7fd bed2 	b.w	8007e84 <__swbuf_r>
 800a0e0:	6813      	ldr	r3, [r2, #0]
 800a0e2:	1c58      	adds	r0, r3, #1
 800a0e4:	6010      	str	r0, [r2, #0]
 800a0e6:	7019      	strb	r1, [r3, #0]
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	bc10      	pop	{r4}
 800a0ec:	4770      	bx	lr

0800a0ee <__sfputs_r>:
 800a0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	460f      	mov	r7, r1
 800a0f4:	4614      	mov	r4, r2
 800a0f6:	18d5      	adds	r5, r2, r3
 800a0f8:	42ac      	cmp	r4, r5
 800a0fa:	d101      	bne.n	800a100 <__sfputs_r+0x12>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e007      	b.n	800a110 <__sfputs_r+0x22>
 800a100:	463a      	mov	r2, r7
 800a102:	4630      	mov	r0, r6
 800a104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a108:	f7ff ffdc 	bl	800a0c4 <__sfputc_r>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d1f3      	bne.n	800a0f8 <__sfputs_r+0xa>
 800a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a114 <_vfiprintf_r>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	460d      	mov	r5, r1
 800a11a:	4614      	mov	r4, r2
 800a11c:	4698      	mov	r8, r3
 800a11e:	4606      	mov	r6, r0
 800a120:	b09d      	sub	sp, #116	; 0x74
 800a122:	b118      	cbz	r0, 800a12c <_vfiprintf_r+0x18>
 800a124:	6983      	ldr	r3, [r0, #24]
 800a126:	b90b      	cbnz	r3, 800a12c <_vfiprintf_r+0x18>
 800a128:	f7fe ff26 	bl	8008f78 <__sinit>
 800a12c:	4b89      	ldr	r3, [pc, #548]	; (800a354 <_vfiprintf_r+0x240>)
 800a12e:	429d      	cmp	r5, r3
 800a130:	d11b      	bne.n	800a16a <_vfiprintf_r+0x56>
 800a132:	6875      	ldr	r5, [r6, #4]
 800a134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a136:	07d9      	lsls	r1, r3, #31
 800a138:	d405      	bmi.n	800a146 <_vfiprintf_r+0x32>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	059a      	lsls	r2, r3, #22
 800a13e:	d402      	bmi.n	800a146 <_vfiprintf_r+0x32>
 800a140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a142:	f7fe ffbc 	bl	80090be <__retarget_lock_acquire_recursive>
 800a146:	89ab      	ldrh	r3, [r5, #12]
 800a148:	071b      	lsls	r3, r3, #28
 800a14a:	d501      	bpl.n	800a150 <_vfiprintf_r+0x3c>
 800a14c:	692b      	ldr	r3, [r5, #16]
 800a14e:	b9eb      	cbnz	r3, 800a18c <_vfiprintf_r+0x78>
 800a150:	4629      	mov	r1, r5
 800a152:	4630      	mov	r0, r6
 800a154:	f7fd fefa 	bl	8007f4c <__swsetup_r>
 800a158:	b1c0      	cbz	r0, 800a18c <_vfiprintf_r+0x78>
 800a15a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a15c:	07dc      	lsls	r4, r3, #31
 800a15e:	d50e      	bpl.n	800a17e <_vfiprintf_r+0x6a>
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	b01d      	add	sp, #116	; 0x74
 800a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16a:	4b7b      	ldr	r3, [pc, #492]	; (800a358 <_vfiprintf_r+0x244>)
 800a16c:	429d      	cmp	r5, r3
 800a16e:	d101      	bne.n	800a174 <_vfiprintf_r+0x60>
 800a170:	68b5      	ldr	r5, [r6, #8]
 800a172:	e7df      	b.n	800a134 <_vfiprintf_r+0x20>
 800a174:	4b79      	ldr	r3, [pc, #484]	; (800a35c <_vfiprintf_r+0x248>)
 800a176:	429d      	cmp	r5, r3
 800a178:	bf08      	it	eq
 800a17a:	68f5      	ldreq	r5, [r6, #12]
 800a17c:	e7da      	b.n	800a134 <_vfiprintf_r+0x20>
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	0598      	lsls	r0, r3, #22
 800a182:	d4ed      	bmi.n	800a160 <_vfiprintf_r+0x4c>
 800a184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a186:	f7fe ff9b 	bl	80090c0 <__retarget_lock_release_recursive>
 800a18a:	e7e9      	b.n	800a160 <_vfiprintf_r+0x4c>
 800a18c:	2300      	movs	r3, #0
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	2320      	movs	r3, #32
 800a192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a196:	2330      	movs	r3, #48	; 0x30
 800a198:	f04f 0901 	mov.w	r9, #1
 800a19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a360 <_vfiprintf_r+0x24c>
 800a1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	469a      	mov	sl, r3
 800a1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b0:	b10a      	cbz	r2, 800a1b6 <_vfiprintf_r+0xa2>
 800a1b2:	2a25      	cmp	r2, #37	; 0x25
 800a1b4:	d1f9      	bne.n	800a1aa <_vfiprintf_r+0x96>
 800a1b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ba:	d00b      	beq.n	800a1d4 <_vfiprintf_r+0xc0>
 800a1bc:	465b      	mov	r3, fp
 800a1be:	4622      	mov	r2, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7ff ff93 	bl	800a0ee <__sfputs_r>
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f000 80aa 	beq.w	800a322 <_vfiprintf_r+0x20e>
 800a1ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d0:	445a      	add	r2, fp
 800a1d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 80a2 	beq.w	800a322 <_vfiprintf_r+0x20e>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e8:	f10a 0a01 	add.w	sl, sl, #1
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	9307      	str	r3, [sp, #28]
 800a1f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1f6:	4654      	mov	r4, sl
 800a1f8:	2205      	movs	r2, #5
 800a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fe:	4858      	ldr	r0, [pc, #352]	; (800a360 <_vfiprintf_r+0x24c>)
 800a200:	f7fe ffde 	bl	80091c0 <memchr>
 800a204:	9a04      	ldr	r2, [sp, #16]
 800a206:	b9d8      	cbnz	r0, 800a240 <_vfiprintf_r+0x12c>
 800a208:	06d1      	lsls	r1, r2, #27
 800a20a:	bf44      	itt	mi
 800a20c:	2320      	movmi	r3, #32
 800a20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a212:	0713      	lsls	r3, r2, #28
 800a214:	bf44      	itt	mi
 800a216:	232b      	movmi	r3, #43	; 0x2b
 800a218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a21c:	f89a 3000 	ldrb.w	r3, [sl]
 800a220:	2b2a      	cmp	r3, #42	; 0x2a
 800a222:	d015      	beq.n	800a250 <_vfiprintf_r+0x13c>
 800a224:	4654      	mov	r4, sl
 800a226:	2000      	movs	r0, #0
 800a228:	f04f 0c0a 	mov.w	ip, #10
 800a22c:	9a07      	ldr	r2, [sp, #28]
 800a22e:	4621      	mov	r1, r4
 800a230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a234:	3b30      	subs	r3, #48	; 0x30
 800a236:	2b09      	cmp	r3, #9
 800a238:	d94e      	bls.n	800a2d8 <_vfiprintf_r+0x1c4>
 800a23a:	b1b0      	cbz	r0, 800a26a <_vfiprintf_r+0x156>
 800a23c:	9207      	str	r2, [sp, #28]
 800a23e:	e014      	b.n	800a26a <_vfiprintf_r+0x156>
 800a240:	eba0 0308 	sub.w	r3, r0, r8
 800a244:	fa09 f303 	lsl.w	r3, r9, r3
 800a248:	4313      	orrs	r3, r2
 800a24a:	46a2      	mov	sl, r4
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	e7d2      	b.n	800a1f6 <_vfiprintf_r+0xe2>
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	1d19      	adds	r1, r3, #4
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	9103      	str	r1, [sp, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfbb      	ittet	lt
 800a25c:	425b      	neglt	r3, r3
 800a25e:	f042 0202 	orrlt.w	r2, r2, #2
 800a262:	9307      	strge	r3, [sp, #28]
 800a264:	9307      	strlt	r3, [sp, #28]
 800a266:	bfb8      	it	lt
 800a268:	9204      	strlt	r2, [sp, #16]
 800a26a:	7823      	ldrb	r3, [r4, #0]
 800a26c:	2b2e      	cmp	r3, #46	; 0x2e
 800a26e:	d10c      	bne.n	800a28a <_vfiprintf_r+0x176>
 800a270:	7863      	ldrb	r3, [r4, #1]
 800a272:	2b2a      	cmp	r3, #42	; 0x2a
 800a274:	d135      	bne.n	800a2e2 <_vfiprintf_r+0x1ce>
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	3402      	adds	r4, #2
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	9203      	str	r2, [sp, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	bfb8      	it	lt
 800a284:	f04f 33ff 	movlt.w	r3, #4294967295
 800a288:	9305      	str	r3, [sp, #20]
 800a28a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a370 <_vfiprintf_r+0x25c>
 800a28e:	2203      	movs	r2, #3
 800a290:	4650      	mov	r0, sl
 800a292:	7821      	ldrb	r1, [r4, #0]
 800a294:	f7fe ff94 	bl	80091c0 <memchr>
 800a298:	b140      	cbz	r0, 800a2ac <_vfiprintf_r+0x198>
 800a29a:	2340      	movs	r3, #64	; 0x40
 800a29c:	eba0 000a 	sub.w	r0, r0, sl
 800a2a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	3401      	adds	r4, #1
 800a2a8:	4303      	orrs	r3, r0
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b0:	2206      	movs	r2, #6
 800a2b2:	482c      	ldr	r0, [pc, #176]	; (800a364 <_vfiprintf_r+0x250>)
 800a2b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2b8:	f7fe ff82 	bl	80091c0 <memchr>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d03f      	beq.n	800a340 <_vfiprintf_r+0x22c>
 800a2c0:	4b29      	ldr	r3, [pc, #164]	; (800a368 <_vfiprintf_r+0x254>)
 800a2c2:	bb1b      	cbnz	r3, 800a30c <_vfiprintf_r+0x1f8>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	3307      	adds	r3, #7
 800a2c8:	f023 0307 	bic.w	r3, r3, #7
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d2:	443b      	add	r3, r7
 800a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d6:	e767      	b.n	800a1a8 <_vfiprintf_r+0x94>
 800a2d8:	460c      	mov	r4, r1
 800a2da:	2001      	movs	r0, #1
 800a2dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2e0:	e7a5      	b.n	800a22e <_vfiprintf_r+0x11a>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	3401      	adds	r4, #1
 800a2ec:	9305      	str	r3, [sp, #20]
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f4:	3a30      	subs	r2, #48	; 0x30
 800a2f6:	2a09      	cmp	r2, #9
 800a2f8:	d903      	bls.n	800a302 <_vfiprintf_r+0x1ee>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0c5      	beq.n	800a28a <_vfiprintf_r+0x176>
 800a2fe:	9105      	str	r1, [sp, #20]
 800a300:	e7c3      	b.n	800a28a <_vfiprintf_r+0x176>
 800a302:	4604      	mov	r4, r0
 800a304:	2301      	movs	r3, #1
 800a306:	fb0c 2101 	mla	r1, ip, r1, r2
 800a30a:	e7f0      	b.n	800a2ee <_vfiprintf_r+0x1da>
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	462a      	mov	r2, r5
 800a312:	4630      	mov	r0, r6
 800a314:	4b15      	ldr	r3, [pc, #84]	; (800a36c <_vfiprintf_r+0x258>)
 800a316:	a904      	add	r1, sp, #16
 800a318:	f7fd f8b4 	bl	8007484 <_printf_float>
 800a31c:	4607      	mov	r7, r0
 800a31e:	1c78      	adds	r0, r7, #1
 800a320:	d1d6      	bne.n	800a2d0 <_vfiprintf_r+0x1bc>
 800a322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a324:	07d9      	lsls	r1, r3, #31
 800a326:	d405      	bmi.n	800a334 <_vfiprintf_r+0x220>
 800a328:	89ab      	ldrh	r3, [r5, #12]
 800a32a:	059a      	lsls	r2, r3, #22
 800a32c:	d402      	bmi.n	800a334 <_vfiprintf_r+0x220>
 800a32e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a330:	f7fe fec6 	bl	80090c0 <__retarget_lock_release_recursive>
 800a334:	89ab      	ldrh	r3, [r5, #12]
 800a336:	065b      	lsls	r3, r3, #25
 800a338:	f53f af12 	bmi.w	800a160 <_vfiprintf_r+0x4c>
 800a33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a33e:	e711      	b.n	800a164 <_vfiprintf_r+0x50>
 800a340:	ab03      	add	r3, sp, #12
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	462a      	mov	r2, r5
 800a346:	4630      	mov	r0, r6
 800a348:	4b08      	ldr	r3, [pc, #32]	; (800a36c <_vfiprintf_r+0x258>)
 800a34a:	a904      	add	r1, sp, #16
 800a34c:	f7fd fb36 	bl	80079bc <_printf_i>
 800a350:	e7e4      	b.n	800a31c <_vfiprintf_r+0x208>
 800a352:	bf00      	nop
 800a354:	0800ad88 	.word	0x0800ad88
 800a358:	0800ada8 	.word	0x0800ada8
 800a35c:	0800ad68 	.word	0x0800ad68
 800a360:	0800af24 	.word	0x0800af24
 800a364:	0800af2e 	.word	0x0800af2e
 800a368:	08007485 	.word	0x08007485
 800a36c:	0800a0ef 	.word	0x0800a0ef
 800a370:	0800af2a 	.word	0x0800af2a

0800a374 <_scanf_chars>:
 800a374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a378:	4615      	mov	r5, r2
 800a37a:	688a      	ldr	r2, [r1, #8]
 800a37c:	4680      	mov	r8, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	b932      	cbnz	r2, 800a390 <_scanf_chars+0x1c>
 800a382:	698a      	ldr	r2, [r1, #24]
 800a384:	2a00      	cmp	r2, #0
 800a386:	bf0c      	ite	eq
 800a388:	2201      	moveq	r2, #1
 800a38a:	f04f 32ff 	movne.w	r2, #4294967295
 800a38e:	608a      	str	r2, [r1, #8]
 800a390:	2700      	movs	r7, #0
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a420 <_scanf_chars+0xac>
 800a398:	06d1      	lsls	r1, r2, #27
 800a39a:	bf5f      	itttt	pl
 800a39c:	681a      	ldrpl	r2, [r3, #0]
 800a39e:	1d11      	addpl	r1, r2, #4
 800a3a0:	6019      	strpl	r1, [r3, #0]
 800a3a2:	6816      	ldrpl	r6, [r2, #0]
 800a3a4:	69a0      	ldr	r0, [r4, #24]
 800a3a6:	b188      	cbz	r0, 800a3cc <_scanf_chars+0x58>
 800a3a8:	2801      	cmp	r0, #1
 800a3aa:	d107      	bne.n	800a3bc <_scanf_chars+0x48>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	781a      	ldrb	r2, [r3, #0]
 800a3b0:	6963      	ldr	r3, [r4, #20]
 800a3b2:	5c9b      	ldrb	r3, [r3, r2]
 800a3b4:	b953      	cbnz	r3, 800a3cc <_scanf_chars+0x58>
 800a3b6:	bb27      	cbnz	r7, 800a402 <_scanf_chars+0x8e>
 800a3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3bc:	2802      	cmp	r0, #2
 800a3be:	d120      	bne.n	800a402 <_scanf_chars+0x8e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a3c8:	071b      	lsls	r3, r3, #28
 800a3ca:	d41a      	bmi.n	800a402 <_scanf_chars+0x8e>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	3701      	adds	r7, #1
 800a3d0:	06da      	lsls	r2, r3, #27
 800a3d2:	bf5e      	ittt	pl
 800a3d4:	682b      	ldrpl	r3, [r5, #0]
 800a3d6:	781b      	ldrbpl	r3, [r3, #0]
 800a3d8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a3dc:	682a      	ldr	r2, [r5, #0]
 800a3de:	686b      	ldr	r3, [r5, #4]
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	602a      	str	r2, [r5, #0]
 800a3e4:	68a2      	ldr	r2, [r4, #8]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	3a01      	subs	r2, #1
 800a3ea:	606b      	str	r3, [r5, #4]
 800a3ec:	60a2      	str	r2, [r4, #8]
 800a3ee:	b142      	cbz	r2, 800a402 <_scanf_chars+0x8e>
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dcd7      	bgt.n	800a3a4 <_scanf_chars+0x30>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3fc:	4798      	blx	r3
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0d0      	beq.n	800a3a4 <_scanf_chars+0x30>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	f013 0310 	ands.w	r3, r3, #16
 800a408:	d105      	bne.n	800a416 <_scanf_chars+0xa2>
 800a40a:	68e2      	ldr	r2, [r4, #12]
 800a40c:	3201      	adds	r2, #1
 800a40e:	60e2      	str	r2, [r4, #12]
 800a410:	69a2      	ldr	r2, [r4, #24]
 800a412:	b102      	cbz	r2, 800a416 <_scanf_chars+0xa2>
 800a414:	7033      	strb	r3, [r6, #0]
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	2000      	movs	r0, #0
 800a41a:	441f      	add	r7, r3
 800a41c:	6127      	str	r7, [r4, #16]
 800a41e:	e7cb      	b.n	800a3b8 <_scanf_chars+0x44>
 800a420:	0800af8d 	.word	0x0800af8d

0800a424 <_scanf_i>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	460c      	mov	r4, r1
 800a42a:	4698      	mov	r8, r3
 800a42c:	4b72      	ldr	r3, [pc, #456]	; (800a5f8 <_scanf_i+0x1d4>)
 800a42e:	b087      	sub	sp, #28
 800a430:	4682      	mov	sl, r0
 800a432:	4616      	mov	r6, r2
 800a434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a438:	ab03      	add	r3, sp, #12
 800a43a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a43e:	4b6f      	ldr	r3, [pc, #444]	; (800a5fc <_scanf_i+0x1d8>)
 800a440:	69a1      	ldr	r1, [r4, #24]
 800a442:	4a6f      	ldr	r2, [pc, #444]	; (800a600 <_scanf_i+0x1dc>)
 800a444:	4627      	mov	r7, r4
 800a446:	2903      	cmp	r1, #3
 800a448:	bf18      	it	ne
 800a44a:	461a      	movne	r2, r3
 800a44c:	68a3      	ldr	r3, [r4, #8]
 800a44e:	9201      	str	r2, [sp, #4]
 800a450:	1e5a      	subs	r2, r3, #1
 800a452:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a456:	bf81      	itttt	hi
 800a458:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a45c:	eb03 0905 	addhi.w	r9, r3, r5
 800a460:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a464:	60a3      	strhi	r3, [r4, #8]
 800a466:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a46a:	bf98      	it	ls
 800a46c:	f04f 0900 	movls.w	r9, #0
 800a470:	463d      	mov	r5, r7
 800a472:	f04f 0b00 	mov.w	fp, #0
 800a476:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	6831      	ldr	r1, [r6, #0]
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	2202      	movs	r2, #2
 800a482:	7809      	ldrb	r1, [r1, #0]
 800a484:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a488:	f7fe fe9a 	bl	80091c0 <memchr>
 800a48c:	b328      	cbz	r0, 800a4da <_scanf_i+0xb6>
 800a48e:	f1bb 0f01 	cmp.w	fp, #1
 800a492:	d159      	bne.n	800a548 <_scanf_i+0x124>
 800a494:	6862      	ldr	r2, [r4, #4]
 800a496:	b92a      	cbnz	r2, 800a4a4 <_scanf_i+0x80>
 800a498:	2308      	movs	r3, #8
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4a2:	6022      	str	r2, [r4, #0]
 800a4a4:	6822      	ldr	r2, [r4, #0]
 800a4a6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	68a2      	ldr	r2, [r4, #8]
 800a4ae:	1e51      	subs	r1, r2, #1
 800a4b0:	60a1      	str	r1, [r4, #8]
 800a4b2:	b192      	cbz	r2, 800a4da <_scanf_i+0xb6>
 800a4b4:	6832      	ldr	r2, [r6, #0]
 800a4b6:	1c51      	adds	r1, r2, #1
 800a4b8:	6031      	str	r1, [r6, #0]
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	f805 2b01 	strb.w	r2, [r5], #1
 800a4c0:	6872      	ldr	r2, [r6, #4]
 800a4c2:	3a01      	subs	r2, #1
 800a4c4:	2a00      	cmp	r2, #0
 800a4c6:	6072      	str	r2, [r6, #4]
 800a4c8:	dc07      	bgt.n	800a4da <_scanf_i+0xb6>
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a4d2:	4790      	blx	r2
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f040 8085 	bne.w	800a5e4 <_scanf_i+0x1c0>
 800a4da:	f10b 0b01 	add.w	fp, fp, #1
 800a4de:	f1bb 0f03 	cmp.w	fp, #3
 800a4e2:	d1cb      	bne.n	800a47c <_scanf_i+0x58>
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	b90b      	cbnz	r3, 800a4ec <_scanf_i+0xc8>
 800a4e8:	230a      	movs	r3, #10
 800a4ea:	6063      	str	r3, [r4, #4]
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	4945      	ldr	r1, [pc, #276]	; (800a604 <_scanf_i+0x1e0>)
 800a4f0:	6960      	ldr	r0, [r4, #20]
 800a4f2:	1ac9      	subs	r1, r1, r3
 800a4f4:	f000 f8aa 	bl	800a64c <__sccl>
 800a4f8:	f04f 0b00 	mov.w	fp, #0
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	6822      	ldr	r2, [r4, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d03d      	beq.n	800a580 <_scanf_i+0x15c>
 800a504:	6831      	ldr	r1, [r6, #0]
 800a506:	6960      	ldr	r0, [r4, #20]
 800a508:	f891 c000 	ldrb.w	ip, [r1]
 800a50c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a510:	2800      	cmp	r0, #0
 800a512:	d035      	beq.n	800a580 <_scanf_i+0x15c>
 800a514:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a518:	d124      	bne.n	800a564 <_scanf_i+0x140>
 800a51a:	0510      	lsls	r0, r2, #20
 800a51c:	d522      	bpl.n	800a564 <_scanf_i+0x140>
 800a51e:	f10b 0b01 	add.w	fp, fp, #1
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	d003      	beq.n	800a530 <_scanf_i+0x10c>
 800a528:	3301      	adds	r3, #1
 800a52a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6873      	ldr	r3, [r6, #4]
 800a532:	3b01      	subs	r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	6073      	str	r3, [r6, #4]
 800a538:	dd1b      	ble.n	800a572 <_scanf_i+0x14e>
 800a53a:	6833      	ldr	r3, [r6, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	6033      	str	r3, [r6, #0]
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	3b01      	subs	r3, #1
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	e7d9      	b.n	800a4fc <_scanf_i+0xd8>
 800a548:	f1bb 0f02 	cmp.w	fp, #2
 800a54c:	d1ae      	bne.n	800a4ac <_scanf_i+0x88>
 800a54e:	6822      	ldr	r2, [r4, #0]
 800a550:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a554:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a558:	d1bf      	bne.n	800a4da <_scanf_i+0xb6>
 800a55a:	2310      	movs	r3, #16
 800a55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	e7a2      	b.n	800a4aa <_scanf_i+0x86>
 800a564:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a568:	6022      	str	r2, [r4, #0]
 800a56a:	780b      	ldrb	r3, [r1, #0]
 800a56c:	f805 3b01 	strb.w	r3, [r5], #1
 800a570:	e7de      	b.n	800a530 <_scanf_i+0x10c>
 800a572:	4631      	mov	r1, r6
 800a574:	4650      	mov	r0, sl
 800a576:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a57a:	4798      	blx	r3
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d0df      	beq.n	800a540 <_scanf_i+0x11c>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	05d9      	lsls	r1, r3, #23
 800a584:	d50d      	bpl.n	800a5a2 <_scanf_i+0x17e>
 800a586:	42bd      	cmp	r5, r7
 800a588:	d909      	bls.n	800a59e <_scanf_i+0x17a>
 800a58a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a58e:	4632      	mov	r2, r6
 800a590:	4650      	mov	r0, sl
 800a592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a596:	f105 39ff 	add.w	r9, r5, #4294967295
 800a59a:	4798      	blx	r3
 800a59c:	464d      	mov	r5, r9
 800a59e:	42bd      	cmp	r5, r7
 800a5a0:	d028      	beq.n	800a5f4 <_scanf_i+0x1d0>
 800a5a2:	6822      	ldr	r2, [r4, #0]
 800a5a4:	f012 0210 	ands.w	r2, r2, #16
 800a5a8:	d113      	bne.n	800a5d2 <_scanf_i+0x1ae>
 800a5aa:	702a      	strb	r2, [r5, #0]
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	6863      	ldr	r3, [r4, #4]
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	9e01      	ldr	r6, [sp, #4]
 800a5b4:	47b0      	blx	r6
 800a5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	f8c8 2000 	str.w	r2, [r8]
 800a5c2:	f011 0f20 	tst.w	r1, #32
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	d00f      	beq.n	800a5ea <_scanf_i+0x1c6>
 800a5ca:	6018      	str	r0, [r3, #0]
 800a5cc:	68e3      	ldr	r3, [r4, #12]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	60e3      	str	r3, [r4, #12]
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	1bed      	subs	r5, r5, r7
 800a5d6:	44ab      	add	fp, r5
 800a5d8:	6925      	ldr	r5, [r4, #16]
 800a5da:	445d      	add	r5, fp
 800a5dc:	6125      	str	r5, [r4, #16]
 800a5de:	b007      	add	sp, #28
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	f04f 0b00 	mov.w	fp, #0
 800a5e8:	e7ca      	b.n	800a580 <_scanf_i+0x15c>
 800a5ea:	07ca      	lsls	r2, r1, #31
 800a5ec:	bf4c      	ite	mi
 800a5ee:	8018      	strhmi	r0, [r3, #0]
 800a5f0:	6018      	strpl	r0, [r3, #0]
 800a5f2:	e7eb      	b.n	800a5cc <_scanf_i+0x1a8>
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	e7f2      	b.n	800a5de <_scanf_i+0x1ba>
 800a5f8:	0800ac60 	.word	0x0800ac60
 800a5fc:	0800a8c9 	.word	0x0800a8c9
 800a600:	0800a7cd 	.word	0x0800a7cd
 800a604:	0800af4e 	.word	0x0800af4e

0800a608 <_read_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	2200      	movs	r2, #0
 800a612:	4d05      	ldr	r5, [pc, #20]	; (800a628 <_read_r+0x20>)
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7f7 ff89 	bl	800252e <_read>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_read_r+0x1e>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_read_r+0x1e>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	200007d4 	.word	0x200007d4

0800a62c <_sbrk_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	2300      	movs	r3, #0
 800a630:	4d05      	ldr	r5, [pc, #20]	; (800a648 <_sbrk_r+0x1c>)
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7f7 ffe2 	bl	8002600 <_sbrk>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_sbrk_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_sbrk_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	200007d4 	.word	0x200007d4

0800a64c <__sccl>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	780b      	ldrb	r3, [r1, #0]
 800a650:	4604      	mov	r4, r0
 800a652:	2b5e      	cmp	r3, #94	; 0x5e
 800a654:	bf13      	iteet	ne
 800a656:	2200      	movne	r2, #0
 800a658:	2201      	moveq	r2, #1
 800a65a:	784b      	ldrbeq	r3, [r1, #1]
 800a65c:	1c48      	addne	r0, r1, #1
 800a65e:	bf08      	it	eq
 800a660:	1c88      	addeq	r0, r1, #2
 800a662:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a666:	1e61      	subs	r1, r4, #1
 800a668:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	d1fb      	bne.n	800a668 <__sccl+0x1c>
 800a670:	b90b      	cbnz	r3, 800a676 <__sccl+0x2a>
 800a672:	3801      	subs	r0, #1
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	f082 0101 	eor.w	r1, r2, #1
 800a67a:	54e1      	strb	r1, [r4, r3]
 800a67c:	1c42      	adds	r2, r0, #1
 800a67e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a682:	4610      	mov	r0, r2
 800a684:	2d2d      	cmp	r5, #45	; 0x2d
 800a686:	f102 36ff 	add.w	r6, r2, #4294967295
 800a68a:	d006      	beq.n	800a69a <__sccl+0x4e>
 800a68c:	2d5d      	cmp	r5, #93	; 0x5d
 800a68e:	d0f1      	beq.n	800a674 <__sccl+0x28>
 800a690:	b90d      	cbnz	r5, 800a696 <__sccl+0x4a>
 800a692:	4630      	mov	r0, r6
 800a694:	e7ee      	b.n	800a674 <__sccl+0x28>
 800a696:	462b      	mov	r3, r5
 800a698:	e7ef      	b.n	800a67a <__sccl+0x2e>
 800a69a:	7816      	ldrb	r6, [r2, #0]
 800a69c:	2e5d      	cmp	r6, #93	; 0x5d
 800a69e:	d0fa      	beq.n	800a696 <__sccl+0x4a>
 800a6a0:	42b3      	cmp	r3, r6
 800a6a2:	dcf8      	bgt.n	800a696 <__sccl+0x4a>
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	4286      	cmp	r6, r0
 800a6aa:	5421      	strb	r1, [r4, r0]
 800a6ac:	dcfb      	bgt.n	800a6a6 <__sccl+0x5a>
 800a6ae:	43d8      	mvns	r0, r3
 800a6b0:	4430      	add	r0, r6
 800a6b2:	42b3      	cmp	r3, r6
 800a6b4:	bfa8      	it	ge
 800a6b6:	2000      	movge	r0, #0
 800a6b8:	1c5d      	adds	r5, r3, #1
 800a6ba:	182b      	adds	r3, r5, r0
 800a6bc:	3202      	adds	r2, #2
 800a6be:	e7de      	b.n	800a67e <__sccl+0x32>

0800a6c0 <_strtol_l.isra.0>:
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c6:	4686      	mov	lr, r0
 800a6c8:	d001      	beq.n	800a6ce <_strtol_l.isra.0+0xe>
 800a6ca:	2b24      	cmp	r3, #36	; 0x24
 800a6cc:	d906      	bls.n	800a6dc <_strtol_l.isra.0+0x1c>
 800a6ce:	f7fc fe09 	bl	80072e4 <__errno>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	468c      	mov	ip, r1
 800a6de:	4e3a      	ldr	r6, [pc, #232]	; (800a7c8 <_strtol_l.isra.0+0x108>)
 800a6e0:	4660      	mov	r0, ip
 800a6e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a6e6:	5da5      	ldrb	r5, [r4, r6]
 800a6e8:	f015 0508 	ands.w	r5, r5, #8
 800a6ec:	d1f8      	bne.n	800a6e0 <_strtol_l.isra.0+0x20>
 800a6ee:	2c2d      	cmp	r4, #45	; 0x2d
 800a6f0:	d133      	bne.n	800a75a <_strtol_l.isra.0+0x9a>
 800a6f2:	f04f 0801 	mov.w	r8, #1
 800a6f6:	f89c 4000 	ldrb.w	r4, [ip]
 800a6fa:	f100 0c02 	add.w	ip, r0, #2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d05d      	beq.n	800a7be <_strtol_l.isra.0+0xfe>
 800a702:	2b10      	cmp	r3, #16
 800a704:	d10c      	bne.n	800a720 <_strtol_l.isra.0+0x60>
 800a706:	2c30      	cmp	r4, #48	; 0x30
 800a708:	d10a      	bne.n	800a720 <_strtol_l.isra.0+0x60>
 800a70a:	f89c 0000 	ldrb.w	r0, [ip]
 800a70e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a712:	2858      	cmp	r0, #88	; 0x58
 800a714:	d14e      	bne.n	800a7b4 <_strtol_l.isra.0+0xf4>
 800a716:	2310      	movs	r3, #16
 800a718:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a71c:	f10c 0c02 	add.w	ip, ip, #2
 800a720:	2500      	movs	r5, #0
 800a722:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a726:	3f01      	subs	r7, #1
 800a728:	fbb7 f9f3 	udiv	r9, r7, r3
 800a72c:	4628      	mov	r0, r5
 800a72e:	fb03 7a19 	mls	sl, r3, r9, r7
 800a732:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a736:	2e09      	cmp	r6, #9
 800a738:	d818      	bhi.n	800a76c <_strtol_l.isra.0+0xac>
 800a73a:	4634      	mov	r4, r6
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	dd24      	ble.n	800a78a <_strtol_l.isra.0+0xca>
 800a740:	2d00      	cmp	r5, #0
 800a742:	db1f      	blt.n	800a784 <_strtol_l.isra.0+0xc4>
 800a744:	4581      	cmp	r9, r0
 800a746:	d31d      	bcc.n	800a784 <_strtol_l.isra.0+0xc4>
 800a748:	d101      	bne.n	800a74e <_strtol_l.isra.0+0x8e>
 800a74a:	45a2      	cmp	sl, r4
 800a74c:	db1a      	blt.n	800a784 <_strtol_l.isra.0+0xc4>
 800a74e:	2501      	movs	r5, #1
 800a750:	fb00 4003 	mla	r0, r0, r3, r4
 800a754:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a758:	e7eb      	b.n	800a732 <_strtol_l.isra.0+0x72>
 800a75a:	2c2b      	cmp	r4, #43	; 0x2b
 800a75c:	bf08      	it	eq
 800a75e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a762:	46a8      	mov	r8, r5
 800a764:	bf08      	it	eq
 800a766:	f100 0c02 	addeq.w	ip, r0, #2
 800a76a:	e7c8      	b.n	800a6fe <_strtol_l.isra.0+0x3e>
 800a76c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a770:	2e19      	cmp	r6, #25
 800a772:	d801      	bhi.n	800a778 <_strtol_l.isra.0+0xb8>
 800a774:	3c37      	subs	r4, #55	; 0x37
 800a776:	e7e1      	b.n	800a73c <_strtol_l.isra.0+0x7c>
 800a778:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a77c:	2e19      	cmp	r6, #25
 800a77e:	d804      	bhi.n	800a78a <_strtol_l.isra.0+0xca>
 800a780:	3c57      	subs	r4, #87	; 0x57
 800a782:	e7db      	b.n	800a73c <_strtol_l.isra.0+0x7c>
 800a784:	f04f 35ff 	mov.w	r5, #4294967295
 800a788:	e7e4      	b.n	800a754 <_strtol_l.isra.0+0x94>
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	da08      	bge.n	800a7a0 <_strtol_l.isra.0+0xe0>
 800a78e:	2322      	movs	r3, #34	; 0x22
 800a790:	4638      	mov	r0, r7
 800a792:	f8ce 3000 	str.w	r3, [lr]
 800a796:	2a00      	cmp	r2, #0
 800a798:	d09e      	beq.n	800a6d8 <_strtol_l.isra.0+0x18>
 800a79a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a79e:	e007      	b.n	800a7b0 <_strtol_l.isra.0+0xf0>
 800a7a0:	f1b8 0f00 	cmp.w	r8, #0
 800a7a4:	d000      	beq.n	800a7a8 <_strtol_l.isra.0+0xe8>
 800a7a6:	4240      	negs	r0, r0
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	d095      	beq.n	800a6d8 <_strtol_l.isra.0+0x18>
 800a7ac:	2d00      	cmp	r5, #0
 800a7ae:	d1f4      	bne.n	800a79a <_strtol_l.isra.0+0xda>
 800a7b0:	6011      	str	r1, [r2, #0]
 800a7b2:	e791      	b.n	800a6d8 <_strtol_l.isra.0+0x18>
 800a7b4:	2430      	movs	r4, #48	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1b2      	bne.n	800a720 <_strtol_l.isra.0+0x60>
 800a7ba:	2308      	movs	r3, #8
 800a7bc:	e7b0      	b.n	800a720 <_strtol_l.isra.0+0x60>
 800a7be:	2c30      	cmp	r4, #48	; 0x30
 800a7c0:	d0a3      	beq.n	800a70a <_strtol_l.isra.0+0x4a>
 800a7c2:	230a      	movs	r3, #10
 800a7c4:	e7ac      	b.n	800a720 <_strtol_l.isra.0+0x60>
 800a7c6:	bf00      	nop
 800a7c8:	0800af8d 	.word	0x0800af8d

0800a7cc <_strtol_r>:
 800a7cc:	f7ff bf78 	b.w	800a6c0 <_strtol_l.isra.0>

0800a7d0 <_strtoul_l.isra.0>:
 800a7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	468c      	mov	ip, r1
 800a7d6:	4686      	mov	lr, r0
 800a7d8:	4e3a      	ldr	r6, [pc, #232]	; (800a8c4 <_strtoul_l.isra.0+0xf4>)
 800a7da:	4660      	mov	r0, ip
 800a7dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a7e0:	5da5      	ldrb	r5, [r4, r6]
 800a7e2:	f015 0508 	ands.w	r5, r5, #8
 800a7e6:	d1f8      	bne.n	800a7da <_strtoul_l.isra.0+0xa>
 800a7e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a7ea:	d134      	bne.n	800a856 <_strtoul_l.isra.0+0x86>
 800a7ec:	f04f 0801 	mov.w	r8, #1
 800a7f0:	f89c 4000 	ldrb.w	r4, [ip]
 800a7f4:	f100 0c02 	add.w	ip, r0, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d05e      	beq.n	800a8ba <_strtoul_l.isra.0+0xea>
 800a7fc:	2b10      	cmp	r3, #16
 800a7fe:	d10c      	bne.n	800a81a <_strtoul_l.isra.0+0x4a>
 800a800:	2c30      	cmp	r4, #48	; 0x30
 800a802:	d10a      	bne.n	800a81a <_strtoul_l.isra.0+0x4a>
 800a804:	f89c 0000 	ldrb.w	r0, [ip]
 800a808:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a80c:	2858      	cmp	r0, #88	; 0x58
 800a80e:	d14f      	bne.n	800a8b0 <_strtoul_l.isra.0+0xe0>
 800a810:	2310      	movs	r3, #16
 800a812:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a816:	f10c 0c02 	add.w	ip, ip, #2
 800a81a:	f04f 37ff 	mov.w	r7, #4294967295
 800a81e:	fbb7 f7f3 	udiv	r7, r7, r3
 800a822:	2500      	movs	r5, #0
 800a824:	fb03 f907 	mul.w	r9, r3, r7
 800a828:	4628      	mov	r0, r5
 800a82a:	ea6f 0909 	mvn.w	r9, r9
 800a82e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a832:	2e09      	cmp	r6, #9
 800a834:	d818      	bhi.n	800a868 <_strtoul_l.isra.0+0x98>
 800a836:	4634      	mov	r4, r6
 800a838:	42a3      	cmp	r3, r4
 800a83a:	dd24      	ble.n	800a886 <_strtoul_l.isra.0+0xb6>
 800a83c:	2d00      	cmp	r5, #0
 800a83e:	db1f      	blt.n	800a880 <_strtoul_l.isra.0+0xb0>
 800a840:	4287      	cmp	r7, r0
 800a842:	d31d      	bcc.n	800a880 <_strtoul_l.isra.0+0xb0>
 800a844:	d101      	bne.n	800a84a <_strtoul_l.isra.0+0x7a>
 800a846:	45a1      	cmp	r9, r4
 800a848:	db1a      	blt.n	800a880 <_strtoul_l.isra.0+0xb0>
 800a84a:	2501      	movs	r5, #1
 800a84c:	fb00 4003 	mla	r0, r0, r3, r4
 800a850:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a854:	e7eb      	b.n	800a82e <_strtoul_l.isra.0+0x5e>
 800a856:	2c2b      	cmp	r4, #43	; 0x2b
 800a858:	bf08      	it	eq
 800a85a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a85e:	46a8      	mov	r8, r5
 800a860:	bf08      	it	eq
 800a862:	f100 0c02 	addeq.w	ip, r0, #2
 800a866:	e7c7      	b.n	800a7f8 <_strtoul_l.isra.0+0x28>
 800a868:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a86c:	2e19      	cmp	r6, #25
 800a86e:	d801      	bhi.n	800a874 <_strtoul_l.isra.0+0xa4>
 800a870:	3c37      	subs	r4, #55	; 0x37
 800a872:	e7e1      	b.n	800a838 <_strtoul_l.isra.0+0x68>
 800a874:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a878:	2e19      	cmp	r6, #25
 800a87a:	d804      	bhi.n	800a886 <_strtoul_l.isra.0+0xb6>
 800a87c:	3c57      	subs	r4, #87	; 0x57
 800a87e:	e7db      	b.n	800a838 <_strtoul_l.isra.0+0x68>
 800a880:	f04f 35ff 	mov.w	r5, #4294967295
 800a884:	e7e4      	b.n	800a850 <_strtoul_l.isra.0+0x80>
 800a886:	2d00      	cmp	r5, #0
 800a888:	da07      	bge.n	800a89a <_strtoul_l.isra.0+0xca>
 800a88a:	2322      	movs	r3, #34	; 0x22
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	f8ce 3000 	str.w	r3, [lr]
 800a894:	b942      	cbnz	r2, 800a8a8 <_strtoul_l.isra.0+0xd8>
 800a896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89a:	f1b8 0f00 	cmp.w	r8, #0
 800a89e:	d000      	beq.n	800a8a2 <_strtoul_l.isra.0+0xd2>
 800a8a0:	4240      	negs	r0, r0
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d0f7      	beq.n	800a896 <_strtoul_l.isra.0+0xc6>
 800a8a6:	b10d      	cbz	r5, 800a8ac <_strtoul_l.isra.0+0xdc>
 800a8a8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a8ac:	6011      	str	r1, [r2, #0]
 800a8ae:	e7f2      	b.n	800a896 <_strtoul_l.isra.0+0xc6>
 800a8b0:	2430      	movs	r4, #48	; 0x30
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1b1      	bne.n	800a81a <_strtoul_l.isra.0+0x4a>
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	e7af      	b.n	800a81a <_strtoul_l.isra.0+0x4a>
 800a8ba:	2c30      	cmp	r4, #48	; 0x30
 800a8bc:	d0a2      	beq.n	800a804 <_strtoul_l.isra.0+0x34>
 800a8be:	230a      	movs	r3, #10
 800a8c0:	e7ab      	b.n	800a81a <_strtoul_l.isra.0+0x4a>
 800a8c2:	bf00      	nop
 800a8c4:	0800af8d 	.word	0x0800af8d

0800a8c8 <_strtoul_r>:
 800a8c8:	f7ff bf82 	b.w	800a7d0 <_strtoul_l.isra.0>

0800a8cc <__submore>:
 800a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a8d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d8:	4299      	cmp	r1, r3
 800a8da:	d11b      	bne.n	800a914 <__submore+0x48>
 800a8dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8e0:	f7ff f866 	bl	80099b0 <_malloc_r>
 800a8e4:	b918      	cbnz	r0, 800a8ee <__submore+0x22>
 800a8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a8f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a8fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a8fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a902:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a906:	7043      	strb	r3, [r0, #1]
 800a908:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a90c:	7003      	strb	r3, [r0, #0]
 800a90e:	6020      	str	r0, [r4, #0]
 800a910:	2000      	movs	r0, #0
 800a912:	e7ea      	b.n	800a8ea <__submore+0x1e>
 800a914:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a916:	0077      	lsls	r7, r6, #1
 800a918:	463a      	mov	r2, r7
 800a91a:	f000 f899 	bl	800aa50 <_realloc_r>
 800a91e:	4605      	mov	r5, r0
 800a920:	2800      	cmp	r0, #0
 800a922:	d0e0      	beq.n	800a8e6 <__submore+0x1a>
 800a924:	eb00 0806 	add.w	r8, r0, r6
 800a928:	4601      	mov	r1, r0
 800a92a:	4632      	mov	r2, r6
 800a92c:	4640      	mov	r0, r8
 800a92e:	f7fe fc55 	bl	80091dc <memcpy>
 800a932:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a936:	f8c4 8000 	str.w	r8, [r4]
 800a93a:	e7e9      	b.n	800a910 <__submore+0x44>

0800a93c <__assert_func>:
 800a93c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a93e:	4614      	mov	r4, r2
 800a940:	461a      	mov	r2, r3
 800a942:	4b09      	ldr	r3, [pc, #36]	; (800a968 <__assert_func+0x2c>)
 800a944:	4605      	mov	r5, r0
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68d8      	ldr	r0, [r3, #12]
 800a94a:	b14c      	cbz	r4, 800a960 <__assert_func+0x24>
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <__assert_func+0x30>)
 800a94e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a952:	9100      	str	r1, [sp, #0]
 800a954:	462b      	mov	r3, r5
 800a956:	4906      	ldr	r1, [pc, #24]	; (800a970 <__assert_func+0x34>)
 800a958:	f000 f80e 	bl	800a978 <fiprintf>
 800a95c:	f000 f8ab 	bl	800aab6 <abort>
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <__assert_func+0x38>)
 800a962:	461c      	mov	r4, r3
 800a964:	e7f3      	b.n	800a94e <__assert_func+0x12>
 800a966:	bf00      	nop
 800a968:	20000020 	.word	0x20000020
 800a96c:	0800af50 	.word	0x0800af50
 800a970:	0800af5d 	.word	0x0800af5d
 800a974:	0800af8b 	.word	0x0800af8b

0800a978 <fiprintf>:
 800a978:	b40e      	push	{r1, r2, r3}
 800a97a:	b503      	push	{r0, r1, lr}
 800a97c:	4601      	mov	r1, r0
 800a97e:	ab03      	add	r3, sp, #12
 800a980:	4805      	ldr	r0, [pc, #20]	; (800a998 <fiprintf+0x20>)
 800a982:	f853 2b04 	ldr.w	r2, [r3], #4
 800a986:	6800      	ldr	r0, [r0, #0]
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	f7ff fbc3 	bl	800a114 <_vfiprintf_r>
 800a98e:	b002      	add	sp, #8
 800a990:	f85d eb04 	ldr.w	lr, [sp], #4
 800a994:	b003      	add	sp, #12
 800a996:	4770      	bx	lr
 800a998:	20000020 	.word	0x20000020

0800a99c <_fstat_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4d06      	ldr	r5, [pc, #24]	; (800a9bc <_fstat_r+0x20>)
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f7f7 fe04 	bl	80025b6 <_fstat>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d102      	bne.n	800a9b8 <_fstat_r+0x1c>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	b103      	cbz	r3, 800a9b8 <_fstat_r+0x1c>
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200007d4 	.word	0x200007d4

0800a9c0 <_isatty_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4d05      	ldr	r5, [pc, #20]	; (800a9dc <_isatty_r+0x1c>)
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f7 fe02 	bl	80025d4 <_isatty>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_isatty_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_isatty_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	200007d4 	.word	0x200007d4

0800a9e0 <__ascii_mbtowc>:
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	b901      	cbnz	r1, 800a9e6 <__ascii_mbtowc+0x6>
 800a9e4:	a901      	add	r1, sp, #4
 800a9e6:	b142      	cbz	r2, 800a9fa <__ascii_mbtowc+0x1a>
 800a9e8:	b14b      	cbz	r3, 800a9fe <__ascii_mbtowc+0x1e>
 800a9ea:	7813      	ldrb	r3, [r2, #0]
 800a9ec:	600b      	str	r3, [r1, #0]
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	1e10      	subs	r0, r2, #0
 800a9f2:	bf18      	it	ne
 800a9f4:	2001      	movne	r0, #1
 800a9f6:	b002      	add	sp, #8
 800a9f8:	4770      	bx	lr
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	e7fb      	b.n	800a9f6 <__ascii_mbtowc+0x16>
 800a9fe:	f06f 0001 	mvn.w	r0, #1
 800aa02:	e7f8      	b.n	800a9f6 <__ascii_mbtowc+0x16>

0800aa04 <memmove>:
 800aa04:	4288      	cmp	r0, r1
 800aa06:	b510      	push	{r4, lr}
 800aa08:	eb01 0402 	add.w	r4, r1, r2
 800aa0c:	d902      	bls.n	800aa14 <memmove+0x10>
 800aa0e:	4284      	cmp	r4, r0
 800aa10:	4623      	mov	r3, r4
 800aa12:	d807      	bhi.n	800aa24 <memmove+0x20>
 800aa14:	1e43      	subs	r3, r0, #1
 800aa16:	42a1      	cmp	r1, r4
 800aa18:	d008      	beq.n	800aa2c <memmove+0x28>
 800aa1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa22:	e7f8      	b.n	800aa16 <memmove+0x12>
 800aa24:	4601      	mov	r1, r0
 800aa26:	4402      	add	r2, r0
 800aa28:	428a      	cmp	r2, r1
 800aa2a:	d100      	bne.n	800aa2e <memmove+0x2a>
 800aa2c:	bd10      	pop	{r4, pc}
 800aa2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa36:	e7f7      	b.n	800aa28 <memmove+0x24>

0800aa38 <__malloc_lock>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__malloc_lock+0x8>)
 800aa3a:	f7fe bb40 	b.w	80090be <__retarget_lock_acquire_recursive>
 800aa3e:	bf00      	nop
 800aa40:	200007cc 	.word	0x200007cc

0800aa44 <__malloc_unlock>:
 800aa44:	4801      	ldr	r0, [pc, #4]	; (800aa4c <__malloc_unlock+0x8>)
 800aa46:	f7fe bb3b 	b.w	80090c0 <__retarget_lock_release_recursive>
 800aa4a:	bf00      	nop
 800aa4c:	200007cc 	.word	0x200007cc

0800aa50 <_realloc_r>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	4607      	mov	r7, r0
 800aa54:	4614      	mov	r4, r2
 800aa56:	460e      	mov	r6, r1
 800aa58:	b921      	cbnz	r1, 800aa64 <_realloc_r+0x14>
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa60:	f7fe bfa6 	b.w	80099b0 <_malloc_r>
 800aa64:	b922      	cbnz	r2, 800aa70 <_realloc_r+0x20>
 800aa66:	f7fe ff57 	bl	8009918 <_free_r>
 800aa6a:	4625      	mov	r5, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa70:	f000 f828 	bl	800aac4 <_malloc_usable_size_r>
 800aa74:	42a0      	cmp	r0, r4
 800aa76:	d20f      	bcs.n	800aa98 <_realloc_r+0x48>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f7fe ff98 	bl	80099b0 <_malloc_r>
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0f2      	beq.n	800aa6c <_realloc_r+0x1c>
 800aa86:	4631      	mov	r1, r6
 800aa88:	4622      	mov	r2, r4
 800aa8a:	f7fe fba7 	bl	80091dc <memcpy>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7fe ff41 	bl	8009918 <_free_r>
 800aa96:	e7e9      	b.n	800aa6c <_realloc_r+0x1c>
 800aa98:	4635      	mov	r5, r6
 800aa9a:	e7e7      	b.n	800aa6c <_realloc_r+0x1c>

0800aa9c <__ascii_wctomb>:
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	4608      	mov	r0, r1
 800aaa0:	b141      	cbz	r1, 800aab4 <__ascii_wctomb+0x18>
 800aaa2:	2aff      	cmp	r2, #255	; 0xff
 800aaa4:	d904      	bls.n	800aab0 <__ascii_wctomb+0x14>
 800aaa6:	228a      	movs	r2, #138	; 0x8a
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	4770      	bx	lr
 800aab0:	2001      	movs	r0, #1
 800aab2:	700a      	strb	r2, [r1, #0]
 800aab4:	4770      	bx	lr

0800aab6 <abort>:
 800aab6:	2006      	movs	r0, #6
 800aab8:	b508      	push	{r3, lr}
 800aaba:	f000 f833 	bl	800ab24 <raise>
 800aabe:	2001      	movs	r0, #1
 800aac0:	f7f7 fd2b 	bl	800251a <_exit>

0800aac4 <_malloc_usable_size_r>:
 800aac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac8:	1f18      	subs	r0, r3, #4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bfbc      	itt	lt
 800aace:	580b      	ldrlt	r3, [r1, r0]
 800aad0:	18c0      	addlt	r0, r0, r3
 800aad2:	4770      	bx	lr

0800aad4 <_raise_r>:
 800aad4:	291f      	cmp	r1, #31
 800aad6:	b538      	push	{r3, r4, r5, lr}
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	d904      	bls.n	800aae8 <_raise_r+0x14>
 800aade:	2316      	movs	r3, #22
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	f04f 30ff 	mov.w	r0, #4294967295
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaea:	b112      	cbz	r2, 800aaf2 <_raise_r+0x1e>
 800aaec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaf0:	b94b      	cbnz	r3, 800ab06 <_raise_r+0x32>
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 f830 	bl	800ab58 <_getpid_r>
 800aaf8:	462a      	mov	r2, r5
 800aafa:	4601      	mov	r1, r0
 800aafc:	4620      	mov	r0, r4
 800aafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab02:	f000 b817 	b.w	800ab34 <_kill_r>
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d00a      	beq.n	800ab20 <_raise_r+0x4c>
 800ab0a:	1c59      	adds	r1, r3, #1
 800ab0c:	d103      	bne.n	800ab16 <_raise_r+0x42>
 800ab0e:	2316      	movs	r3, #22
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	2001      	movs	r0, #1
 800ab14:	e7e7      	b.n	800aae6 <_raise_r+0x12>
 800ab16:	2400      	movs	r4, #0
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab1e:	4798      	blx	r3
 800ab20:	2000      	movs	r0, #0
 800ab22:	e7e0      	b.n	800aae6 <_raise_r+0x12>

0800ab24 <raise>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <raise+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f7ff bfd3 	b.w	800aad4 <_raise_r>
 800ab2e:	bf00      	nop
 800ab30:	20000020 	.word	0x20000020

0800ab34 <_kill_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	2300      	movs	r3, #0
 800ab38:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_kill_r+0x20>)
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	4611      	mov	r1, r2
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	f7f7 fcda 	bl	80024fa <_kill>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	d102      	bne.n	800ab50 <_kill_r+0x1c>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	b103      	cbz	r3, 800ab50 <_kill_r+0x1c>
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	200007d4 	.word	0x200007d4

0800ab58 <_getpid_r>:
 800ab58:	f7f7 bcc8 	b.w	80024ec <_getpid>

0800ab5c <_init>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	bf00      	nop
 800ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab62:	bc08      	pop	{r3}
 800ab64:	469e      	mov	lr, r3
 800ab66:	4770      	bx	lr

0800ab68 <_fini>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr
